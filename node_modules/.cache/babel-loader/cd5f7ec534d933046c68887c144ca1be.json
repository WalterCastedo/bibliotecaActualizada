{"ast":null,"code":"const isPluginFabric = plugin => typeof plugin === \"function\";\n\nconst usePlugin = (app, plugin, ...options) => {\n  if (isPluginFabric(plugin)) {\n    app.use(plugin(...options));\n  } else {\n    app.use(plugin);\n  }\n};\n\nexport { usePlugin as u };","map":{"version":3,"mappings":"AAGA,MAAMA,iBAAmCC,MAAlB,IAAuG,OAAOA,MAAP,KAAkB,UAAhJ;;AAoBO,MAAMC,YAAY,CAAgBC,GAAhB,EAA0BF,MAA1B,EAA0B,GAAqDG,OAA/E,KAAgG;EACnH,mBAAeH,MAAf,GAAwB;IAC1BE,IAAIE,GAAJ,CAAQJ,OAAO,GAAGG,OAAV,CAAR;EAA0B,CADxB,MAEG;IACLD,IAAIE,GAAJ,CAAQJ,MAAR;EACF;AACF,CANO","names":["isPluginFabric","plugin","usePlugin","app","options","use"],"sources":["../../../../../../src/services/vue-plugin/utils/use-plugin.ts"],"sourcesContent":["import type { App } from 'vue'\nimport { VuesticPluginFabric, VuesticPlugin } from '../types'\n\nconst isPluginFabric = <O extends any[]>(plugin: VuesticPlugin | VuesticPluginFabric<O>): plugin is VuesticPluginFabric<O> => typeof plugin === 'function'\n\n/**\n * Allow user to use plugin as function or just pass it.\n *\n * @example\n * ```\n * createVuesticEssential({\n *   plugins: [GlobalConfigPlugin]\n * })\n * ```\n *\n * or\n *\n * ```\n * createVuesticEssential({\n *   plugins: [GlobalConfigPlugin({ VaButton: { color: 'primary' } })]\n * })\n * ```\n */\nexport const usePlugin = <O extends any>(app: App, plugin: VuesticPlugin | VuesticPluginFabric<O[]>, ...options: O[]) => {\n  if (isPluginFabric(plugin)) {\n    app.use(plugin(...options))\n  } else {\n    app.use(plugin) // Do not pass options, because it should be passed to fabric\n  }\n}\n"]},"metadata":{},"sourceType":"module"}