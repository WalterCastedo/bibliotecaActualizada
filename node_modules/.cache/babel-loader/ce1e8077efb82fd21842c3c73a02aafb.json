{"ast":null,"code":"import { ref, watch, onMounted } from \"vue\";\nimport { u as useEvent } from \"./useEvent.js\";\nimport { u as useHTMLElement } from \"./useHTMLElement.js\";\n\nfunction useHover(el, disabled) {\n  const isHovered = ref(false);\n\n  const onMouseEnter = () => {\n    isHovered.value = true;\n  };\n\n  const onMouseLeave = () => {\n    isHovered.value = false;\n  };\n\n  disabled && watch(disabled, v => {\n    if (v) {\n      isHovered.value = false;\n    }\n  });\n  onMounted(() => {\n    if (!(el == null ? void 0 : el.value)) {\n      return;\n    }\n\n    const getTarget = useHTMLElement(el);\n    useEvent(\"mouseenter\", onMouseEnter, getTarget);\n    useEvent(\"mouseleave\", onMouseLeave, getTarget);\n  });\n  return {\n    isHovered,\n    onMouseEnter,\n    onMouseLeave\n  };\n}\n\nexport { useHover as u };","map":{"version":3,"mappings":";;;;AAIO,kBAAmBA,EAAnB,EAA6DC,QAA7D,EAAsF;EACrF,kBAAYC,IAAI,KAAJ,CAAZ;;EAEN,MAAMC,eAAe,MAAM;IAAEC,UAAUC,KAAV,GAAkB,IAAlB;EAAkB,CAA/C;;EACA,MAAMC,eAAe,MAAM;IAAEF,UAAUC,KAAV,GAAkB,KAAlB;EAAkB,CAA/C;;EAEYJ,kBAAMA,QAAN,EAAiBM,CAAD,IAAO;IACjC,IAAIA,CAAJ,EAAO;MAAEH,UAAUC,KAAV,GAAkB,KAAlB;IAAwB;EAClC,CAFW;EAIZG,UAAU,MAAM;IACV,MAACR,yBAAIK,KAAL,GAAY;MAAE;IAAO;;IACnB,kBAAYI,eAAeT,EAAf,CAAZ;IACGU,uBAAcP,YAAd,EAA4BQ,SAA5B;IACAD,uBAAcJ,YAAd,EAA4BK,SAA5B;EACV,CALD;EAOO;IAAEP,SAAF;IAAaD,YAAb;IAA2BG;EAA3B;AACT","names":["el","disabled","ref","onMouseEnter","isHovered","value","onMouseLeave","v","onMounted","useHTMLElement","useEvent","getTarget"],"sources":["../../../../src/composables/useHover.ts"],"sourcesContent":["import { ref, Ref, watch, onMounted } from 'vue'\n\nimport { useHTMLElement, useEvent } from './'\n\nexport function useHover (el?: Ref<HTMLElement | null | undefined>, disabled?: Ref<boolean>) {\n  const isHovered = ref(false)\n\n  const onMouseEnter = () => { isHovered.value = true }\n  const onMouseLeave = () => { isHovered.value = false }\n\n  disabled && watch(disabled, (v) => {\n    if (v) { isHovered.value = false }\n  })\n\n  onMounted(() => {\n    if (!el?.value) { return }\n    const getTarget = useHTMLElement(el as Ref<HTMLElement>)\n    useEvent('mouseenter', onMouseEnter, getTarget)\n    useEvent('mouseleave', onMouseLeave, getTarget)\n  })\n\n  return { isHovered, onMouseEnter, onMouseLeave }\n}\n"]},"metadata":{},"sourceType":"module"}