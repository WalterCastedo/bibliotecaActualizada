{"ast":null,"code":"import { defineComponent, shallowRef, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementVNode, normalizeStyle, withModifiers, mergeProps, toHandlers, withDirectives, createVNode, vShow, createElementBlock, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from \"vue\";\nimport { g as generateUniqueId } from \"../../utils/uuid.js\";\nimport { u as useColors } from \"../../composables/useColors.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { u as useKeyboardOnlyFocus } from \"../../composables/useKeyboardOnlyFocus.js\";\nimport { u as useSelectableEmits, a as useSelectableProps, b as useSelectable } from \"../../composables/useSelectable.js\";\nimport { u as useTextColor } from \"../../composables/useTextColor.js\";\nimport { V as VaIcon } from \"../va-icon/index.js\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper.js\";\nimport { V as VaMessageListWrapper } from \"../va-input/components/VaMessageListWrapper.js\";\n\nvar VaCheckbox_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \":root{--va-checkbox-display: inline-block;--va-checkbox-input-padding: 0;--va-checkbox-input-cursor: pointer;--va-checkbox-disabled-cursor: default;--va-checkbox-readonly-cursor: initial;--va-checkbox-label-display: inline-block;--va-checkbox-font-size: 15px;--va-checkbox-line-height: 20px;--va-checkbox-square-width: 1.35rem;--va-checkbox-square-min-width: 1.35rem;--va-checkbox-square-height: 1.35rem;--va-checkbox-square-background-color: var(--va-background-element);--va-checkbox-square-border: solid .125rem var(--va-background-border);--va-checkbox-square-border-radius: .25rem}.va-checkbox{display:var(--va-checkbox-display);max-width:-webkit-fit-content;max-width:-moz-fit-content;max-width:fit-content;font-family:var(--va-font-family)}.va-checkbox__input-container{align-items:center;display:flex;padding:var(--va-checkbox-input-padding);cursor:var(--va-checkbox-input-cursor);font-size:var(--va-checkbox-font-size);line-height:var(--va-checkbox-line-height)}.va-checkbox--disabled .va-checkbox__input-container{cursor:default;opacity:.4;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:var(--va-checkbox-disabled-cursor)}.va-checkbox--readonly .va-checkbox__input-container{cursor:var(--va-checkbox-readonly-cursor)}.va-checkbox--left-label .va-checkbox__input-container{flex-direction:row-reverse}.va-checkbox .va-checkbox__square{display:flex;justify-content:center;align-items:center;width:var(--va-checkbox-square-width);min-width:var(--va-checkbox-square-min-width);height:var(--va-checkbox-square-height);position:relative;background-color:var(--va-checkbox-square-background-color);border:var(--va-checkbox-square-border, var(--va-control-border));border-radius:var(--va-checkbox-square-border-radius)}.va-checkbox--on-keyboard-focus.va-checkbox .va-checkbox__square{transition:all,.6s,ease-in;outline:2px solid var(--va-focus)}.va-checkbox__input{position:absolute;width:1px;height:1px;margin:-1px;border:0;padding:0;white-space:nowrap;-webkit-clip-path:inset(100%);clip-path:inset(100%);clip:rect(0 0 0 0);overflow:hidden}.va-checkbox__label{display:var(--va-checkbox-label-display);position:relative}.va-checkbox__icon{pointer-events:none;position:absolute}.va-checkbox--selected .va-checkbox__icon{color:var(--va-checkbox-selected-icon-color)}.va-checkbox--indeterminate .va-checkbox__icon{color:var(--va-checkbox-indeterminate-icon-color)}\\n\")();\n\nconst VaCheckboxValueType = [Boolean, Array, String, Object];\n\nconst _sfc_main = defineComponent({\n  name: \"VaCheckbox\",\n  components: {\n    VaMessageListWrapper,\n    VaIcon\n  },\n  emits: useSelectableEmits,\n  props: { ...useSelectableProps,\n    ...useComponentPresetProp,\n    modelValue: {\n      type: VaCheckboxValueType,\n      default: false\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    },\n    checkedIcon: {\n      type: String,\n      default: \"va-check\"\n    },\n    indeterminate: {\n      type: Boolean,\n      default: false\n    },\n    indeterminateValue: {\n      type: VaCheckboxValueType,\n      default: null\n    },\n    indeterminateIcon: {\n      type: String,\n      default: \"remove\"\n    },\n    id: {\n      type: String,\n      default: \"\"\n    },\n    name: {\n      type: String,\n      default: \"\"\n    },\n    ariaLabel: {\n      type: String,\n      default: void 0\n    }\n  },\n\n  setup(props, {\n    emit\n  }) {\n    const elements = {\n      container: shallowRef(),\n      input: shallowRef(),\n      label: shallowRef()\n    };\n    const {\n      isChecked,\n      computedError,\n      isIndeterminate,\n      computedErrorMessages,\n      validationAriaAttributes,\n      toggleSelection,\n      onBlur,\n      onFocus\n    } = useSelectable(props, emit, elements);\n    const {\n      getColor\n    } = useColors();\n    const {\n      hasKeyboardFocus,\n      keyboardFocusListeners\n    } = useKeyboardOnlyFocus();\n    const {\n      textColorComputed\n    } = useTextColor();\n    const isActive = computed(() => isChecked.value || isIndeterminate.value);\n    const computedClass = computed(() => ({\n      \"va-checkbox--selected\": isChecked.value,\n      \"va-checkbox--readonly\": props.readonly,\n      \"va-checkbox--disabled\": props.disabled,\n      \"va-checkbox--indeterminate\": props.indeterminate,\n      \"va-checkbox--error\": computedError.value,\n      \"va-checkbox--left-label\": props.leftLabel,\n      \"va-checkbox--on-keyboard-focus\": hasKeyboardFocus.value\n    }));\n    const labelStyle = computed(() => {\n      return {\n        color: computedError.value ? getColor(\"danger\") : \"\",\n        padding: !props.label ? \"\" : props.leftLabel ? \"0 0.5rem 0 0\" : \"0 0 0 0.5rem\"\n      };\n    });\n    const inputStyle = computed(() => {\n      const style = {\n        background: isActive.value ? getColor(props.color) : \"\",\n        borderColor: isActive.value ? getColor(props.color) : \"\"\n      };\n\n      if (computedError.value) {\n        style.borderColor = getColor(\"danger\");\n      }\n\n      return style;\n    });\n    const computedIconName = computed(() => props.indeterminate && isIndeterminate.value ? props.indeterminateIcon : props.checkedIcon);\n    const uniqueId = computed(generateUniqueId);\n    const computedId = computed(() => props.id || uniqueId.value);\n    const computedName = computed(() => props.name || uniqueId.value);\n    const inputAttributesComputed = computed(() => ({\n      name: computedName.value,\n      disabled: props.disabled,\n      readonly: props.readonly,\n      tabindex: props.disabled ? -1 : 0,\n      ariaLabel: props.ariaLabel,\n      ariaDisabled: props.disabled,\n      ariaReadOnly: props.readonly,\n      ariaChecked: isActive.value,\n      ...validationAriaAttributes.value\n    }));\n    return {\n      isActive,\n      computedClass,\n      labelStyle,\n      inputStyle,\n      computedIconName,\n      textColorComputed,\n      computedError,\n      computedErrorMessages,\n      keyboardFocusListeners,\n      toggleSelection,\n      onBlur,\n      onFocus,\n      inputAttributesComputed,\n      computedId,\n      computedName\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"id\", \"indeterminate\", \"value\", \"checked\"];\nconst _hoisted_2 = [\"for\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_icon = resolveComponent(\"va-icon\");\n\n  const _component_VaMessageListWrapper = resolveComponent(\"VaMessageListWrapper\");\n\n  return openBlock(), createBlock(_component_VaMessageListWrapper, {\n    class: normalizeClass([\"va-checkbox\", _ctx.computedClass]),\n    disabled: _ctx.disabled,\n    success: _ctx.success,\n    messages: _ctx.messages,\n    error: _ctx.computedError,\n    \"error-messages\": _ctx.computedErrorMessages,\n    \"error-count\": _ctx.errorCount\n  }, {\n    default: withCtx(() => [createElementVNode(\"div\", {\n      ref: \"container\",\n      class: \"va-checkbox__input-container\",\n      onClick: _cache[6] || (_cache[6] = (...args) => _ctx.toggleSelection && _ctx.toggleSelection(...args)),\n      onBlur: _cache[7] || (_cache[7] = (...args) => _ctx.onBlur && _ctx.onBlur(...args))\n    }, [createElementVNode(\"div\", {\n      class: \"va-checkbox__square\",\n      style: normalizeStyle(_ctx.inputStyle),\n      onSelectstart: _cache[4] || (_cache[4] = withModifiers(() => {}, [\"prevent\"]))\n    }, [createElementVNode(\"input\", mergeProps({\n      ref: \"input\",\n      type: \"checkbox\",\n      class: \"va-checkbox__input\",\n      id: _ctx.computedId,\n      indeterminate: _ctx.indeterminate,\n      value: _ctx.label,\n      checked: _ctx.isActive\n    }, _ctx.inputAttributesComputed, toHandlers(_ctx.keyboardFocusListeners), {\n      onFocus: _cache[0] || (_cache[0] = (...args) => _ctx.onFocus && _ctx.onFocus(...args)),\n      onBlur: _cache[1] || (_cache[1] = (...args) => _ctx.onBlur && _ctx.onBlur(...args)),\n      onClick: _cache[2] || (_cache[2] = withModifiers(() => {}, [\"stop\", \"prevent\"])),\n      onKeypress: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.toggleSelection && _ctx.toggleSelection(...args), [\"prevent\"]))\n    }), null, 16, _hoisted_1), withDirectives(createVNode(_component_va_icon, {\n      class: \"va-checkbox__icon\",\n      size: \"20px\",\n      name: _ctx.computedIconName,\n      color: _ctx.textColorComputed\n    }, null, 8, [\"name\", \"color\"]), [[vShow, _ctx.isActive]])], 36), _ctx.label || _ctx.$slots.label ? (openBlock(), createElementBlock(\"label\", {\n      key: 0,\n      ref: \"label\",\n      class: \"va-checkbox__label\",\n      for: _ctx.computedId,\n      style: normalizeStyle(_ctx.labelStyle),\n      onBlur: _cache[5] || (_cache[5] = (...args) => _ctx.onBlur && _ctx.onBlur(...args))\n    }, [renderSlot(_ctx.$slots, \"label\", {}, () => [createTextVNode(toDisplayString(_ctx.label), 1)])], 44, _hoisted_2)) : createCommentVNode(\"\", true)], 544)]),\n    _: 3\n  }, 8, [\"class\", \"disabled\", \"success\", \"messages\", \"error\", \"error-messages\", \"error-count\"]);\n}\n\nvar _VaCheckbox = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaCheckbox as _ };\nimport './VaCheckbox.css';","map":{"version":3,"mappings":"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","names":["VaCheckboxValueType","Boolean","Array","String","Object","_sfc_main","defineComponent","name","components","VaMessageListWrapper","VaIcon","emits","useSelectableEmits","props","useSelectableProps","useComponentPresetProp","modelValue","type","default","color","checkedIcon","indeterminate","indeterminateValue","indeterminateIcon","id","ariaLabel","setup","emit","elements","container","shallowRef","input","label","isChecked","computedError","isIndeterminate","computedErrorMessages","validationAriaAttributes","toggleSelection","onBlur","onFocus","useSelectable","getColor","useColors","hasKeyboardFocus","keyboardFocusListeners","useKeyboardOnlyFocus","textColorComputed","useTextColor","isActive","computed","value","readonly","disabled","leftLabel","padding","style","background","borderColor","generateUniqueId","computedId","uniqueId","computedName","tabindex","ariaDisabled","ariaReadOnly","ariaChecked","computedClass","labelStyle","inputStyle","computedIconName","inputAttributesComputed","_createBlock","_component_VaMessageListWrapper","class","_normalizeClass","_ctx","success","messages","error","_createElementVNode","ref","onClick","_cache","_normalizeStyle","onSelectstart","_withModifiers","checked","_mergeProps","_toHandlers","onKeypress","_hoisted_1","withDirectives","_createVNode","_component_va_icon","size","openBlock","_createElementBlock","key","for","_renderSlot","_toDisplayString","_createTextVNode","_hoisted_2","createCommentVNode"],"sources":["../../../../../src/components/va-checkbox/VaCheckbox.vue"],"sourcesContent":["<template>\n  <VaMessageListWrapper\n    class=\"va-checkbox\"\n    :class=\"computedClass\"\n    :disabled=\"disabled\"\n    :success=\"success\"\n    :messages=\"messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n  >\n    <div\n      ref=\"container\"\n      class=\"va-checkbox__input-container\"\n      @click=\"toggleSelection\"\n      @blur=\"onBlur\"\n    >\n      <div\n        class=\"va-checkbox__square\"\n        :style=\"inputStyle\"\n        @selectstart.prevent\n      >\n        <input\n          ref=\"input\"\n          type=\"checkbox\"\n          class=\"va-checkbox__input\"\n          :id=\"computedId\"\n          :indeterminate=\"indeterminate\"\n          :value=\"label\"\n          :checked=\"isActive\"\n          v-bind=\"inputAttributesComputed\"\n          v-on=\"keyboardFocusListeners\"\n          @focus=\"onFocus\"\n          @blur=\"onBlur\"\n          @click.stop.prevent\n          @keypress.prevent=\"toggleSelection\"\n        >\n        <va-icon\n          v-show=\"isActive\"\n          class=\"va-checkbox__icon\"\n          size=\"20px\"\n          :name=\"computedIconName\"\n          :color=\"textColorComputed\"\n        />\n      </div>\n      <label\n        v-if=\"label || $slots.label\"\n        ref=\"label\"\n        class=\"va-checkbox__label\"\n        :for=\"computedId\"\n        :style=\"labelStyle\"\n        @blur=\"onBlur\"\n      >\n        <slot name=\"label\">{{ label }}</slot>\n      </label>\n    </div>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType, shallowRef } from 'vue'\n\nimport { generateUniqueId } from '../../utils/uuid'\nimport {\n  useComponentPresetProp,\n  useKeyboardOnlyFocus,\n  useColors, useTextColor,\n  useSelectable, useSelectableProps, useSelectableEmits, Elements,\n} from '../../composables'\n\nimport { VaMessageListWrapper } from '../va-input'\nimport { VaIcon } from '../va-icon/'\n\nconst VaCheckboxValueType = [Boolean, Array, String, Object] as PropType<boolean | null | string | number | Record<any, unknown> | unknown[]>\n\nexport default defineComponent({\n  name: 'VaCheckbox',\n  components: { VaMessageListWrapper, VaIcon },\n  emits: useSelectableEmits,\n  props: {\n    ...useSelectableProps,\n    ...useComponentPresetProp,\n    modelValue: { type: VaCheckboxValueType, default: false },\n    color: { type: String, default: 'primary' },\n    checkedIcon: { type: String, default: 'va-check' },\n    indeterminate: { type: Boolean, default: false },\n    indeterminateValue: { type: VaCheckboxValueType, default: null },\n    indeterminateIcon: { type: String, default: 'remove' },\n    id: { type: String, default: '' },\n    name: { type: String, default: '' },\n    ariaLabel: { type: String, default: undefined },\n  },\n  setup (props, { emit }) {\n    const elements: Elements = {\n      container: shallowRef<HTMLElement>(),\n      input: shallowRef<HTMLElement>(),\n      label: shallowRef<HTMLElement>(),\n    }\n\n    const {\n      isChecked,\n      computedError,\n      isIndeterminate,\n      computedErrorMessages,\n      validationAriaAttributes,\n      toggleSelection,\n      onBlur,\n      onFocus,\n    } = useSelectable(props, emit, elements)\n    const { getColor } = useColors()\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n    const { textColorComputed } = useTextColor()\n\n    const isActive = computed(() => isChecked.value || isIndeterminate.value)\n\n    const computedClass = computed(() => ({\n      'va-checkbox--selected': isChecked.value,\n      'va-checkbox--readonly': props.readonly,\n      'va-checkbox--disabled': props.disabled,\n      'va-checkbox--indeterminate': props.indeterminate,\n      'va-checkbox--error': computedError.value,\n      'va-checkbox--left-label': props.leftLabel,\n      'va-checkbox--on-keyboard-focus': hasKeyboardFocus.value,\n    }))\n\n    const labelStyle = computed(() => {\n      return {\n        color: computedError.value ? getColor('danger') : '',\n        padding: !props.label\n          ? ''\n          : props.leftLabel\n            ? '0 0.5rem 0 0'\n            : '0 0 0 0.5rem',\n      }\n    })\n\n    const inputStyle = computed(() => {\n      const style = {\n        background: isActive.value ? getColor(props.color) : '',\n        borderColor: isActive.value ? getColor(props.color) : '',\n      }\n\n      if (computedError.value) {\n        style.borderColor = getColor('danger')\n      }\n\n      return style\n    })\n\n    const computedIconName = computed(() => props.indeterminate && isIndeterminate.value\n      ? props.indeterminateIcon\n      : props.checkedIcon,\n    )\n\n    const uniqueId = computed(generateUniqueId)\n    const computedId = computed(() => props.id || uniqueId.value)\n    const computedName = computed(() => props.name || uniqueId.value)\n    const inputAttributesComputed = computed(() => ({\n      name: computedName.value,\n      disabled: props.disabled,\n      readonly: props.readonly,\n      tabindex: props.disabled ? -1 : 0,\n      ariaLabel: props.ariaLabel,\n      ariaDisabled: props.disabled,\n      ariaReadOnly: props.readonly,\n      ariaChecked: isActive.value,\n      ...validationAriaAttributes.value,\n    }))\n\n    return {\n      isActive,\n      computedClass,\n      labelStyle,\n      inputStyle,\n      computedIconName,\n      textColorComputed,\n      computedError,\n      computedErrorMessages,\n      keyboardFocusListeners,\n      toggleSelection,\n      onBlur,\n      onFocus,\n      inputAttributesComputed,\n      computedId,\n      computedName,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-checkbox {\n  display: var(--va-checkbox-display);\n  max-width: fit-content;\n  font-family: var(--va-font-family);\n\n  &__input-container {\n    align-items: center;\n    display: flex;\n    padding: var(--va-checkbox-input-padding);\n    cursor: var(--va-checkbox-input-cursor);\n    font-size: var(--va-checkbox-font-size);\n    line-height: var(--va-checkbox-line-height);\n\n    @at-root {\n      .va-checkbox--disabled & {\n        @include va-disabled();\n\n        cursor: var(--va-checkbox-disabled-cursor);\n      }\n\n      .va-checkbox--readonly & {\n        cursor: var(--va-checkbox-readonly-cursor);\n      }\n\n      .va-checkbox--left-label & {\n        flex-direction: row-reverse;\n      }\n    }\n  }\n\n  #{&}__square {\n    @include flex-center();\n\n    width: var(--va-checkbox-square-width);\n    min-width: var(--va-checkbox-square-min-width);\n    height: var(--va-checkbox-square-height);\n    position: relative;\n    background-color: var(--va-checkbox-square-background-color);\n    border: var(--va-checkbox-square-border, var(--va-control-border));\n    border-radius: var(--va-checkbox-square-border-radius);\n\n    @at-root {\n      .va-checkbox--on-keyboard-focus#{&} {\n        transition: all, 0.6s, ease-in;\n        outline: 2px solid var(--va-focus);\n      }\n    }\n  }\n\n  &__input {\n    @include visually-hidden;\n  }\n\n  &__label {\n    display: var(--va-checkbox-label-display);\n    position: relative;\n  }\n\n  &__icon {\n    pointer-events: none;\n    position: absolute;\n  }\n\n  &--selected {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-selected-icon-color);\n      }\n    }\n  }\n\n  &--indeterminate {\n    .va-checkbox {\n      &__icon {\n        color: var(--va-checkbox-indeterminate-icon-color);\n      }\n    }\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}