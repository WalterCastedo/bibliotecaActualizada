{"ast":null,"code":"import { ref } from \"vue\";\nimport { u as useEvent } from \"../../composables/useEvent.js\";\nconst useSplitDraggerProps = {\n  vertical: {\n    type: Boolean,\n    default: false\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  }\n};\n\nconst useSplitDragger = (containerSizeComputed, splitterPositionComputed, props) => {\n  const isDragging = ref(false);\n  const dragStartPosition = ref(0);\n  const dragStartSplitterPosition = ref(0);\n  const currentSplitterPosition = ref(0);\n\n  const getEventPosition = (e, eventName) => {\n    const event = e.type === eventName ? e : e.changedTouches[0];\n    return props.vertical ? event.pageY : event.pageX;\n  };\n\n  const startDragging = e => {\n    if (props.disabled || !containerSizeComputed.value) {\n      return;\n    }\n\n    isDragging.value = true;\n    dragStartPosition.value = getEventPosition(e, \"mousedown\");\n    dragStartSplitterPosition.value = splitterPositionComputed.value;\n  };\n\n  const processDragging = e => {\n    if (!isDragging.value) {\n      return;\n    }\n\n    const currentPosition = getEventPosition(e, \"mousemove\");\n    const distance = currentPosition - dragStartPosition.value;\n    currentSplitterPosition.value = dragStartSplitterPosition.value + Math.floor(distance / containerSizeComputed.value * 100);\n  };\n\n  const stopDragging = () => {\n    isDragging.value = false;\n  };\n\n  useEvent([\"mousemove\", \"touchmove\"], processDragging);\n  useEvent([\"mouseup\", \"touchcancel\"], stopDragging);\n  return {\n    isDragging,\n    startDragging,\n    currentSplitterPosition\n  };\n};\n\nexport { useSplitDragger as a, useSplitDraggerProps as u };","map":{"version":3,"mappings":";;AAIO,MAAMA,uBAAuB;EAClCC,UAAU;IAAEC,MAAMC,OAAR;IAAiBC,SAAS;EAA1B,CADwB;EAElCC,UAAU;IAAEH,MAAMC,OAAR;IAAiBC,SAAS;EAA1B;AAFwB,CAA7B;;AAKA,MAAME,kBAAkB,CAC7BC,qBAD6B,EAE7BC,wBAF6B,EAG7BC,KAH6B,KAI1B;EACG,mBAAaC,IAAI,KAAJ,CAAb;EACA,0BAAoBA,IAAI,CAAJ,CAApB;EACA,kCAA4BA,IAAI,CAAJ,CAA5B;EACA,gCAA0BA,IAAI,CAAJ,CAA1B;;EAEA,yBAAmB,CAACC,CAAD,EAA6BC,SAA7B,KAA8E;IACrG,MAAMC,QAAQF,EAAET,IAAF,KAAWU,SAAX,GAAuBD,CAAvB,GAA0CA,EAAiBG,cAAjB,CAAgC,CAAhC,CAAxD;IACA,OAAOL,MAAMR,QAAN,GAAiBY,MAAME,KAAvB,GAA+BF,MAAMG,KAA5C;EAA4C,CAFxC;;EAKA,sBAAiBL,CAAD,IAAgC;IACpD,IAAIF,MAAMJ,QAAN,IAAkB,CAACE,sBAAsBU,KAA7C,EAAoD;MAAE;IAAO;;IAE7DC,WAAWD,KAAX,GAAmB,IAAnB;IACkBE,0BAAQC,iBAAiBT,CAAjB,EAAoB,WAApB,CAAR;IAClBU,0BAA0BJ,KAA1B,GAAkCT,yBAAyBS,KAA3D;EAA2D,CALvD;;EAQA,wBAAmBN,CAAD,IAAgC;IAClD,KAACO,WAAWD,KAAZ,EAAmB;MAAE;IAAO;;IAE1B,wBAAkBG,iBAAiBT,CAAjB,EAAoB,WAApB,CAAlB;IACA,iBAAWW,kBAAkBH,kBAAkBF,KAA/C;IACkBM,gCAAQF,0BAA0BJ,KAA1B,GAAkCO,KAAKC,KAAL,CAAYC,WAAWnB,sBAAsBU,KAAjC,GAA2C,GAAvD,CAA1C;EAAoG,CALxH;;EAQN,MAAMU,eAAe,MAAM;IACzBT,WAAWD,KAAX,GAAmB,KAAnB;EAAmB,CADrB;;EAIAW,SAAS,CAAC,WAAD,EAAc,WAAd,CAAT,EAAqCC,eAArC;EACAD,SAAS,CAAC,SAAD,EAAY,aAAZ,CAAT,EAAqCD,YAArC;EAEO;IAAET,UAAF;IAAcY,aAAd;IAA6BP;EAA7B;AACT,CAvCO","names":["useSplitDraggerProps","vertical","type","Boolean","default","disabled","useSplitDragger","containerSizeComputed","splitterPositionComputed","props","ref","e","eventName","event","changedTouches","pageY","pageX","value","isDragging","dragStartPosition","getEventPosition","dragStartSplitterPosition","currentPosition","currentSplitterPosition","Math","floor","distance","stopDragging","useEvent","processDragging","startDragging"],"sources":["../../../../../src/components/va-split/useSplitDragger.ts"],"sourcesContent":["import { ExtractPropTypes, ref, Ref } from 'vue'\n\nimport { useEvent } from '../../composables'\n\nexport const useSplitDraggerProps = {\n  vertical: { type: Boolean, default: false },\n  disabled: { type: Boolean, default: false },\n}\n\nexport const useSplitDragger = (\n  containerSizeComputed: Ref<number | undefined>,\n  splitterPositionComputed: Ref<number>,\n  props: ExtractPropTypes<typeof useSplitDraggerProps>,\n) => {\n  const isDragging = ref(false)\n  const dragStartPosition = ref(0)\n  const dragStartSplitterPosition = ref(0)\n  const currentSplitterPosition = ref(0)\n\n  const getEventPosition = (e: MouseEvent | TouchEvent, eventName: 'mousemove' | 'mousedown'): number => {\n    const event = e.type === eventName ? e as MouseEvent : (e as TouchEvent).changedTouches[0]\n    return props.vertical ? event.pageY : event.pageX\n  }\n\n  const startDragging = (e: MouseEvent | TouchEvent) => {\n    if (props.disabled || !containerSizeComputed.value) { return }\n\n    isDragging.value = true\n    dragStartPosition.value = getEventPosition(e, 'mousedown')\n    dragStartSplitterPosition.value = splitterPositionComputed.value\n  }\n\n  const processDragging = (e: MouseEvent | TouchEvent) => {\n    if (!isDragging.value) { return }\n\n    const currentPosition = getEventPosition(e, 'mousemove')\n    const distance = currentPosition - dragStartPosition.value\n    currentSplitterPosition.value = dragStartSplitterPosition.value + Math.floor((distance / containerSizeComputed.value!) * 100)\n  }\n\n  const stopDragging = () => {\n    isDragging.value = false\n  }\n\n  useEvent(['mousemove', 'touchmove'], processDragging)\n  useEvent(['mouseup', 'touchcancel'], stopDragging)\n\n  return { isDragging, startDragging, currentSplitterPosition }\n}\n"]},"metadata":{},"sourceType":"module"}