{"ast":null,"code":"const isFunction = val => typeof val === \"function\";\n\nconst isObject = val => val !== null && typeof val === \"object\";\n\nfunction useBinding(props) {\n  const getRowBind = row => isFunction(props.rowBind) ? props.rowBind(row.source, row.initialIndex) : isObject(props.rowBind) ? props.rowBind : {};\n\n  const getCellBind = (cell, row) => isFunction(props.cellBind) ? props.cellBind(cell.source, row.source, cell.column, row.initialIndex) : isObject(props.cellBind) ? props.cellBind : {};\n\n  return {\n    getRowBind,\n    getCellBind\n  };\n}\n\nexport { useBinding as u };","map":{"version":3,"mappings":"AAOA,MAAMA,aAAcC,GAAD,IAAmC,OAAOA,GAAP,KAAe,UAArE;;AACA,MAAMC,WAAYD,GAAD,IAA2CA,QAAQ,IAAR,IAAgB,OAAOA,GAAP,KAAe,QAA3F;;AAOA,oBAAoCE,KAApC,EAA4D;EACpD,mBAAcC,GAAD,IACjBJ,WAAWG,MAAME,OAAjB,IACIF,MAAME,OAAN,CAAcD,IAAIE,MAAlB,EAA0BF,IAAIG,YAA9B,CADJ,GAEIL,SAASC,MAAME,OAAf,IACEF,MAAME,OADR,GAEE,EALF;;EAQA,oBAAc,CAACG,IAAD,EAAsBJ,GAAtB,KAClBJ,WAAWG,MAAMM,QAAjB,IACIN,MAAMM,QAAN,CAAeD,KAAKF,MAApB,EAA4BF,IAAIE,MAAhC,EAAwCE,KAAKE,MAA7C,EAAqDN,IAAIG,YAAzD,CADJ,GAEIL,SAASC,MAAMM,QAAf,IACEN,MAAMM,QADR,GAEE,EALF;;EAQC;IACLE,UADK;IAELC;EAFK;AAIT","names":["isFunction","val","isObject","props","row","rowBind","source","initialIndex","cell","cellBind","column","getRowBind","getCellBind"],"sources":["../../../../../../src/components/va-data-table/hooks/useBinding.ts"],"sourcesContent":["import type {\n  DataTableCell,\n  DataTableRow,\n  DataTableRowBind,\n  DataTableCellBind,\n} from '../types'\n\nconst isFunction = (val: unknown): val is Function => typeof val === 'function'\nconst isObject = (val: unknown): val is Record<any, any> => val !== null && typeof val === 'object'\n\ninterface useBindingProps {\n  rowBind?: DataTableRowBind\n  cellBind?: DataTableCellBind\n}\n\nexport default function useBinding (props: useBindingProps) {\n  const getRowBind = (row: DataTableRow) => (\n    isFunction(props.rowBind)\n      ? props.rowBind(row.source, row.initialIndex)\n      : isObject(props.rowBind)\n        ? props.rowBind\n        : {}\n  ) as Record<string, string>\n\n  const getCellBind = (cell: DataTableCell, row: DataTableRow) => (\n    isFunction(props.cellBind)\n      ? props.cellBind(cell.source, row.source, cell.column, row.initialIndex)\n      : isObject(props.cellBind)\n        ? props.cellBind\n        : {}\n  ) as Record<string, string>\n\n  return {\n    getRowBind,\n    getCellBind,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}