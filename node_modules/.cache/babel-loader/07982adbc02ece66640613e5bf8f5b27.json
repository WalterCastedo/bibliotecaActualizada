{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { computed } from \"vue\";\nimport { a as useStatefulProps, b as useStateful } from \"./useStateful.js\";\nimport { u as useLoadingProps } from \"./useLoading.js\";\nimport { u as useValidationProps, a as useValidationEmits, b as useValidation } from \"./useValidation.js\";\nimport { u as useFocus } from \"./useFocus.js\";\nconst useSelectableProps = { ...useStatefulProps,\n  ...useLoadingProps,\n  ...useValidationProps,\n  arrayValue: {\n    type: [String, Boolean, Object, Number],\n    default: void 0\n  },\n  label: {\n    type: String,\n    default: \"\"\n  },\n  leftLabel: {\n    type: Boolean,\n    default: false\n  },\n  trueValue: {\n    type: null,\n    default: true\n  },\n  falseValue: {\n    type: null,\n    default: false\n  },\n  indeterminate: {\n    type: Boolean,\n    default: false\n  },\n  indeterminateValue: {\n    type: null,\n    default: null\n  },\n  disabled: {\n    type: Boolean,\n    default: false\n  },\n  readonly: {\n    type: Boolean,\n    default: false\n  }\n};\nconst useSelectableEmits = [...useValidationEmits, \"update:modelValue\", \"focus\", \"blur\"];\n\nconst checkDuplicates = props => {\n  const values = [props.falseValue, props.trueValue];\n\n  if (props.indeterminate) {\n    values.push(props.indeterminateValue);\n  }\n\n  const hasDuplicates = new Set(values).size !== values.length;\n\n  if (hasDuplicates) {\n    throw new Error(\"falseValue, trueValue, indeterminateValue props should have strictly different values, which is not the case.\");\n  }\n};\n\nconst useSelectable = (props, emit, {\n  input,\n  label,\n  container\n}) => {\n  checkDuplicates(props);\n\n  const reset = () => withoutValidation(() => {\n    emit(\"update:modelValue\", false);\n    resetValidation();\n  });\n\n  const focus = () => {\n    var _a;\n\n    (_a = input.value) == null ? void 0 : _a.focus();\n  };\n\n  const {\n    computedError,\n    computedErrorMessages,\n    validate,\n    validationAriaAttributes,\n    withoutValidation,\n    resetValidation\n  } = useValidation(props, emit, {\n    reset,\n    focus\n  });\n  const {\n    valueComputed\n  } = useStateful(props, emit);\n  const {\n    isFocused\n  } = useFocus();\n\n  const isElementRelated = element => {\n    return !!element && [label.value, container.value].includes(element);\n  };\n\n  const onBlur = event => {\n    if (input.value === event.target && !isElementRelated(event.relatedTarget)) {\n      isFocused.value = false;\n      computedError.value = false;\n      validate();\n      emit(\"blur\", event);\n    }\n  };\n\n  const onFocus = event => {\n    isFocused.value = true;\n    emit(\"focus\", event);\n  };\n\n  const isIndeterminate = computed(() => props.indeterminate && valueComputed.value === props.indeterminateValue);\n  const modelIsArray = computed(() => props.arrayValue !== void 0 && props.arrayValue !== null);\n  const isChecked = computed(() => {\n    var _a;\n\n    if (modelIsArray.value) {\n      return (_a = props.modelValue) == null ? void 0 : _a.includes(props.arrayValue);\n    }\n\n    return valueComputed.value === props.trueValue;\n  });\n\n  const toggleSelection = () => {\n    if (props.readonly || props.disabled || props.loading) {\n      return;\n    }\n\n    if (modelIsArray.value) {\n      if (!props.modelValue) {\n        emit(\"update:modelValue\", [props.arrayValue]);\n      } else if (!Array.isArray(props.modelValue)) {\n        emit(\"update:modelValue\", props.modelValue === props.arrayValue ? [] : [props.modelValue, props.arrayValue]);\n      } else if (props.modelValue.includes(props.arrayValue)) {\n        emit(\"update:modelValue\", props.modelValue.filter(option => option !== props.arrayValue));\n      } else {\n        emit(\"update:modelValue\", props.modelValue.concat(props.arrayValue));\n      }\n\n      return;\n    }\n\n    if (props.indeterminate) {\n      if (isIndeterminate.value) {\n        valueComputed.value = props.trueValue;\n      } else if (isChecked.value) {\n        valueComputed.value = props.falseValue;\n      } else {\n        valueComputed.value = props.indeterminateValue;\n      }\n\n      return;\n    }\n\n    if (isChecked.value) {\n      valueComputed.value = props.falseValue;\n    } else {\n      valueComputed.value = props.trueValue;\n    }\n  };\n\n  return {\n    isChecked,\n    isIndeterminate,\n    onBlur,\n    onFocus,\n    toggleSelection,\n    reset,\n    focus,\n    computedError,\n    computedErrorMessages,\n    validationAriaAttributes\n  };\n};\n\nexport { useSelectableProps as a, useSelectable as b, useSelectableEmits as u };","map":{"version":3,"mappings":";;;;;;;AAyBO,MAAMA,qBAAqB,EAChC,GAAGC,gBAD6B;EAEhC,GAAGC,eAF6B;EAGhC,GAAGC,kBAH6B;EAIhCC,YAAY;IAAEC,MAAM,CAACC,MAAD,EAASC,OAAT,EAAkBC,MAAlB,EAA0BC,MAA1B,CAAR;IAA2CC,SAAS;EAApD,CAJoB;EAKhCC,OAAO;IAAEN,MAAMC,MAAR;IAAgBI,SAAS;EAAzB,CALyB;EAMhCE,WAAW;IAAEP,MAAME,OAAR;IAAiBG,SAAS;EAA1B,CANqB;EAOhCG,WAAW;IAAER,MAAM,IAAR;IAA0CK,SAAS;EAAnD,CAPqB;EAQhCI,YAAY;IAAET,MAAM,IAAR;IAA0CK,SAAS;EAAnD,CARoB;EAShCK,eAAe;IAAEV,MAAME,OAAR;IAAiBG,SAAS;EAA1B,CATiB;EAUhCM,oBAAoB;IAAEX,MAAM,IAAR;IAA0CK,SAAS;EAAnD,CAVY;EAWhCO,UAAU;IAAEZ,MAAME,OAAR;IAAiBG,SAAS;EAA1B,CAXsB;EAYhCQ,UAAU;IAAEb,MAAME,OAAR;IAAiBG,SAAS;EAA1B;AAZsB,CAA3B;AAeA,MAAMS,qBAAqB,CAAC,GAAGC,kBAAJ,EAAwB,mBAAxB,EAA6C,OAA7C,EAAsD,MAAtD,CAA3B;;AAEP,MAAMC,kBAAmBC,KAAD,IAA4B;EAElD,MAAMC,SAAoB,CAACD,MAAMR,UAAP,EAAmBQ,MAAMT,SAAzB,CAA1B;;EAEA,IAAIS,MAAMP,aAAV,EAAyB;IAChBQ,YAAKD,MAAMN,kBAAX;EACT;;EAEA,MAAMQ,gBAAgB,IAAIC,GAAJ,CAAQF,MAAR,EAAgBG,IAAhB,KAAyBH,OAAOI,MAAtD;;EAEA,IAAIH,aAAJ,EAAmB;IACX,UAAII,KAAJ,CAAU,+GAAV;EACR;AACF,CAbA;;AAeO,MAAMC,gBAAgB,CAC3BP,KAD2B,EAE3BQ,IAF2B,EAG3B;EAAEC,KAAF;EAASpB,KAAT;EAAgBqB;AAAhB,CAH2B,KAIxB;EACHX,gBAAgBC,KAAhB;;EAGM,cAAQ,MAAMW,kBAAkB,MAAM;IAC1CH,KAAK,mBAAL,EAA0B,KAA1B;IACgBI;EACjB,CAHmB,CAAd;;EAKN,MAAMC,QAAQ,MAAM;;;IAClB,YAAMC,KAAN,wBAAaD,KAAb;EAAmB,CADrB;;EAIM;IACJE,aADI;IAEJC,qBAFI;IAGJC,QAHI;IAIJC,wBAJI;IAKJP,iBALI;IAMJC;EANI,IAOFO,cAAcnB,KAAd,EAAqBQ,IAArB,EAA2B;IAAEY,KAAF;IAASP;EAAT,CAA3B,CAPE;EAQN,MAAM;IAAEQ;EAAF,IAAoBC,YAAYtB,KAAZ,EAAmBQ,IAAnB,CAA1B;EACM;IAAEe;EAAF,IAAgBC,UAAhB;;EAEA,yBAAoBC,OAAD,IAAsC;IACtD,QAAC,CAACA,OAAF,IAAa,CAACpC,MAAMyB,KAAP,EAAcJ,UAAUI,KAAxB,EAA+BY,QAA/B,CAAwCD,OAAxC,CAAb;EAA4D,CAD/D;;EAGA,eAAUE,KAAD,IAAuB;IAC/B,UAAMb,KAAN,KAAgBa,MAAMC,MAAtB,IAAiC,CAACC,iBAAiBF,MAAMG,aAAvB,CAAlC,EAAwF;MAC3FP,UAAUT,KAAV,GAAkB,KAAlB;MACAC,cAAcD,KAAd,GAAsB,KAAtB;MACSG;MACTT,KAAK,MAAL,EAAamB,KAAb;IACF;EAAA,CANI;;EAQA,gBAAWA,KAAD,IAAuB;IACrCJ,UAAUT,KAAV,GAAkB,IAAlB;IACAN,KAAK,OAAL,EAAcmB,KAAd;EAAmB,CAFf;;EAKA,wBAAkBI,SAAS,MAAM/B,MAAMP,aAAN,IAAuB4B,cAAcP,KAAd,KAAwBd,MAAMN,kBAApE,CAAlB;EACA,qBAAeqC,SAAS,MAAM/B,MAAMlB,UAAN,KAAqB,MAArB,IAAkCkB,MAAMlB,UAAN,KAAqB,IAAtE,CAAf;EACA,kBAAYiD,SAAS,MAAM;;;IAC/B,IAAIC,aAAalB,KAAjB,EAAwB;MACtB,OAAQ,YAAMmB,UAAN,wBAAgCP,QAAhC,CAAyC1B,MAAMlB,UAA/C,CAAR;IACF;;IAEO,qBAAcgC,KAAd,KAAwBd,MAAMT,SAA9B;EACR,CANiB,CAAZ;;EAON,MAAM2C,kBAAkB,MAAM;IAC5B,IAAIlC,MAAMJ,QAAN,IAAkBI,MAAML,QAAxB,IAAoCK,MAAMmC,OAA9C,EAAuD;MACrD;IACF;;IAGA,IAAIH,aAAalB,KAAjB,EAAwB;MAClB,KAACd,MAAMiC,UAAP,EAAmB;QACrBzB,KAAK,mBAAL,EAA0B,CAACR,MAAMlB,UAAP,CAA1B;MAA4C,CAD1C,MAC0C,IACnC,CAACsD,MAAMC,OAAN,CAAcrC,MAAMiC,UAApB,CADkC,EACD;QAC3CzB,KAAK,mBAAL,EAA0BR,MAAMiC,UAAN,KAAqBjC,MAAMlB,UAA3B,GAAwC,EAAxC,GAA6C,CAACkB,MAAMiC,UAAP,EAAmBjC,MAAMlB,UAAzB,CAAvE;MAA2G,CAF/D,MAE+D,IAClGkB,MAAMiC,UAAN,CAAiBP,QAAjB,CAA0B1B,MAAMlB,UAAhC,CADkG,EACrD;QACjD0B,0BAAqBR,MAAMiC,UAAN,CAAiBK,MAAjB,CAAyBC,MAAD,IAAYA,WAAWvC,MAAMlB,UAArD,CAArB;MAAqF,CAFiB,MAGtG;QACL0B,KAAK,mBAAL,EAA0BR,MAAMiC,UAAN,CAAiBO,MAAjB,CAAwBxC,MAAMlB,UAA9B,CAA1B;MACF;;MACA;IACF;;IAEA,IAAIkB,MAAMP,aAAV,EAAyB;MACvB,IAAIgD,gBAAgB3B,KAApB,EAA2B;QACzBO,cAAcP,KAAd,GAAsBd,MAAMT,SAA5B;MAA4B,CAD9B,MAC8B,IACnBmD,UAAU5B,KADS,EACF;QAC1BO,cAAcP,KAAd,GAAsBd,MAAMR,UAA5B;MAA4B,CAFA,MAGvB;QAEL6B,cAAcP,KAAd,GAAsBd,MAAMN,kBAA5B;MACF;;MACA;IACF;;IAEA,IAAIgD,UAAU5B,KAAd,EAAqB;MACnBO,cAAcP,KAAd,GAAsBd,MAAMR,UAA5B;IAA4B,CAD9B,MAEO;MACL6B,cAAcP,KAAd,GAAsBd,MAAMT,SAA5B;IACF;EAAA,CAnCF;;EAsCO;IACLmD,SADK;IAELD,eAFK;IAGLE,MAHK;IAILC,OAJK;IAKLV,eALK;IAMLd,KANK;IAOLP,KAPK;IAQLE,aARK;IASLC,qBATK;IAULE;EAVK;AAYT,CAvGO","names":["useSelectableProps","useStatefulProps","useLoadingProps","useValidationProps","arrayValue","type","String","Boolean","Object","Number","default","label","leftLabel","trueValue","falseValue","indeterminate","indeterminateValue","disabled","readonly","useSelectableEmits","useValidationEmits","checkDuplicates","props","values","hasDuplicates","Set","size","length","Error","useSelectable","emit","input","container","withoutValidation","resetValidation","focus","value","computedError","computedErrorMessages","validate","validationAriaAttributes","useValidation","reset","valueComputed","useStateful","isFocused","useFocus","element","includes","event","target","isElementRelated","relatedTarget","computed","modelIsArray","modelValue","toggleSelection","loading","Array","isArray","filter","option","concat","isIndeterminate","isChecked","onBlur","onFocus"],"sources":["../../../../src/composables/useSelectable.ts"],"sourcesContent":["import { PropType, computed, SetupContext, ShallowRef, ExtractPropTypes } from 'vue'\n\nimport { useStateful, useStatefulProps, StatefulProps } from './useStateful'\nimport { useLoadingProps, LoadingProps } from './useLoading'\nimport { useValidation, useValidationProps, ValidationProps, useValidationEmits } from './useValidation'\nimport { useFocus } from './useFocus'\n\nexport type SelectableProps<V = any> = StatefulProps & LoadingProps & ExtractPropTypes<ValidationProps<V>> & {\n  arrayValue: V | undefined,\n  label: string,\n  leftLabel: boolean,\n  trueValue: boolean,\n  falseValue: boolean,\n  indeterminate: boolean,\n  indeterminateValue: V | null,\n  disabled: boolean,\n  readonly: boolean,\n}\n\nexport type Elements = {\n  input: ShallowRef<HTMLElement | undefined>,\n  label: ShallowRef<HTMLElement | undefined>,\n  container: ShallowRef<HTMLElement | undefined>,\n}\n\nexport const useSelectableProps = {\n  ...useStatefulProps,\n  ...useLoadingProps,\n  ...useValidationProps,\n  arrayValue: { type: [String, Boolean, Object, Number], default: undefined },\n  label: { type: String, default: '' },\n  leftLabel: { type: Boolean, default: false },\n  trueValue: { type: null as any as PropType<unknown>, default: true },\n  falseValue: { type: null as any as PropType<unknown>, default: false },\n  indeterminate: { type: Boolean, default: false },\n  indeterminateValue: { type: null as any as PropType<unknown>, default: null },\n  disabled: { type: Boolean, default: false },\n  readonly: { type: Boolean, default: false },\n}\n\nexport const useSelectableEmits = [...useValidationEmits, 'update:modelValue', 'focus', 'blur']\n\nconst checkDuplicates = (props: SelectableProps) => {\n  // Just validating state values.\n  const values: unknown[] = [props.falseValue, props.trueValue]\n\n  if (props.indeterminate) {\n    values.push(props.indeterminateValue)\n  }\n\n  const hasDuplicates = new Set(values).size !== values.length\n\n  if (hasDuplicates) {\n    throw new Error('falseValue, trueValue, indeterminateValue props should have strictly different values, which is not the case.')\n  }\n}\n\nexport const useSelectable = (\n  props: SelectableProps,\n  emit: SetupContext['emit'],\n  { input, label, container }: Elements,\n) => {\n  checkDuplicates(props)\n\n  /** @public */\n  const reset = () => withoutValidation(() => {\n    emit('update:modelValue', false)\n    resetValidation()\n  })\n\n  const focus = () => {\n    input.value?.focus()\n  }\n\n  const {\n    computedError,\n    computedErrorMessages,\n    validate,\n    validationAriaAttributes,\n    withoutValidation,\n    resetValidation,\n  } = useValidation(props, emit, { reset, focus })\n  const { valueComputed } = useStateful(props, emit)\n  const { isFocused } = useFocus()\n\n  const isElementRelated = (element: HTMLElement | undefined) => {\n    return !!element && [label.value, container.value].includes(element)\n  }\n  const onBlur = (event: FocusEvent) => {\n    if ((input.value === event.target) && !isElementRelated(event.relatedTarget as HTMLElement)) {\n      isFocused.value = false\n      computedError.value = false\n      validate()\n      emit('blur', event)\n    }\n  }\n  const onFocus = (event: FocusEvent) => {\n    isFocused.value = true\n    emit('focus', event)\n  }\n\n  const isIndeterminate = computed(() => props.indeterminate && valueComputed.value === props.indeterminateValue)\n  const modelIsArray = computed(() => props.arrayValue !== undefined && props.arrayValue !== null)\n  const isChecked = computed(() => {\n    if (modelIsArray.value) {\n      return (props.modelValue as unknown[])?.includes(props.arrayValue)\n    }\n\n    return valueComputed.value === props.trueValue\n  })\n  const toggleSelection = () => {\n    if (props.readonly || props.disabled || props.loading) {\n      return\n    }\n\n    // For array access we pretend computedValue does not exist and use modelValue + emit input directly.\n    if (modelIsArray.value) {\n      if (!props.modelValue) {\n        emit('update:modelValue', [props.arrayValue])\n      } else if (!Array.isArray(props.modelValue)) {\n        emit('update:modelValue', props.modelValue === props.arrayValue ? [] : [props.modelValue, props.arrayValue])\n      } else if (props.modelValue.includes(props.arrayValue)) {\n        emit('update:modelValue', props.modelValue.filter((option) => option !== props.arrayValue))\n      } else {\n        emit('update:modelValue', props.modelValue.concat(props.arrayValue))\n      }\n      return\n    }\n\n    if (props.indeterminate) {\n      if (isIndeterminate.value) {\n        valueComputed.value = props.trueValue\n      } else if (isChecked.value) {\n        valueComputed.value = props.falseValue\n      } else {\n        // unchecked\n        valueComputed.value = props.indeterminateValue\n      }\n      return\n    }\n\n    if (isChecked.value) {\n      valueComputed.value = props.falseValue\n    } else {\n      valueComputed.value = props.trueValue\n    }\n  }\n\n  return {\n    isChecked,\n    isIndeterminate,\n    onBlur,\n    onFocus,\n    toggleSelection,\n    reset,\n    focus,\n    computedError,\n    computedErrorMessages,\n    validationAriaAttributes,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}