{"ast":null,"code":"const useMaxSelectionsProps = {\n  maxSelections: {\n    type: [Number, String],\n    default: void 0\n  }\n};\n\nfunction useMaxSelections(selections, maxSelections) {\n  const exceedsMaxSelections = () => {\n    if (maxSelections.value === void 0 || isNaN(+maxSelections.value)) {\n      return false;\n    }\n\n    return selections.value.length >= maxSelections.value;\n  };\n\n  const addOption = optionToAdd => {\n    return [...selections.value, optionToAdd];\n  };\n\n  return {\n    exceedsMaxSelections,\n    addOption\n  };\n}\n\nexport { useMaxSelections as a, useMaxSelectionsProps as u };","map":{"version":3,"mappings":"AAQO,MAAMA,wBAAwB;EACnCC,eAAe;IACbC,MAAM,CAACC,MAAD,EAASC,MAAT,CADO;IAEbC,SAAS;EAFI;AADoB,CAA9B;;AAOA,0BACLC,UADK,EAELL,aAFK,EAGL;EACA,MAAMM,uBAAuB,MAAe;IAC1C,IAAIN,cAAcO,KAAd,KAAwB,MAAxB,IAAqCC,MAAM,CAACR,cAAcO,KAArB,CAAzC,EAAsE;MAAS;IAAM;;IAC9E,kBAAWA,KAAX,CAAiBE,MAAjB,IAA2BT,cAAcO,KAAzC;EAAyC,CAFlD;;EAKM,kBAAgBG,WAAJ,IAAuB;IACvC,OAAO,CAAC,GAAGL,WAAWE,KAAf,EAAsBG,WAAtB,CAAP;EAAwC,CADpC;;EAIC;IACLJ,oBADK;IAELK;EAFK;AAIT","names":["useMaxSelectionsProps","maxSelections","type","Number","String","default","selections","exceedsMaxSelections","value","isNaN","length","optionToAdd","addOption"],"sources":["../../../../src/composables/useMaxSelections.ts"],"sourcesContent":["import { Ref } from 'vue'\n\n/**\n * You could add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useMaxSelectionsProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\n */\nexport const useMaxSelectionsProps = {\n  maxSelections: {\n    type: [Number, String],\n    default: undefined,\n  },\n}\n\nexport function useMaxSelections (\n  selections: Ref<any[]>,\n  maxSelections: Ref<number | string | undefined>,\n) {\n  const exceedsMaxSelections = (): boolean => {\n    if (maxSelections.value === undefined || isNaN(+maxSelections.value)) { return false }\n    return selections.value.length >= maxSelections.value\n  }\n\n  const addOption = <T>(optionToAdd: T) => {\n    return [...selections.value, optionToAdd]\n  }\n\n  return {\n    exceedsMaxSelections,\n    addOption,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}