{"ast":null,"code":"import { r as regexGroupsValues } from \"./regex.js\";\nconst dynamicSegmentRegex = /{[^}]*}/g;\n\nconst dynamicSegmentStringToRegex = template => {\n  return template.replace(dynamicSegmentRegex, \"(.*)\");\n};\n\nconst dynamicSegmentsNames = template => {\n  return (template.match(dynamicSegmentRegex) || []).map(g => g.replace(/{|}/g, \"\"));\n};\n\nconst dynamicSegmentsValues = (str, template) => {\n  return regexGroupsValues(str, dynamicSegmentStringToRegex(template));\n};\n\nconst dynamicSegments = (str, template) => {\n  const params = dynamicSegmentsNames(template);\n  const values = dynamicSegmentsValues(str, template);\n  return params.reduce((acc, paramValue, i) => ({ ...acc,\n    [paramValue]: values[i]\n  }), {});\n};\n\nconst strictMatch = (str, regex) => {\n  return (str.match(regex) || [])[0] === str;\n};\n\nconst isMatchDynamicSegments = (str, template) => {\n  const templateRegex = dynamicSegmentStringToRegex(template);\n  return strictMatch(str, new RegExp(templateRegex));\n};\n\nexport { dynamicSegments as d, isMatchDynamicSegments as i };","map":{"version":3,"mappings":";AAEA,MAAMA,sBAAsB,UAA5B;;AAUA,MAAMC,8BAA+BC,QAAD,IAAsB;EACjD,gBAASC,OAAT,CAAiBH,mBAAjB,EAAsC,MAAtC;AACT,CAFA;;AAWA,MAAMI,uBAAwBF,QAAD,IAAsB;EACjD,OAAiB,gBAAMF,mBAAN,KAA8B,EAA9B,EACdK,GADc,CACTC,CAAD,IAAOA,EAAEH,OAAF,CAAU,MAAV,EAAkB,EAAlB,CADG,CAAjB;AAEF,CAHA;;AAYA,MAAMI,wBAAwB,CAACC,GAAD,EAAcN,QAAd,KAAmC;EAC/D,OAAOO,kBAAkBD,GAAlB,EAAuBP,4BAA4BC,QAA5B,CAAvB,CAAP;AACF,CAFA;;AAaa,wBAAkB,CAACM,GAAD,EAAcN,QAAd,KAAmC;EAC1D,eAASE,qBAAqBF,QAArB,CAAT;EACA,eAASK,sBAAsBC,GAAtB,EAA2BN,QAA3B,CAAT;EAEN,OAAOQ,OAAOC,MAAP,CAAc,CAACC,GAAD,EAAMC,UAAN,EAAkBC,CAAlB,MAAyB,EAAE,GAAGF,GAAL;IAAU,CAACC,UAAD,GAAcE,OAAOD,CAAP;EAAxB,CAAzB,CAAd,EAA6E,EAA7E,CAAP;AACF,CALa;;AAeb,MAAME,cAAc,CAACR,GAAD,EAAcS,KAAd,KAAgC;EAClD,YAAYC,KAAZ,CAAkBD,KAAlB,KAA4B,EAA5B,EAAgC,CAAhC,MAAuCT,GAAvC;AACF,CAFA;;AAaa,+BAAyB,CAACA,GAAD,EAAcN,QAAd,KAAmC;EACjE,sBAAgBD,4BAA4BC,QAA5B,CAAhB;EACN,OAAOc,YAAYR,GAAZ,EAAiB,IAAIW,MAAJ,CAAWC,aAAX,CAAjB,CAAP;AACF,CAHa","names":["dynamicSegmentRegex","dynamicSegmentStringToRegex","template","replace","dynamicSegmentsNames","map","g","dynamicSegmentsValues","str","regexGroupsValues","params","reduce","acc","paramValue","i","values","strictMatch","regex","match","RegExp","templateRegex"],"sources":["../../../../../../src/services/icon/utils/dynamic-segment.ts"],"sourcesContent":["import { regexGroupsValues } from './regex'\n\nconst dynamicSegmentRegex = /{[^}]*}/g // match {any-thing}, {even with space}\n\n/**\n * Replace {anything} to regex (.*) group\n * @example\n * ```\n * \"fa-{code}\" -> \"fa-(.*)\"\n * \"fa-{code}-{suffix}\" -> \"fa-(.*)-(.*)\"\n * ```\n */\nconst dynamicSegmentStringToRegex = (template: string) => {\n  return template.replace(dynamicSegmentRegex, '(.*)')\n}\n\n/**\n Returns content from string in {}\n @example\n ```\n \"fa-{code}-{suffix}\" -> ['code', 'suffix']\n ```\n */\nconst dynamicSegmentsNames = (template: string) => {\n  return (template.match(dynamicSegmentRegex) || []) // 'fa-{code}-{suffix}' -> ['{code}', '{suffix}']\n    .map((g) => g.replace(/{|}/g, '')) // ['{code}', '{suffix}'] -> ['code', 'suffix']\n}\n\n/**\n * Transform template to regex and returns regex group values\n * @example\n * ```\n * \"fa-clock-o\", \"fa-{code}-{suffix}\" -> [\"clock\", \"o\"]\n * ```\n */\nconst dynamicSegmentsValues = (str: string, template: string) => {\n  return regexGroupsValues(str, dynamicSegmentStringToRegex(template))\n}\n\n/**\n * Returns object with param name from template and match value from str\n * @example\n * ```\n * \"fa-phone\", \"fa-{icon code}\" -> { 'icon code': 'phone' }\n * \"fa4 clock-o\", \"fa4 {icon-code}-{suffix}\" -> { 'icon-code': 'clock', 'suffix': 'o' }\n * \"fa4 clock-o\", \"fa4 {icon-code}\" -> { 'icon-code': 'clock-o' }\n * ```\n */\nexport const dynamicSegments = (str: string, template: string) => {\n  const params = dynamicSegmentsNames(template)\n  const values = dynamicSegmentsValues(str, template)\n\n  return params.reduce((acc, paramValue, i) => ({ ...acc, [paramValue]: values[i] }), {})\n}\n\n/**\n * Returns true if match string equals to input `str`\n * @example\n * ```\n * \"vuestic-home-open\", /vuestic-(.*)-o/ -> false\n * \"vuestic-home-open\", /vuestic-(.*)-open/ -> true\n * ```\n */\nconst strictMatch = (str: string, regex: RegExp) => {\n  return (str.match(regex) || [])[0] === str\n}\n\n/**\n * Returns true if str match template\n * @example\n *  ```\n * \"fa-phone\", \"fa-{icon code}\" -> true\n * \"fa4 clock-o\", \"fa4 {icon-code}-{suffix}\" -> true\n * \"fa4 clock-o\", \"fa4 {icon-code}\" -> false\n * ```\n */\nexport const isMatchDynamicSegments = (str: string, template: string) => {\n  const templateRegex = dynamicSegmentStringToRegex(template)\n  return strictMatch(str, new RegExp(templateRegex))\n}\n"]},"metadata":{},"sourceType":"module"}