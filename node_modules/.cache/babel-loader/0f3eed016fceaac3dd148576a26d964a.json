{"ast":null,"code":"import { defineComponent, shallowRef, toRefs, computed, onMounted, watch, resolveComponent, openBlock, createElementBlock, mergeProps, withKeys, withModifiers, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString } from \"vue\";\nimport { c as createYearDate } from \"../../utils/date-utils.js\";\nimport { u as useGridKeyboardNavigation } from \"../../hooks/grid-keyboard-navigation.js\";\nimport { u as useDatePicker } from \"../../hooks/use-picker.js\";\nimport { V as VaDatePickerCell } from \"../VaDatePickerCell.js\";\nimport { _ as _export_sfc } from \"../../../../../plugin-vue_export-helper.js\";\n\nvar VaYearPicker_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \".va-year-picker{display:flex;flex-direction:column;overflow:auto;grid-gap:var(--va-date-picker-cell-gap);max-height:100%;position:relative}\\n\")();\n\nconst _sfc_main = defineComponent({\n  name: \"VaYearPicker\",\n  components: {\n    VaDatePickerCell\n  },\n  props: {\n    modelValue: {\n      type: [Date, Array, Object]\n    },\n    allowedYears: {\n      type: Function,\n      default: void 0\n    },\n    highlightToday: {\n      type: Boolean,\n      default: true\n    },\n    startYear: {\n      type: Number,\n      default: 1970\n    },\n    mode: {\n      type: String,\n      default: \"auto\"\n    },\n    view: {\n      type: Object,\n      default: () => ({\n        type: \"year\"\n      })\n    },\n    endYear: {\n      type: Number,\n      default: () => new Date().getFullYear() + 50\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    }\n  },\n  emits: [\"update:modelValue\", \"hover:year\", \"click:year\"],\n\n  setup(props, {\n    emit\n  }) {\n    const rootNode = shallowRef();\n    const {\n      view\n    } = toRefs(props);\n\n    const generateYearsArray = (start, end) => {\n      const yearsCount = end - start + 1;\n      return Array.from(Array(yearsCount).keys()).map(i => createYearDate(start + i));\n    };\n\n    const years = computed(() => generateYearsArray(props.startYear, props.endYear));\n\n    const scrollIntoYearIndex = index => {\n      if (!rootNode.value) {\n        return;\n      }\n\n      const scrollHeight = rootNode.value.scrollHeight;\n      const rootNodeHeight = rootNode.value.offsetHeight;\n      const currentYearOffset = scrollHeight / years.value.length * index;\n      const cellSize = scrollHeight / years.value.length;\n      const relativeScrollPosition = currentYearOffset - rootNode.value.scrollTop;\n\n      if (relativeScrollPosition < 0) {\n        rootNode.value.scrollTo({\n          top: currentYearOffset\n        });\n      } else if (relativeScrollPosition > rootNodeHeight) {\n        rootNode.value.scrollTo({\n          top: currentYearOffset - rootNodeHeight + cellSize\n        });\n      }\n    };\n\n    const scrollIntoYearIndexCenter = index => {\n      if (!rootNode.value) {\n        return;\n      }\n\n      const scrollHeight = rootNode.value.scrollHeight;\n      const rootNodeHeight = rootNode.value.offsetHeight;\n      const currentYearOffset = scrollHeight / years.value.length * index;\n      rootNode.value.scrollTo({\n        top: currentYearOffset - rootNodeHeight / 2\n      });\n    };\n\n    onMounted(() => {\n      const currentYearIndex = years.value.findIndex(date => date.getFullYear() === view.value.year);\n      scrollIntoYearIndexCenter(currentYearIndex);\n    });\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange\n    } = useDatePicker(\"year\", years, props, emit);\n\n    const isYearDisabled = year => props.allowedYears === void 0 ? false : !props.allowedYears(year);\n\n    const {\n      focusedCellIndex,\n      containerAttributes\n    } = useGridKeyboardNavigation({\n      rowSize: 1,\n      start: 0,\n      end: years.value.length,\n      onFocusIndex: computed(() => years.value.findIndex(date => date.getFullYear() === view.value.year)),\n      onSelected: selectedIndex => onClick(years.value[selectedIndex])\n    });\n    watch(focusedCellIndex, index => index !== -1 && scrollIntoYearIndex(index));\n    watch(focusedCellIndex, index => {\n      hoveredIndex.value = index;\n    });\n    watch(hoveredIndex, index => {\n      focusedCellIndex.value = index;\n    });\n    return {\n      hoveredIndex,\n      years,\n      rootNode,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isYearDisabled,\n      focusedCellIndex,\n      containerAttributes\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_date_picker_cell = resolveComponent(\"va-date-picker-cell\");\n\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    ref: \"rootNode\",\n    class: \"va-year-picker\"\n  }, _ctx.containerAttributes, {\n    onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers(() => {}, [\"prevent\"]), [\"space\"]))\n  }), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.years, (year, index) => {\n    return openBlock(), createBlock(_component_va_date_picker_cell, {\n      key: year.toString(),\n      \"in-range\": _ctx.isInRange(year),\n      selected: _ctx.isSelected(year),\n      disabled: _ctx.isYearDisabled(year),\n      today: _ctx.isToday(year),\n      focused: _ctx.focusedCellIndex === index,\n      \"highlight-today\": _ctx.highlightToday,\n      readonly: _ctx.$props.readonly,\n      color: _ctx.color,\n      onClick: $event => {\n        _ctx.onClick(year);\n\n        _ctx.focusedCellIndex = index;\n      },\n      onMouseenter: $event => _ctx.hoveredIndex = index,\n      onMouseleave: _cache[0] || (_cache[0] = $event => _ctx.hoveredIndex = -1)\n    }, {\n      default: withCtx(() => [createTextVNode(toDisplayString(year.getFullYear()), 1)]),\n      _: 2\n    }, 1032, [\"in-range\", \"selected\", \"disabled\", \"today\", \"focused\", \"highlight-today\", \"readonly\", \"color\", \"onClick\", \"onMouseenter\"]);\n  }), 128))], 16);\n}\n\nvar VaYearPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { VaYearPicker as V };\nimport './VaYearPicker.css';","map":{"version":3,"mappings":";;;;;;;;;AAsCA,MAAKA,YAAaC,gBAAa;EAC7BC,MAAM,cADuB;EAE7BC,YAAY;IAAEC;EAAF,CAFiB;EAI7BC,OAAO;IACLC,YAAY;MAAEC,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAcC,MAAd;IAAR,CADP;IAELC,cAAc;MAAEJ,MAAMK,QAAR;MAAuDC,SAAS;IAAhE,CAFT;IAGLC,gBAAgB;MAAEP,MAAMQ,OAAR;MAAiBF,SAAS;IAA1B,CAHX;IAILG,WAAW;MAAET,MAAMU,MAAR;MAAgBJ,SAAS;IAAzB,CAJN;IAKLK,MAAM;MAAEX,MAAMY,MAAR;MAA4CN,SAAS;IAArD,CALD;IAMLO,MAAM;MAAEb,MAAMG,MAAR;MAA4CG,SAAS,OAAO;QAAEN,MAAM;MAAR,CAAP;IAArD,CAND;IAOLc,SAAS;MAAEd,MAAMU,MAAR;MAAgBJ,SAAS,MAAM,IAAIL,IAAJ,GAAWc,WAAX,KAA2B;IAA1D,CAPJ;IAQLC,UAAU;MAAEhB,MAAMQ,OAAR;MAAiBF,SAAS;IAA1B,CARL;IASLW,OAAO;MAAEjB,MAAMY,MAAR;MAAgBN,SAAS;IAAzB;EATF,CAJsB;EAgB7BY,OAAO,CAAC,mBAAD,EAAsB,YAAtB,EAAoC,YAApC,CAhBsB;;EAkB7BC,MAAOrB,KAAP,EAAc;IAAEsB;EAAF,CAAd,EAAwB;IACtB,MAAMC,WAAWC,YAAjB;IAEM;MAAET;IAAF,IAAWU,OAAOzB,KAAP,CAAX;;IAEA,2BAAqB,CAAC0B,KAAD,EAAgBC,GAAhB,KAAgC;MACnD,mBAAaA,MAAMD,KAAN,GAAc,CAA3B;MACN,OAAOtB,MAAMwB,IAAN,CAAWxB,MAAMyB,UAAN,EAAkBC,IAAlB,EAAX,EACJC,GADI,CACCC,CAAD,IAAOC,eAAeP,QAAQM,CAAvB,CADP,CAAP;IACuC,CAHnC;;IAMA,cAAQE,SAAS,MAAMC,mBAAmBnC,MAAMW,SAAzB,EAAoCX,MAAMgB,OAA1C,CAAf,CAAR;;IAEA,4BAAuBoB,KAAD,IAAmB;MACzC,KAACb,SAASc,KAAV,EAAiB;QAAE;MAAO;;MAExB,qBAAed,SAASc,KAAT,CAAeC,YAA9B;MACA,uBAAiBf,SAASc,KAAT,CAAeE,YAAhC;MACN,MAAMC,oBAAoBF,eAAeG,MAAMJ,KAAN,CAAYK,MAA3B,GAAoCN,KAA9D;MACM,iBAAWE,eAAeG,MAAMJ,KAAN,CAAYK,MAAtC;MACA,+BAAyBF,oBAAoBjB,SAASc,KAAT,CAAeM,SAA5D;;MAEN,IAAIC,yBAAyB,CAA7B,EAAgC;QAE9BrB,SAASc,KAAT,CAAeQ,QAAf,CAAwB;UAAEC,KAAKN;QAAP,CAAxB;MAAkD,CAFpD,MAEoD,IACzCI,yBAAyBG,cADgB,EACA;QAElDxB,SAASc,KAAT,CAAeQ,QAAf,CAAwB;UAAEC,KAAKN,oBAAoBO,cAApB,GAAqCC;QAA5C,CAAxB;MACF;IAAA,CAfI;;IAkBA,kCAA6BZ,KAAD,IAAmB;MAC/C,KAACb,SAASc,KAAV,EAAiB;QAAE;MAAO;;MAExB,qBAAed,SAASc,KAAT,CAAeC,YAA9B;MACA,uBAAiBf,SAASc,KAAT,CAAeE,YAAhC;MACN,MAAMC,oBAAoBF,eAAeG,MAAMJ,KAAN,CAAYK,MAA3B,GAAoCN,KAA9D;MAEAb,SAASc,KAAT,CAAeQ,QAAf,CAAwB;QAAEC,KAAKN,oBAAoBO,iBAAiB;MAA5C,CAAxB;IAAuE,CAPnE;;IAUNE,UAAU,MAAM;MACR,yBAAmBR,MAAMJ,KAAN,CAAYa,SAAZ,CAAuBC,IAAD,IAAUA,KAAKlC,WAAL,OAAuBF,KAAKsB,KAAL,CAAWe,IAAlE,CAAnB;MAENC,0BAA0BC,gBAA1B;IACD,CAJD;IAMM;MACJC,YADI;MAEJC,OAFI;MAGJC,OAHI;MAIJC,UAJI;MAKJC;IALI,IAMFC,cAAc,MAAd,EAAsBnB,KAAtB,EAA6BzC,KAA7B,EAAoCsB,IAApC,CANE;;IAQA,uBAAkB8B,IAAD,IAAgBpD,MAAMM,YAAN,KAAuB,MAAvB,GAAmC,KAAnC,GAA2C,CAACN,MAAMM,YAAN,CAAmB8C,IAAnB,CAA7E;;IAEA;MACJS,gBADI;MACcC;IADd,IAEFC,0BAA0B;MAC5BC,SAAS,CADmB;MAE5BtC,OAAO,CAFqB;MAG5BC,KAAKc,MAAMJ,KAAN,CAAYK,MAHW;MAI5BuB,cAAc/B,SAAS,MAAMO,MAAMJ,KAAN,CAAYa,SAAZ,CAAuBC,IAAD,IAAUA,KAAKlC,WAAL,OAAuBF,KAAKsB,KAAL,CAAWe,IAAlE,CAAf,CAJc;MAK5Bc,YAAaC,aAAD,IAAmBX,QAAQf,MAAMJ,KAAN,CAAY8B,aAAZ,CAAR;IALH,CAA1B,CAFE;IAUNC,MAAMP,gBAAN,EAAyBzB,KAAD,IAAWA,UAAU,EAAV,IAAgBiC,oBAAoBjC,KAApB,CAAnD;IACMgC,wBAAmBhC,KAAD,IAAW;MAAEmB,aAAalB,KAAb,GAAqBD,KAArB;IAA4B,CAA3D;IACAgC,oBAAehC,KAAD,IAAW;MAAEyB,iBAAiBxB,KAAjB,GAAyBD,KAAzB;IAAgC,CAA3D;IAEC;MACLmB,YADK;MAELd,KAFK;MAGLlB,QAHK;MAILiC,OAJK;MAKLC,OALK;MAMLC,UANK;MAOLC,SAPK;MAQLW,cARK;MASLT,gBATK;MAULC;IAVK;EAYT;;AArG6B,CAAb,CAAlB;;;;;EArCE,uCAuBM,KAvBNS,aAuBM;IAtBJC,KAAI,UAsBA;IArBJC,OAAM;EAqBF,CAvBNC,EAGUC,KAAmBb,mBAH7BY,EAG6B;IAC1BE,WAAOC,OAAR,CAAQ,MAARA,0CAAsB,CAAtBC,EAAsB,WAAtBA,GAAsB,SAAtBC,CAAQ;EADmB,CAH7BL,GAIwB,EAEtBM,oCAgBsBC,QAhBtBV,EAC0B,IAD1BA,EAC0BW,uBAAK,CAArB9B,IAAqB,EAAfhB,KAAe,KAAV;wBADrB+C,YAgBsBC,8BAhBtBD,EAgBsB;MAdnBE,KAAKjC,KAAKkC,QAAL,EAcc;MAbnB,YAAUX,eAAUvB,IAAV,CAaS;MAZnBmC,UAAUZ,gBAAWvB,IAAX,CAYS;MAXnBoC,UAAUb,oBAAevB,IAAf,CAWS;MAVnBqC,OAAOd,aAAQvB,IAAR,CAUY;MATnBsC,SAASf,KAAqBd,gBAArB,KAAqBzB,KASX;MARnB,mBAAiBuC,mBAQE;MAPnBzD,UAAUyD,KAAOgB,MAAP,CAAOzE,QAOE;MANnBC,OAAOwD,UAMY;MALnBnB,SAAKoC;QAAEjB,aAAQvB,IAAR;;QAAkCuB;MAAK,CAK3B;MAJnBkB,cAAUD,UAAEjB,KAAepB,YAAf,GAAenB,KAIR;MAHnB0D,cAAUjB,oCAAEF,KAAYpB,YAAZ,GAAY,EAAd;IAGS,CAhBtB4B,EAa2B;MAAA3E,iBAEzB,MAAwB,iCAArB4C,KAAKnC,WAAL,EAAqB8E,GAAL,CAAKC,EAFC;MAENC;IAFM,CAb3Bd;GAC0BD,CAD1BX,MAFsB,EAJxBA","names":["_sfc_main","defineComponent","name","components","VaDatePickerCell","props","modelValue","type","Date","Array","Object","allowedYears","Function","default","highlightToday","Boolean","startYear","Number","mode","String","view","endYear","getFullYear","readonly","color","emits","setup","emit","rootNode","shallowRef","toRefs","start","end","from","yearsCount","keys","map","i","createYearDate","computed","generateYearsArray","index","value","scrollHeight","offsetHeight","currentYearOffset","years","length","scrollTop","relativeScrollPosition","scrollTo","top","rootNodeHeight","cellSize","onMounted","findIndex","date","year","scrollIntoYearIndexCenter","currentYearIndex","hoveredIndex","onClick","isToday","isSelected","isInRange","useDatePicker","focusedCellIndex","containerAttributes","useGridKeyboardNavigation","rowSize","onFocusIndex","onSelected","selectedIndex","watch","scrollIntoYearIndex","isYearDisabled","_createElementBlock","ref","class","_mergeProps","_ctx","onKeydown","_cache","_withModifiers","_withKeys","_openBlock","_Fragment","_renderList","_createBlock","_component_va_date_picker_cell","key","toString","selected","disabled","today","focused","$props","$event","onMouseenter","onMouseleave","_toDisplayString","_createTextVNode","_"],"sources":["../../../../../../../src/components/va-date-picker/components/VaYearPicker/VaYearPicker.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"rootNode\"\n    class=\"va-year-picker\"\n    v-bind=\"containerAttributes\"\n    @keydown.space.prevent\n  >\n    <va-date-picker-cell\n      v-for=\"(year, index) in years\"\n      :key=\"year.toString()\"\n      :in-range=\"isInRange(year)\"\n      :selected=\"isSelected(year)\"\n      :disabled=\"isYearDisabled(year)\"\n      :today=\"isToday(year)\"\n      :focused=\"focusedCellIndex === index\"\n      :highlight-today=\"highlightToday\"\n      :readonly=\"$props.readonly\"\n      :color=\"color\"\n      @click=\"onClick(year); focusedCellIndex = index\"\n      @mouseenter=\"hoveredIndex = index\"\n      @mouseleave=\"hoveredIndex = -1\"\n    >\n      {{ year.getFullYear() }}\n    </va-date-picker-cell>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, toRefs, onMounted, computed, watch, shallowRef } from 'vue'\n\nimport { createYearDate } from '../../utils/date-utils'\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\nimport { useDatePicker } from '../../hooks/use-picker'\n\nimport { DatePickerMode, DatePickerModelValue, DatePickerView } from '../../types'\n\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\n\nexport default defineComponent({\n  name: 'VaYearPicker',\n  components: { VaDatePickerCell },\n\n  props: {\n    modelValue: { type: [Date, Array, Object] as PropType<DatePickerModelValue> },\n    allowedYears: { type: Function as PropType<(date: Date) => boolean>, default: undefined },\n    highlightToday: { type: Boolean, default: true },\n    startYear: { type: Number, default: 1970 },\n    mode: { type: String as PropType<DatePickerMode>, default: 'auto' },\n    view: { type: Object as PropType<DatePickerView>, default: () => ({ type: 'year' }) },\n    endYear: { type: Number, default: () => new Date().getFullYear() + 50 },\n    readonly: { type: Boolean, default: false },\n    color: { type: String, default: 'primary' },\n  },\n\n  emits: ['update:modelValue', 'hover:year', 'click:year'],\n\n  setup (props, { emit }) {\n    const rootNode = shallowRef<HTMLElement>()\n\n    const { view } = toRefs(props)\n\n    const generateYearsArray = (start: number, end: number) => {\n      const yearsCount = end - start + 1\n      return Array.from(Array(yearsCount).keys())\n        .map((i) => createYearDate(start + i))\n    }\n\n    const years = computed(() => generateYearsArray(props.startYear, props.endYear))\n\n    const scrollIntoYearIndex = (index: number) => {\n      if (!rootNode.value) { return }\n\n      const scrollHeight = rootNode.value.scrollHeight\n      const rootNodeHeight = rootNode.value.offsetHeight\n      const currentYearOffset = scrollHeight / years.value.length * index\n      const cellSize = scrollHeight / years.value.length\n      const relativeScrollPosition = currentYearOffset - rootNode.value.scrollTop\n\n      if (relativeScrollPosition < 0) {\n        // First element in view\n        rootNode.value.scrollTo({ top: currentYearOffset })\n      } else if (relativeScrollPosition > rootNodeHeight) {\n        // Last element in view\n        rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight + cellSize })\n      }\n    }\n\n    const scrollIntoYearIndexCenter = (index: number) => {\n      if (!rootNode.value) { return }\n\n      const scrollHeight = rootNode.value.scrollHeight\n      const rootNodeHeight = rootNode.value.offsetHeight\n      const currentYearOffset = scrollHeight / years.value.length * index\n\n      rootNode.value.scrollTo({ top: currentYearOffset - rootNodeHeight / 2 })\n    }\n\n    onMounted(() => {\n      const currentYearIndex = years.value.findIndex((date) => date.getFullYear() === view.value.year)\n\n      scrollIntoYearIndexCenter(currentYearIndex)\n    })\n\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n    } = useDatePicker('year', years, props, emit)\n\n    const isYearDisabled = (year: Date) => props.allowedYears === undefined ? false : !props.allowedYears(year)\n\n    const {\n      focusedCellIndex, containerAttributes,\n    } = useGridKeyboardNavigation({\n      rowSize: 1,\n      start: 0,\n      end: years.value.length,\n      onFocusIndex: computed(() => years.value.findIndex((date) => date.getFullYear() === view.value.year)),\n      onSelected: (selectedIndex) => onClick(years.value[selectedIndex]),\n    })\n\n    watch(focusedCellIndex, (index) => index !== -1 && scrollIntoYearIndex(index))\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\n\n    return {\n      hoveredIndex,\n      years,\n      rootNode,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isYearDisabled,\n      focusedCellIndex,\n      containerAttributes,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-year-picker {\n  display: flex;\n  flex-direction: column;\n  overflow: auto;\n  grid-gap: var(--va-date-picker-cell-gap);\n  max-height: 100%;\n  position: relative;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}