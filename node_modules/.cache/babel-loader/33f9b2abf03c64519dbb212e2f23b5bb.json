{"ast":null,"code":"import { computed, shallowRef, onMounted } from \"vue\";\nimport { u as useHTMLElement } from \"./useHTMLElement.js\";\nimport { u as useCaptureEvent } from \"./useCaptureEvent.js\";\nimport { u as useCurrentElement } from \"./useCurrentElement.js\";\n\nconst useActiveElement = () => {\n  const activeEl = shallowRef();\n\n  const updateActiveElement = () => {\n    activeEl.value = document.activeElement;\n  };\n\n  onMounted(updateActiveElement);\n  useCaptureEvent(\"focus\", updateActiveElement);\n  useCaptureEvent(\"blur\", updateActiveElement);\n  return activeEl;\n};\n\nconst useFocusDeep = el => {\n  const focused = useActiveElement();\n  const current = useCurrentElement(el ? useHTMLElement(el) : void 0);\n  let previouslyFocusedElement = null;\n  return computed({\n    get() {\n      var _a;\n\n      if (!focused.value) {\n        return false;\n      }\n\n      if (focused.value === current.value) {\n        return true;\n      }\n\n      const isFocused = (_a = current.value) == null ? void 0 : _a.contains(focused.value);\n\n      if (isFocused) {\n        previouslyFocusedElement = focused.value;\n      }\n\n      return isFocused;\n    },\n\n    set(value) {\n      var _a;\n\n      let target = previouslyFocusedElement != null ? previouslyFocusedElement : current.value;\n\n      if (!((_a = current.value) == null ? void 0 : _a.contains(target))) {\n        target = current.value;\n      }\n\n      if (value) {\n        target == null ? void 0 : target.focus();\n      } else {\n        target == null ? void 0 : target.blur();\n      }\n    }\n\n  });\n};\n\nexport { useFocusDeep as u };","map":{"version":3,"mappings":";;;;;AAKA,MAAMA,mBAAmB,MAAM;EAC7B,MAAMC,WAAWC,YAAjB;;EAEA,MAAMC,sBAAsB,MAAM;IAChCF,SAASG,KAAT,GAAiBC,SAASC,aAA1B;EAA0B,CAD5B;;EAIAC,UAAUJ,mBAAV;EAEAK,gBAAgB,OAAhB,EAAyBL,mBAAzB;EACAK,gBAAgB,MAAhB,EAAwBL,mBAAxB;EAEO;AACT,CAbA;;AAea,qBAAgBM,EAAD,IAAyD;EACnF,MAAMC,UAAUV,kBAAhB;EACA,MAAMW,UAAUC,kBAAkBH,KAAKI,eAAeJ,EAAf,CAAL,GAA0B,MAA5C,CAAhB;EAEA,IAAIK,2BAA+C,IAAnD;EAEA,OAAOC,SAA8B;IACnCC,MAAO;;;MACD,KAACN,QAAQN,KAAT,EAAgB;QAAS;MAAM;;MAC/B,YAAQA,KAAR,KAAkBO,QAAQP,KAA1B,EAAiC;QAAS;MAAK;;MAEnD,MAAMa,YAAY,cAAQb,KAAR,wBAAec,QAAf,CAAwBR,QAAQN,KAAhC,CAAlB;;MACA,IAAIa,SAAJ,EAAe;QAAEH,2BAA2BJ,QAAQN,KAAnC;MAAyC;;MACnD;IACT,CARmC;;IASnCe,IAAKf,KAAL,EAAY;;;MACN,aAASU,8DAA4BH,QAAQP,KAA7C;;MAEJ,IAAI,EAAC,cAAQA,KAAR,wBAAec,QAAf,CAAwBE,MAAxB,CAAD,CAAJ,EAAuC;QACrCA,SAAST,QAAQP,KAAjB;MACF;;MAEA,IAAIA,KAAJ,EAAW;QACTgB,iCAAQC,KAAR;MAAc,CADhB,MAEO;QACLD,iCAAQE,IAAR;MACF;IACF;;EArBmC,CAA9B,CAAP;AAuBF,CA7Ba","names":["useActiveElement","activeEl","shallowRef","updateActiveElement","value","document","activeElement","onMounted","useCaptureEvent","el","focused","current","useCurrentElement","useHTMLElement","previouslyFocusedElement","computed","get","isFocused","contains","set","target","focus","blur"],"sources":["../../../../src/composables/useFocusDeep.ts"],"sourcesContent":["import { shallowRef, computed, Ref, onMounted, DefineComponent } from 'vue'\nimport { useHTMLElement } from './useHTMLElement'\nimport { useCaptureEvent } from './useCaptureEvent'\nimport { useCurrentElement } from './useCurrentElement'\n\nconst useActiveElement = () => {\n  const activeEl = shallowRef<HTMLElement>()\n\n  const updateActiveElement = () => {\n    activeEl.value = document.activeElement as HTMLElement\n  }\n\n  onMounted(updateActiveElement)\n\n  useCaptureEvent('focus', updateActiveElement)\n  useCaptureEvent('blur', updateActiveElement)\n\n  return activeEl\n}\n\nexport const useFocusDeep = (el?: Ref<HTMLElement | DefineComponent | undefined>) => {\n  const focused = useActiveElement()\n  const current = useCurrentElement(el ? useHTMLElement(el) : undefined)\n  // Cache previouslyFocusedElement, so we can simply come back to it\n  let previouslyFocusedElement: HTMLElement | null = null\n\n  return computed<boolean | undefined>({\n    get () {\n      if (!focused.value) { return false }\n      if (focused.value === current.value) { return true }\n\n      const isFocused = current.value?.contains(focused.value)\n      if (isFocused) { previouslyFocusedElement = focused.value }\n      return isFocused\n    },\n    set (value) {\n      let target = previouslyFocusedElement ?? current.value\n\n      if (!current.value?.contains(target!)) {\n        target = current.value\n      }\n\n      if (value) {\n        target?.focus()\n      } else {\n        target?.blur()\n      }\n    },\n  })\n}\n"]},"metadata":{},"sourceType":"module"}