{"ast":null,"code":"const TreeViewKey = Symbol(\"TreeView\");\nexport { TreeViewKey as T };","map":{"version":3,"mappings":"AAiCa,oBAAcA,OAAO,UAAP,CAAd","names":["Symbol"],"sources":["../../../../../src/components/va-tree-view/types.ts"],"sourcesContent":["import { ComputedRef, InjectionKey } from 'vue'\n\nexport interface TreeNode {\n  id: number | string\n  children: TreeNode[]\n  level?: number\n  checked?: boolean | null\n  disabled?: boolean\n  expanded?: boolean\n  hasChildren?: boolean\n  matchesFilter?: boolean\n  indeterminate?: boolean\n  [key: string]: any\n}\n\nexport type TreeViewPropKey = string | ((node: TreeNode) => string | number)\n\nexport type TreeViewFilterMethod = (node: TreeNode, filter: string, textBy: TreeViewPropKey) => boolean\n\nexport interface TreeView {\n  selectable: boolean\n  iconBy: TreeViewPropKey\n  colorComputed: ComputedRef<string>\n  getText: (node: TreeNode) => string\n  toggleNode: (node: TreeNode) => void\n  getTrackBy: (node: TreeNode) => string\n  getNodeProperty: (node: TreeNode, key: TreeViewPropKey) => any\n  toggleCheckbox: (node: TreeNode, state: boolean | null) => void\n}\n\n// TODO: Implement in future versions the update:selected emit\nexport type TreeViewEmitsList = 'update:selected' | 'update:checked' | 'update:expanded'\n\nexport const TreeViewKey = Symbol('TreeView') as InjectionKey<TreeView>\n"]},"metadata":{},"sourceType":"module"}