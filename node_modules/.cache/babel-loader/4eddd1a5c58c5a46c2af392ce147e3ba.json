{"ast":null,"code":"const validateSlider = (value, step, min, max, range) => {\n  const inRange = v => {};\n\n  if (Array.isArray(value)) {\n    value.map(inRange);\n  }\n\n  return true;\n};\n\nexport { validateSlider as v };","map":{"version":3,"mappings":"AAEO,MAAMA,iBAAiB,CAACC,KAAD,EAA2BC,IAA3B,EAAyCC,GAAzC,EAAsDC,GAAtD,EAAmEC,KAAnE,KAAsF;EAa5G,gBAAWC,CAAD,IAAe,CAK7B,CALI;;EAQF,UAAMC,OAAN,CAAcN,KAAd,GAAsB;IACxBA,MAAMO,GAAN,CAAUC,OAAV;EAGF;;EAEO;AACT,CA5BO","names":["validateSlider","value","step","min","max","range","v","isArray","map","inRange"],"sources":["../../../../../src/components/va-slider/validateSlider.ts"],"sourcesContent":["import { warn } from '../../utils/console'\n\nexport const validateSlider = (value: number | number[], step: number, min: number, max: number, range: boolean) => {\n  if ((Array.isArray(value) && !range) || (!Array.isArray(value) && range)) {\n    warn(`The type \"${Array.isArray(value) ? 'array' : typeof value}\" of prop \"model-value\" does not match prop \"range = ${range}\".`)\n  }\n\n  if (max < min) {\n    warn(`The maximum value (${max}) can not be less than the minimum value (${min}).`)\n  }\n\n  if ((max - min) % step !== 0) {\n    warn(`Step ${step} is illegal. Slider is non-divisible (Min:Max-${min}:${max}).`)\n  }\n\n  const inRange = (v: number) => {\n    if (v < min) {\n      warn(`The value of the slider is ${v}, the minimum value is ${min}, the value of this slider can not be less than the minimum value`)\n    } else if (v > max) {\n      warn(`The value of the slider is ${v}, the maximum value is ${max}, the value of this slider can not be greater than the maximum value`)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    value.map(inRange)\n  } else {\n    inRange(value)\n  }\n\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}