{"ast":null,"code":"import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeStyle, renderSlot, createBlock, createCommentVNode } from \"vue\";\nimport { u as useColors } from \"../../composables/useColors.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { u as useLoadingProps } from \"../../composables/useLoading.js\";\nimport { u as useSizeProps, a as useSize } from \"../../composables/useSize.js\";\nimport { u as useTextColor } from \"../../composables/useTextColor.js\";\nimport { V as VaIcon } from \"../va-icon/index.js\";\nimport { V as VaProgressCircle } from \"../va-progress-circle/index.js\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper.js\";\n\nvar VaAvatar_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \":root{--va-avatar-display: inline-flex;--va-avatar-align-items: center;--va-avatar-justify-content: center;--va-avatar-text-align: center;--va-avatar-vertical-align: middle;--va-avatar-position: relative;--va-avatar-line-height: normal;--va-avatar-border-radius: 50%}.va-avatar{align-items:var(--va-avatar-align-items);display:var(--va-avatar-display);justify-content:var(--va-avatar-justify-content);line-height:var(--va-avatar-line-height);position:var(--va-avatar-position);text-align:var(--va-avatar-text-align);vertical-align:var(--va-avatar-vertical-align);border-radius:var(--va-avatar-border-radius);font-family:var(--va-font-family)}.va-avatar img,.va-avatar svg{border-radius:inherit;display:inline-flex;height:inherit;width:inherit;margin:auto}\\n\")();\n\nconst _sfc_main = defineComponent({\n  name: \"VaAvatar\",\n  components: {\n    VaIcon,\n    VaProgressCircle\n  },\n  props: { ...useLoadingProps,\n    ...useSizeProps,\n    ...useComponentPresetProp,\n    color: {\n      type: String,\n      default: \"info\"\n    },\n    textColor: {\n      type: String\n    },\n    square: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: \"\"\n    },\n    src: {\n      type: String,\n      default: null\n    },\n    alt: {\n      type: String,\n      default: \"\"\n    },\n    fontSize: {\n      type: String,\n      default: \"\"\n    }\n  },\n\n  setup(props) {\n    const {\n      getColor\n    } = useColors();\n    const colorComputed = computed(() => getColor(props.color));\n    const {\n      sizeComputed,\n      fontSizeComputed\n    } = useSize(props, \"VaAvatar\");\n    const {\n      textColorComputed\n    } = useTextColor();\n    const computedStyle = computed(() => ({\n      color: textColorComputed.value,\n      backgroundColor: props.loading ? \"transparent\" : colorComputed.value,\n      borderRadius: props.square ? 0 : \"\",\n      fontSize: props.fontSize || fontSizeComputed.value,\n      width: sizeComputed.value,\n      minWidth: sizeComputed.value,\n      height: sizeComputed.value\n    }));\n    return {\n      sizeComputed,\n      computedStyle,\n      colorComputed\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-hidden\"];\nconst _hoisted_2 = [\"src\", \"alt\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_progress_circle = resolveComponent(\"va-progress-circle\");\n\n  const _component_va_icon = resolveComponent(\"va-icon\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: \"va-avatar\",\n    style: normalizeStyle(_ctx.computedStyle),\n    \"aria-hidden\": !_ctx.$props.src,\n    \"aria-live\": \"polite\"\n  }, [renderSlot(_ctx.$slots, \"default\", {}, () => [_ctx.$props.loading ? (openBlock(), createBlock(_component_va_progress_circle, {\n    key: 0,\n    size: _ctx.sizeComputed,\n    color: _ctx.colorComputed,\n    indeterminate: \"\"\n  }, null, 8, [\"size\", \"color\"])) : _ctx.$props.src ? (openBlock(), createElementBlock(\"img\", {\n    key: 1,\n    src: _ctx.$props.src,\n    alt: _ctx.$props.alt\n  }, null, 8, _hoisted_2)) : _ctx.$props.icon ? (openBlock(), createBlock(_component_va_icon, {\n    key: 2,\n    name: _ctx.$props.icon\n  }, null, 8, [\"name\"])) : createCommentVNode(\"\", true)])], 12, _hoisted_1);\n}\n\nvar _VaAvatar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaAvatar as _ };\nimport './VaAvatar.css';","map":{"version":3,"mappings":";;;;;;;;;;;;AAmCA,MAAKA,YAAaC,gBAAa;EAC7BC,MAAM,UADuB;EAE7BC,YAAY;IAAEC,MAAF;IAAUC;EAAV,CAFiB;EAG7BC,OAAO,EACL,GAAGC,eADE;IAEL,GAAGC,YAFE;IAGL,GAAGC,sBAHE;IAILC,OAAO;MAAEC,MAAMC,MAAR;MAAgBC,SAAS;IAAzB,CAJF;IAKLC,WAAW;MAAEH,MAAMC;IAAR,CALN;IAMLG,QAAQ;MAAEJ,MAAMK,OAAR;MAAiBH,SAAS;IAA1B,CANH;IAOLI,MAAM;MAAEN,MAAMC,MAAR;MAAgBC,SAAS;IAAzB,CAPD;IAQLK,KAAK;MAAEP,MAAMC,MAAR;MAAgBC,SAAS;IAAzB,CARA;IASLM,KAAK;MAAER,MAAMC,MAAR;MAAgBC,SAAS;IAAzB,CATA;IAULO,UAAU;MAAET,MAAMC,MAAR;MAAgBC,SAAS;IAAzB;EAVL,CAHsB;;EAe7BQ,MAAOf,KAAP,EAAc;IACN;MAAEgB;IAAF,IAAeC,WAAf;IACN,MAAMC,gBAAgBC,SAAS,MAAMH,SAAShB,MAAMI,KAAf,CAAf,CAAtB;IACA,MAAM;MAAEgB,YAAF;MAAgBC;IAAhB,IAAqCC,QAAQtB,KAAR,EAAe,UAAf,CAA3C;IACM;MAAEuB;IAAF,IAAwBC,cAAxB;IAEA,sBAAgBL,SAAS,OAAO;MACpCf,OAAOmB,kBAAkBE,KADW;MAEpCC,iBAAiB1B,MAAM2B,OAAN,GAAgB,aAAhB,GAAgCT,cAAcO,KAF3B;MAGpCG,cAAc5B,MAAMS,MAAN,GAAe,CAAf,GAAmB,EAHG;MAIpCK,UAAUd,MAAMc,QAAN,IAAkBO,iBAAiBI,KAJT;MAKpCI,OAAOT,aAAaK,KALgB;MAMpCK,UAAUV,aAAaK,KANa;MAOpCM,QAAQX,aAAaK;IAPe,CAAP,CAAT,CAAhB;IAUC;MACLL,YADK;MAELY,aAFK;MAGLd;IAHK;EAKT;;AApC6B,CAAb,CAAlB;;;;;;;;;;sBAlCEe,mBAuBM,KAvBNA,EAuBM;IAtBJC,OAAM,WAsBF;IArBHC,OAAKC,eAAEC,KAAaL,aAAfI,CAqBF;IApBH,eAAW,CAAGC,KAAOC,MAAP,CAAO1B,GAoBlB;IAnBJ,aAAU;EAmBN,CAvBNqB,EAIY,CAEVM,WAgBOF,WAhBPE,EAgBO,SAhBPA,EAgBO,EAhBPA,QAgBO,CAdGF,YAAOV,OAAP,IAAOa,aADfC,YAKEC,6BALFD,EAKE;IAAAE;IAHCC,MAAMP,iBAGP;IAFCjC,OAAOiC,kBAER;IADAQ;EACA,CALFJ,EAOa,IAPbA,EAOa,CAPbA,EAOa,iBAPbA,CACQ,IAMKJ,YAAOzB,GAAP,IAAO4B,aADpBP,mBAIC,KAJDA,EAIC;IAAAU;IAFE/B,KAAKyB,KAAOC,MAAP,CAAO1B,GAEd;IADEC,KAAKwB,KAAOC,MAAP,CAAOzB;EACd,CAJDoB,EAMa,IANbA,EAMa,CANbA,EAMaa,UANbb,CACa,IAKAI,YAAO1B,IAAP,IAAO6B,aADpBC,YAGEM,kBAHFN,EAGE;IAAAE;IADC/C,MAAMyC,KAAOC,MAAP,CAAO3B;EACd,CAHF8B,EAEgB,IAFhBA,EAEgB,CAFhBA,EAEgB,QAFhBA,CACa,IACGO,4BAEX,CAhBPT,CAFU,CAJZN","names":["_sfc_main","defineComponent","name","components","VaIcon","VaProgressCircle","props","useLoadingProps","useSizeProps","useComponentPresetProp","color","type","String","default","textColor","square","Boolean","icon","src","alt","fontSize","setup","getColor","useColors","colorComputed","computed","sizeComputed","fontSizeComputed","useSize","textColorComputed","useTextColor","value","backgroundColor","loading","borderRadius","width","minWidth","height","computedStyle","_createElementBlock","class","style","_normalizeStyle","_ctx","$props","_renderSlot","openBlock","_createBlock","_component_va_progress_circle","key","size","indeterminate","_hoisted_2","_component_va_icon","_createCommentVNode"],"sources":["../../../../../src/components/va-avatar/VaAvatar.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-avatar\"\n    :style=\"computedStyle\"\n    :aria-hidden=\"!$props.src\"\n    aria-live=\"polite\"\n  >\n    <slot>\n      <va-progress-circle\n        v-if=\"$props.loading\"\n        :size=\"sizeComputed\"\n        :color=\"colorComputed\"\n        indeterminate\n      />\n      <img\n        v-else-if=\"$props.src\"\n        :src=\"$props.src\"\n        :alt=\"$props.alt\"\n      >\n      <va-icon\n        v-else-if=\"$props.icon\"\n        :name=\"$props.icon\"\n      />\n    </slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed } from 'vue'\n\nimport { useComponentPresetProp, useColors, useTextColor, useSize, useSizeProps, useLoadingProps } from '../../composables'\n\nimport { VaIcon } from '../va-icon'\nimport { VaProgressCircle } from '../va-progress-circle'\n\nexport default defineComponent({\n  name: 'VaAvatar',\n  components: { VaIcon, VaProgressCircle },\n  props: {\n    ...useLoadingProps,\n    ...useSizeProps,\n    ...useComponentPresetProp,\n    color: { type: String, default: 'info' },\n    textColor: { type: String },\n    square: { type: Boolean, default: false },\n    icon: { type: String, default: '' },\n    src: { type: String, default: null },\n    alt: { type: String, default: '' },\n    fontSize: { type: String, default: '' },\n  },\n  setup (props) {\n    const { getColor } = useColors()\n    const colorComputed = computed(() => getColor(props.color))\n    const { sizeComputed, fontSizeComputed } = useSize(props, 'VaAvatar')\n    const { textColorComputed } = useTextColor()\n\n    const computedStyle = computed(() => ({\n      color: textColorComputed.value,\n      backgroundColor: props.loading ? 'transparent' : colorComputed.value,\n      borderRadius: props.square ? 0 : '',\n      fontSize: props.fontSize || fontSizeComputed.value,\n      width: sizeComputed.value,\n      minWidth: sizeComputed.value, // We only define width because common use case would be flex row, for column we expect user to set appropriate styling externally.\n      height: sizeComputed.value,\n    }))\n\n    return {\n      sizeComputed,\n      computedStyle,\n      colorComputed,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-avatar {\n  align-items: var(--va-avatar-align-items);\n  display: var(--va-avatar-display);\n  justify-content: var(--va-avatar-justify-content);\n  line-height: var(--va-avatar-line-height);\n  position: var(--va-avatar-position);\n  text-align: var(--va-avatar-text-align);\n  vertical-align: var(--va-avatar-vertical-align);\n  border-radius: var(--va-avatar-border-radius);\n  font-family: var(--va-font-family);\n\n  img,\n  svg {\n    border-radius: inherit;\n    display: inline-flex;\n    height: inherit;\n    width: inherit;\n    margin: auto;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}