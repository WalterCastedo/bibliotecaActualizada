{"ast":null,"code":"import { isRef, computed, shallowRef } from \"vue\";\nimport { u as useTemplateRef } from \"./useTemplateRef.js\";\n\nconst extractHTMLElement = el => el && \"$el\" in el ? el.$el : el;\n\nconst useHTMLElement = key => {\n  if (isRef(key)) {\n    return computed({\n      get() {\n        return extractHTMLElement(key.value);\n      },\n\n      set(value) {\n        key.value = value;\n      }\n\n    });\n  }\n\n  if (key) {\n    const el2 = useTemplateRef(key);\n    return computed({\n      get() {\n        return extractHTMLElement(el2.value);\n      },\n\n      set(value) {\n        el2.value = value;\n      }\n\n    });\n  }\n\n  const el = shallowRef();\n  return computed({\n    set(value) {\n      el.value = extractHTMLElement(value);\n    },\n\n    get() {\n      return el.value;\n    }\n\n  });\n};\n\nexport { extractHTMLElement as e, useHTMLElement as u };","map":{"version":3,"mappings":";;;AAIO,MAAMA,qBAAsBC,EAAD,IAA0BA,MAAM,SAASA,EAAf,GAAoBA,GAAGC,GAAvB,GAA6BD,EAAlF;;AAEM,uBAAkBE,GAAD,IAAqF;EAC7G,UAAMA,GAAN,GAAY;IACd,OAAOC,SAAS;MACdC,MAAO;QAAS,0BAAmBF,IAAIG,KAAvB;MAA8B,CADhC;;MAEdC,IAAKD,KAAL,EAAY;QAAEH,IAAIG,KAAJ,GAAYA,KAAZ;MAAkB;;IAFlB,CAAT,CAAP;EAIF;;EAEA,IAAIH,GAAJ,EAAS;IACD,YAAKK,eAAeL,GAAf,CAAL;IACN,OAAOC,SAAS;MACdC,MAAO;QAAS,0BAAmBI,IAAGH,KAAtB;MAA6B,CAD/B;;MAEdC,IAAKD,KAAL,EAAY;QAAEG,IAAGH,KAAH,GAAWA,KAAX;MAAiB;;IAFjB,CAAT,CAAP;EAIF;;EAEA,MAAML,KAAKS,YAAX;EACA,OAAON,SAAS;IACdG,IAAKD,KAAL,EAAY;MACPL,WAAQD,mBAAmBM,KAAnB,CAAR;IACL,CAHc;;IAIdD,MAAO;MAAE,OAAOJ,GAAGK,KAAV;IAAgB;;EAJX,CAAT,CAAP;AAMF,CAvBa","names":["extractHTMLElement","el","$el","key","computed","get","value","set","useTemplateRef","el2","shallowRef"],"sources":["../../../../src/composables/useHTMLElement.ts"],"sourcesContent":["import { computed, isRef, Ref, shallowRef, DefineComponent } from 'vue'\n\nimport { useTemplateRef } from './'\n\nexport const extractHTMLElement = (el: any): HTMLElement => el && '$el' in el ? el.$el : el\n\nexport const useHTMLElement = (key?: string | Ref<HTMLElement | DefineComponent | undefined>): Ref<HTMLElement> => {\n  if (isRef(key)) {\n    return computed({\n      get () { return extractHTMLElement(key.value) },\n      set (value) { key.value = value },\n    })\n  }\n\n  if (key) {\n    const el = useTemplateRef(key)\n    return computed({\n      get () { return extractHTMLElement(el.value) },\n      set (value) { el.value = value },\n    })\n  }\n\n  const el = shallowRef()\n  return computed({\n    set (value) {\n      el.value = extractHTMLElement(value)\n    },\n    get () { return el.value },\n  })\n}\n"]},"metadata":{},"sourceType":"module"}