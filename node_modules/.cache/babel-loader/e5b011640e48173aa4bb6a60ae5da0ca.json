{"ast":null,"code":"import { defineComponent, toRefs, computed, watch, resolveComponent, openBlock, createElementBlock, mergeProps, Fragment, renderList, renderSlot, createTextVNode, toDisplayString, createCommentVNode, createVNode, withCtx, createElementVNode, normalizeProps, guardReactiveProps } from \"vue\";\nimport { u as useGridKeyboardNavigation } from \"../../hooks/grid-keyboard-navigation.js\";\nimport { u as useDatePicker } from \"../../hooks/use-picker.js\";\nimport { u as useVaDatePickerCalendar } from \"./va-date-picker-calendar-hook.js\";\nimport { V as VaDatePickerCell } from \"../VaDatePickerCell.js\";\nimport { _ as _export_sfc } from \"../../../../../plugin-vue_export-helper.js\";\n\nvar VaDayPicker_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \".va-day-picker{display:grid;grid-template-columns:repeat(7,1fr);grid-gap:var(--va-date-picker-cell-gap)}.va-day-picker__weekday{height:var(--va-date-picker-cell-size);color:var(--va-secondary);text-align:center;font-size:var(--va-date-picker-weekday-font-size);font-weight:700;line-height:var(--va-date-picker-cell-size)}\\n\")();\n\nconst _sfc_main = defineComponent({\n  name: \"VaDayPicker\",\n  components: {\n    VaDatePickerCell\n  },\n  props: {\n    monthNames: {\n      type: Array,\n      required: true\n    },\n    weekdayNames: {\n      type: Array,\n      required: true\n    },\n    firstWeekday: {\n      type: String,\n      default: \"Sunday\"\n    },\n    hideWeekDays: {\n      type: Boolean,\n      default: false\n    },\n    view: {\n      type: Object,\n      default: () => ({\n        type: \"day\"\n      })\n    },\n    modelValue: {\n      type: [Date, Array, Object]\n    },\n    mode: {\n      type: String,\n      default: \"auto\"\n    },\n    showOtherMonths: {\n      type: Boolean,\n      default: false\n    },\n    allowedDays: {\n      type: Function\n    },\n    weekends: {\n      type: Function\n    },\n    highlightWeekend: {\n      type: Boolean,\n      default: false\n    },\n    highlightToday: {\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    }\n  },\n  emits: [\"update:modelValue\", \"hover:day\", \"click:day\"],\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      firstWeekday,\n      weekdayNames,\n      view\n    } = toRefs(props);\n    const {\n      calendarDates,\n      currentMonthStartIndex,\n      currentMonthEndIndex\n    } = useVaDatePickerCalendar(view, {\n      firstWeekday\n    });\n    const weekdayNamesComputed = computed(() => {\n      return firstWeekday.value === \"Sunday\" ? weekdayNames.value : [...weekdayNames.value.slice(1), weekdayNames.value[0]];\n    });\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange\n    } = useDatePicker(\"day\", calendarDates, props, emit);\n    const gridStartIndex = computed(() => props.showOtherMonths ? 0 : currentMonthStartIndex.value);\n    const gridEndIndex = computed(() => props.showOtherMonths ? calendarDates.value.length : currentMonthEndIndex.value);\n    const {\n      focusedCellIndex,\n      containerAttributes\n    } = useGridKeyboardNavigation({\n      rowSize: 7,\n      start: gridStartIndex,\n      end: gridEndIndex,\n      onSelected: selectedValue => onClick(calendarDates.value[selectedValue])\n    });\n    watch(focusedCellIndex, index => {\n      hoveredIndex.value = index;\n    });\n    watch(hoveredIndex, index => {\n      focusedCellIndex.value = index;\n    });\n\n    const isOtherMonth = date => props.view.month !== date.getMonth();\n\n    const isDateDisabled = date => props.allowedDays === void 0 ? false : !props.allowedDays(date);\n\n    const isDateWeekend = date => {\n      if (props.weekends === void 0) {\n        return date.getDay() === 6 || date.getDay() === 0;\n      }\n\n      return props.weekends(date);\n    };\n\n    return {\n      hoveredIndex,\n      calendarDates,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isOtherMonth,\n      isDateDisabled,\n      isDateWeekend,\n      containerAttributes,\n      weekdayNamesComputed,\n      focusedCellIndex\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"onMouseenter\"];\nconst _hoisted_2 = {\n  class: \"va-date-picker-cell__day\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_date_picker_cell = resolveComponent(\"va-date-picker-cell\");\n\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    class: \"va-day-picker\"\n  }, _ctx.containerAttributes), [!_ctx.hideWeekDays ? (openBlock(true), createElementBlock(Fragment, {\n    key: 0\n  }, renderList(_ctx.weekdayNamesComputed, weekday => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: weekday,\n      class: \"va-day-picker__weekday\"\n    }, [renderSlot(_ctx.$slots, \"weekday\", {}, () => [createTextVNode(toDisplayString(weekday), 1)])]);\n  }), 128)) : createCommentVNode(\"\", true), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.calendarDates, (date, index) => {\n    return openBlock(), createElementBlock(\"div\", {\n      class: \"va-day-picker__calendar__day-wrapper\",\n      key: index,\n      onMouseenter: $event => _ctx.hoveredIndex = index,\n      onMouseleave: _cache[0] || (_cache[0] = $event => _ctx.hoveredIndex = -1)\n    }, [createVNode(_component_va_date_picker_cell, {\n      hidden: _ctx.isOtherMonth(date) && !_ctx.showOtherMonths,\n      today: _ctx.isToday(date),\n      selected: _ctx.isSelected(date),\n      \"in-range\": _ctx.isInRange(date),\n      \"other-month\": _ctx.isOtherMonth(date),\n      weekend: _ctx.isDateWeekend(date),\n      disabled: _ctx.isDateDisabled(date),\n      focused: _ctx.hoveredIndex === index,\n      \"highlight-today\": _ctx.highlightToday,\n      \"highlight-weekend\": _ctx.highlightWeekend,\n      readonly: _ctx.$props.readonly,\n      color: _ctx.color,\n      onClick: $event => {\n        _ctx.onClick(date);\n\n        _ctx.focusedCellIndex = index;\n      }\n    }, {\n      default: withCtx(() => [createElementVNode(\"span\", _hoisted_2, [renderSlot(_ctx.$slots, \"day\", normalizeProps(guardReactiveProps({\n        date\n      })), () => [createTextVNode(toDisplayString(date.getDate()), 1)])])]),\n      _: 2\n    }, 1032, [\"hidden\", \"today\", \"selected\", \"in-range\", \"other-month\", \"weekend\", \"disabled\", \"focused\", \"highlight-today\", \"highlight-weekend\", \"readonly\", \"color\", \"onClick\"])], 40, _hoisted_1);\n  }), 128))], 16);\n}\n\nvar VaDayPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { VaDayPicker as V };\nimport './VaDayPicker.css';","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","VaDatePickerCell","props","monthNames","type","Array","required","weekdayNames","firstWeekday","String","default","hideWeekDays","Boolean","view","Object","modelValue","Date","mode","showOtherMonths","allowedDays","Function","weekends","highlightWeekend","highlightToday","readonly","color","emits","setup","emit","toRefs","calendarDates","currentMonthStartIndex","currentMonthEndIndex","useVaDatePickerCalendar","computed","value","slice","hoveredIndex","onClick","isToday","isSelected","isInRange","useDatePicker","gridStartIndex","length","focusedCellIndex","containerAttributes","useGridKeyboardNavigation","rowSize","start","end","gridEndIndex","onSelected","selectedValue","watch","index","isOtherMonth","date","month","getMonth","getDay","isDateDisabled","isDateWeekend","weekdayNamesComputed","class","_createElementBlock","_mergeProps","_ctx","_openBlock","_Fragment","key","_renderList","weekday","_renderSlot","_toDisplayString","_createTextVNode","onMouseenter","$event","onMouseleave","_cache","_createVNode","_component_va_date_picker_cell","hidden","today","selected","weekend","disabled","focused","$props","_createElementVNode","_normalizeProps","getDate"],"sources":["../../../../../../../src/components/va-date-picker/components/VaDayPicker/VaDayPicker.vue"],"sourcesContent":["<template>\n  <div class=\"va-day-picker\" v-bind=\"containerAttributes\">\n    <template v-if=\"!hideWeekDays\">\n      <div\n        v-for=\"weekday in weekdayNamesComputed\" :key=\"weekday\"\n        class=\"va-day-picker__weekday\"\n      >\n        <slot name=\"weekday\">\n          {{ weekday }}\n        </slot>\n      </div>\n    </template>\n\n    <div\n      class=\"va-day-picker__calendar__day-wrapper\"\n      v-for=\"(date, index) in calendarDates\"\n      :key=\"index\"\n      @mouseenter=\"hoveredIndex = index\"\n      @mouseleave=\"hoveredIndex = -1\"\n    >\n      <va-date-picker-cell\n        :hidden=\"isOtherMonth(date) && !showOtherMonths\"\n        :today=\"isToday(date)\"\n        :selected=\"isSelected(date)\"\n        :in-range=\"isInRange(date)\"\n        :other-month=\"isOtherMonth(date)\"\n        :weekend=\"isDateWeekend(date)\"\n        :disabled=\"isDateDisabled(date)\"\n        :focused=\"hoveredIndex === index\"\n        :highlight-today=\"highlightToday\"\n        :highlight-weekend=\"highlightWeekend\"\n        :readonly=\"$props.readonly\"\n        :color=\"color\"\n        @click=\"onClick(date); focusedCellIndex = index\"\n      >\n        <span class=\"va-date-picker-cell__day\">\n          <slot name=\"day\" v-bind=\"{ date }\">\n            {{ date.getDate() }}\n          </slot>\n        </span>\n      </va-date-picker-cell>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, toRefs, PropType, watch } from 'vue'\n\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\nimport { useDatePicker } from '../../hooks/use-picker'\nimport { useVaDatePickerCalendar } from './va-date-picker-calendar-hook'\n\nimport { DatePickerMode, DatePickerModelValue, DatePickerView } from '../../types'\n\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\n\nexport default defineComponent({\n  name: 'VaDayPicker',\n\n  components: { VaDatePickerCell },\n\n  props: {\n    monthNames: { type: Array as PropType<string[]>, required: true },\n    weekdayNames: { type: Array as PropType<string[]>, required: true },\n    firstWeekday: { type: String as PropType<'Monday' | 'Sunday'>, default: 'Sunday' },\n    hideWeekDays: { type: Boolean, default: false },\n    view: { type: Object as PropType<DatePickerView>, default: () => ({ type: 'day' }) },\n    modelValue: { type: [Date, Array, Object] as PropType<DatePickerModelValue> },\n    mode: { type: String as PropType<DatePickerMode>, default: 'auto' },\n    showOtherMonths: { type: Boolean, default: false },\n    allowedDays: { type: Function as PropType<(date: Date) => boolean> },\n    weekends: { type: Function as PropType<(date: Date) => boolean> },\n    highlightWeekend: { type: Boolean, default: false },\n    highlightToday: { type: Boolean, default: false },\n    readonly: { type: Boolean, default: false },\n    color: { type: String, default: 'primary' },\n  },\n\n  emits: ['update:modelValue', 'hover:day', 'click:day'],\n\n  setup (props, { emit }) {\n    const { firstWeekday, weekdayNames, view } = toRefs(props)\n\n    const { calendarDates, currentMonthStartIndex, currentMonthEndIndex } = useVaDatePickerCalendar(view, { firstWeekday })\n\n    const weekdayNamesComputed = computed(() => {\n      return firstWeekday.value === 'Sunday'\n        ? weekdayNames.value\n        : [...weekdayNames.value.slice(1), weekdayNames.value[0]]\n    })\n\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n    } = useDatePicker('day', calendarDates, props, emit)\n\n    const gridStartIndex = computed(() => props.showOtherMonths ? 0 : currentMonthStartIndex.value)\n    const gridEndIndex = computed(() => props.showOtherMonths ? calendarDates.value.length : currentMonthEndIndex.value)\n\n    const {\n      focusedCellIndex, containerAttributes,\n    } = useGridKeyboardNavigation({\n      rowSize: 7,\n      start: gridStartIndex,\n      end: gridEndIndex,\n      onSelected: (selectedValue) => onClick(calendarDates.value[selectedValue]),\n    })\n\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\n\n    const isOtherMonth = (date: Date) => props.view.month !== date.getMonth()\n    const isDateDisabled = (date: Date) => props.allowedDays === undefined ? false : !props.allowedDays(date)\n    const isDateWeekend = (date: Date) => {\n      if (props.weekends === undefined) {\n        return date.getDay() === 6 || date.getDay() === 0 // 0 - Sunday, 6 - Saturday\n      }\n\n      return props.weekends(date)\n    }\n\n    return {\n      hoveredIndex,\n      calendarDates,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isOtherMonth,\n      isDateDisabled,\n      isDateWeekend,\n      containerAttributes,\n      weekdayNamesComputed,\n      focusedCellIndex,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-day-picker {\n  display: grid;\n  grid-template-columns: repeat(7, 1fr); // 7 columns\n  grid-gap: var(--va-date-picker-cell-gap);\n\n  &__weekday {\n    height: var(--va-date-picker-cell-size);\n    color: var(--va-secondary);\n    text-align: center;\n    font-size: var(--va-date-picker-weekday-font-size);\n    font-weight: bold;\n    line-height: var(--va-date-picker-cell-size);\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}