{"ast":null,"code":"import { a as getValueByKey } from \"../../../utils/value-by-key.js\";\nconst useTreeViewProps = {\n  nodes: {\n    type: Array,\n    default: []\n  },\n  stateful: {\n    type: Boolean,\n    default: true\n  },\n  selectable: {\n    type: Boolean,\n    default: false\n  },\n  selectionType: {\n    type: String,\n    default: \"leaf\",\n    validator: v => [\"leaf\", \"independent\"].includes(v)\n  },\n  valueBy: {\n    type: [String, Function],\n    default: \"id\"\n  },\n  textBy: {\n    type: [String, Function],\n    default: \"label\"\n  },\n  trackBy: {\n    type: [String, Function],\n    default: \"id\"\n  },\n  iconBy: {\n    type: [String, Function],\n    default: \"icon\"\n  },\n  disabledBy: {\n    type: [String, Function],\n    default: \"disabled\"\n  },\n  expandedBy: {\n    type: [String, Function],\n    default: \"expanded\"\n  },\n  checkedBy: {\n    type: [String, Function],\n    default: \"checked\"\n  },\n  expandAll: {\n    type: Boolean,\n    default: false\n  },\n  expanded: {\n    type: Array,\n    default: []\n  },\n  filter: {\n    type: String,\n    default: \"\"\n  },\n  filterMethod: {\n    type: Function,\n    default: void 0\n  },\n  checked: {\n    type: Array,\n    default: []\n  },\n  color: {\n    type: String,\n    default: \"primary\"\n  }\n};\nconst useTreeViewEmits = [\"update:modelValue\", \"update:checked\", \"update:expanded\"];\n\nconst useTreeHelpers = props => {\n  const isStringOrNumber = node => {\n    const typeOfNode = typeof node;\n    return typeOfNode === \"string\" || typeOfNode === \"number\";\n  };\n\n  const getNodeProperty = (node, key) => !key || isStringOrNumber(node) ? node : getValueByKey(node, key);\n\n  const getValue = node => getNodeProperty(node, props.valueBy);\n\n  const getNodeByValue = value => {\n    if (!props.valueBy) {\n      return value;\n    }\n\n    return props.nodes.find(node => value === getValue(node)) || value;\n  };\n\n  const getText = node => getNodeProperty(node, props.textBy);\n\n  const getChecked = node => getNodeProperty(node, props.checkedBy);\n\n  const getDisabled = node => getNodeProperty(node, props.disabledBy);\n\n  const getExpanded = node => getNodeProperty(node, props.expandedBy);\n\n  const getTrackBy = node => getNodeProperty(node, props.trackBy);\n\n  const iterateNodes = (nodes, cb) => {\n    nodes.forEach(node => {\n      const children = node.children || [];\n\n      if (children.length) {\n        iterateNodes(children, cb);\n      }\n\n      cb(node);\n    });\n  };\n\n  return {\n    getText,\n    getValue,\n    getChecked,\n    getTrackBy,\n    getDisabled,\n    getExpanded,\n    iterateNodes,\n    getNodeByValue,\n    getNodeProperty\n  };\n};\n\nexport { useTreeViewEmits as a, useTreeHelpers as b, useTreeViewProps as u };","map":{"version":3,"mappings":"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","names":["useTreeViewProps","nodes","type","Array","default","stateful","Boolean","selectable","selectionType","String","validator","v","includes","valueBy","Function","textBy","trackBy","iconBy","disabledBy","expandedBy","checkedBy","expandAll","expanded","filter","filterMethod","checked","color","useTreeViewEmits","props","node","typeOfNode","getNodeProperty","key","isStringOrNumber","getValueByKey","getValue","value","find","getText","getChecked","getDisabled","getExpanded","getTrackBy","cb","children","length","iterateNodes","getNodeByValue"],"sources":["../../../../../../src/components/va-tree-view/hooks/useTreeHelpers.ts"],"sourcesContent":["import { PropType, ExtractPropTypes } from 'vue'\n\nimport type { TreeNode, TreeViewFilterMethod, TreeViewPropKey } from '../types'\n\nimport { getValueByKey } from '../../../utils/value-by-key'\n\nexport const useTreeViewProps = {\n  nodes: {\n    type: Array as PropType<TreeNode[]>,\n    default: [],\n  },\n  stateful: {\n    type: Boolean,\n    default: true,\n  },\n  selectable: {\n    type: Boolean,\n    default: false,\n  },\n  selectionType: {\n    type: String,\n    default: 'leaf',\n    validator: (v: string) => ['leaf', 'independent'].includes(v),\n  },\n  valueBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'id',\n  },\n  textBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'label',\n  },\n  trackBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'id',\n  },\n  iconBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'icon',\n  },\n  disabledBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'disabled',\n  },\n  expandedBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'expanded',\n  },\n  checkedBy: {\n    type: [String, Function] as PropType<TreeViewPropKey>,\n    default: 'checked',\n  },\n  expandAll: {\n    type: Boolean,\n    default: false,\n  },\n  expanded: {\n    type: Array as PropType<(string | number | TreeNode)[]>,\n    default: [],\n  },\n  filter: {\n    type: String,\n    default: '',\n  },\n  filterMethod: {\n    type: Function as PropType<TreeViewFilterMethod | undefined>,\n    default: undefined,\n  },\n  checked: {\n    type: Array as PropType<(string | number | TreeNode)[]>,\n    default: [],\n  },\n  color: {\n    type: String,\n    default: 'primary',\n  },\n}\n\nexport const useTreeViewEmits = ['update:modelValue', 'update:checked', 'update:expanded']\n\nexport const useTreeHelpers = (props: ExtractPropTypes<typeof useTreeViewProps>) => {\n  const isStringOrNumber = (node: TreeNode): node is any => {\n    const typeOfNode = typeof node\n\n    return typeOfNode === 'string' || typeOfNode === 'number'\n  }\n\n  const getNodeProperty = (node: TreeNode, key: TreeViewPropKey) =>\n    !key || isStringOrNumber(node) ? node : getValueByKey(node, key)\n\n  const getValue = (node: TreeNode) => getNodeProperty(node, props.valueBy)\n\n  const getNodeByValue = (value: TreeNode) => {\n    if (!props.valueBy) { return value }\n\n    return props.nodes.find((node: TreeNode) => value === getValue(node)) || value\n  }\n\n  const getText = (node: TreeNode) => getNodeProperty(node, props.textBy)\n  const getChecked = (node: TreeNode) => getNodeProperty(node, props.checkedBy)\n  const getDisabled = (node: TreeNode) => getNodeProperty(node, props.disabledBy)\n  const getExpanded = (node: TreeNode) => getNodeProperty(node, props.expandedBy)\n  const getTrackBy = (node: TreeNode) => getNodeProperty(node, props.trackBy)\n\n  const iterateNodes = (nodes: TreeNode[], cb: (node: TreeNode) => unknown) => {\n    nodes.forEach((node: TreeNode) => {\n      const children = node.children || []\n\n      if (children.length) { iterateNodes(children, cb) }\n\n      cb(node)\n    })\n  }\n\n  return {\n    getText,\n    getValue,\n    getChecked,\n    getTrackBy,\n    getDisabled,\n    getExpanded,\n    iterateNodes,\n    getNodeByValue,\n    getNodeProperty,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}