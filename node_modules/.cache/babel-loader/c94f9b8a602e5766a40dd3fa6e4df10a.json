{"ast":null,"code":"import { V as VaTimePickerColumnCell } from \"../VaTimePickerColumnCell.js\";\nimport { defineComponent, shallowRef, watch, onMounted, nextTick, computed, resolveComponent, openBlock, createElementBlock, withKeys, withModifiers, normalizeStyle, Fragment, renderList, createBlock, withCtx, createElementVNode, normalizeClass, renderSlot, normalizeProps, guardReactiveProps, createTextVNode, toDisplayString } from \"vue\";\nimport { d as debounce_1 } from \"../../../../../vendor.js\";\nimport { a as useFocusEmits, u as useFocus } from \"../../../../composables/useFocus.js\";\nimport { u as useElementBackground } from \"../../../../composables/useElementBackground/useElementBackground.js\";\nimport { u as useSyncProp } from \"../../../../composables/useSyncProp.js\";\nimport { u as useTextColor } from \"../../../../composables/useTextColor.js\";\nimport { _ as _export_sfc } from \"../../../../../plugin-vue_export-helper.js\";\n\nvar VaTimePickerColumn_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => '.va-time-picker-column{--va-time-picker-column-gap-height: 50px;--va-time-picker-column-border-right: 1px solid var(--va-background-element);--va-time-picker-cell-height: 30px;--va-time-picker-cell-width: 40px;--va-time-picker-cell-cursor: pointer;--va-time-picker-cell-active-background: var(--va-primary);--va-time-picker-cell-active-color: var(--va-primary);--va-time-picker-cell-background-color-hover: transparent;--va-time-picker-cell-active-background-opacity: .05;--va-time-picker-cell-active-background-opacity-hover: .1}.va-time-picker-column{overflow-y:scroll;-ms-overflow-style:none;scrollbar-width:none;height:100%;border-right:var(--va-time-picker-column-border-right)}.va-time-picker-column::-webkit-scrollbar{display:none}.va-time-picker-column:before,.va-time-picker-column:after{content:\"\";display:block;height:var(--va-time-picker-column-gap-height);width:100%}.va-time-picker-column:last-child{border-right:0}.va-time-picker-column .va-time-picker-cell{height:var(--va-time-picker-cell-height);line-height:var(--va-time-picker-cell-height);width:var(--va-time-picker-cell-width);text-align:center;cursor:var(--va-time-picker-cell-cursor);-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.va-time-picker-column .va-time-picker-cell--active{position:relative;color:var(--va-time-picker-cell-active-color);z-index:0}.va-time-picker-column .va-time-picker-cell--active:before{background:var(--va-time-picker-cell-active-background);position:absolute;height:100%;width:100%;left:0;right:0;content:\"\";z-index:-1;opacity:var(--va-time-picker-cell-active-background-opacity)}.va-time-picker-column .va-time-picker-cell:hover{background:var(--va-time-picker-cell-background-color-hover)}.va-time-picker-column:focus-visible .va-time-picker-cell--active{outline:2px solid var(--va-focus)!important;border-radius:4px;outline-offset:-2px}\\n')();\n\nconst _sfc_main = defineComponent({\n  name: \"VaTimePickerColumn\",\n  components: {\n    VaTimePickerColumnCell\n  },\n  props: {\n    items: {\n      type: Array,\n      default: () => []\n    },\n    activeItemIndex: {\n      type: Number,\n      default: 0\n    },\n    cellHeight: {\n      type: Number,\n      default: 30\n    }\n  },\n  emits: [\"item-selected\", \"update:activeItemIndex\", ...useFocusEmits],\n\n  setup(props, {\n    emit\n  }) {\n    const rootElement = shallowRef();\n    const {\n      focus,\n      blur\n    } = useFocus(rootElement, emit);\n    const [syncActiveItemIndex] = useSyncProp(\"activeItemIndex\", props, emit);\n    watch(syncActiveItemIndex, newVal => {\n      scrollTo(newVal);\n    });\n    onMounted(() => scrollTo(syncActiveItemIndex.value, false));\n\n    const scrollTo = (index, animated = true) => {\n      nextTick(() => {\n        var _a, _b;\n\n        (_b = (_a = rootElement.value) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n          behavior: animated ? \"smooth\" : \"auto\",\n          top: index * props.cellHeight\n        });\n      });\n    };\n\n    const makeActiveByIndex = index => {\n      syncActiveItemIndex.value = index;\n      nextTick(() => scrollTo(syncActiveItemIndex.value));\n    };\n\n    const makeActiveNext = times => {\n      syncActiveItemIndex.value = (syncActiveItemIndex.value + (times || 1)) % props.items.length;\n      nextTick(() => scrollTo(syncActiveItemIndex.value));\n    };\n\n    const makeActivePrev = times => {\n      syncActiveItemIndex.value = (syncActiveItemIndex.value - (times || 1) + props.items.length) % props.items.length;\n      nextTick(() => scrollTo(syncActiveItemIndex.value));\n    };\n\n    const onCellClick = index => {\n      syncActiveItemIndex.value = index;\n    };\n\n    const formatCell = n => {\n      if (!Number.isInteger(n)) {\n        return n;\n      }\n\n      return n < 10 ? `0${n}` : `${n}`;\n    };\n\n    const {\n      background\n    } = useElementBackground(rootElement);\n    const {\n      textColorComputed\n    } = useTextColor(background);\n    const styleComputed = computed(() => ({\n      color: textColorComputed.value\n    }));\n\n    const getIndex = () => {\n      const scrollTop = rootElement.value.scrollTop;\n      const calculatedIndex = Math.max((scrollTop - scrollTop % props.cellHeight) / props.cellHeight, scrollTop / props.cellHeight);\n\n      if (syncActiveItemIndex.value * props.cellHeight < scrollTop) {\n        return Math.ceil(calculatedIndex);\n      } else if (syncActiveItemIndex.value * props.cellHeight > scrollTop) {\n        return Math.floor(calculatedIndex);\n      } else {\n        return Math.round(calculatedIndex);\n      }\n    };\n\n    const onScroll = debounce_1(() => {\n      if (rootElement.value && syncActiveItemIndex.value !== -1) {\n        syncActiveItemIndex.value = getIndex();\n      }\n    }, 200);\n    return {\n      rootElement,\n      makeActiveNext,\n      makeActivePrev,\n      makeActiveByIndex,\n      onScroll,\n      onCellClick,\n      formatCell,\n      styleComputed,\n      focus,\n      blur\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"onClick\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_VaTimePickerColumnCell = resolveComponent(\"VaTimePickerColumnCell\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"rootElement\",\n    tabindex: \"0\",\n    class: \"va-time-picker-column\",\n    onKeydown: [_cache[0] || (_cache[0] = withKeys(withModifiers($event => _ctx.makeActiveNext(), [\"stop\", \"prevent\"]), [\"down\"])), _cache[1] || (_cache[1] = withKeys(withModifiers($event => _ctx.makeActiveNext(5), [\"stop\", \"prevent\"]), [\"space\"])), _cache[2] || (_cache[2] = withKeys(withModifiers($event => _ctx.makeActivePrev(), [\"stop\", \"prevent\"]), [\"up\"]))],\n    style: normalizeStyle(_ctx.styleComputed)\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, (item, index) => {\n    return openBlock(), createBlock(_component_VaTimePickerColumnCell, {\n      key: item,\n      onScrollPassive: _ctx.onScroll,\n      onTouchmovePassive: _ctx.onScroll,\n      onMousewheelPassive: _ctx.onScroll\n    }, {\n      default: withCtx(() => [createElementVNode(\"div\", {\n        class: normalizeClass([\"va-time-picker-cell\", {\n          \"va-time-picker-cell--active\": index === _ctx.$props.activeItemIndex\n        }]),\n        onClick: $event => _ctx.onCellClick(index)\n      }, [renderSlot(_ctx.$slots, \"cell\", normalizeProps(guardReactiveProps({\n        item,\n        index,\n        activeItemIndex: _ctx.activeItemIndex,\n        items: _ctx.items,\n        formattedItem: _ctx.formatCell(item)\n      })), () => [createTextVNode(toDisplayString(_ctx.formatCell(item)), 1)])], 10, _hoisted_1)]),\n      _: 2\n    }, 1032, [\"onScrollPassive\", \"onTouchmovePassive\", \"onMousewheelPassive\"]);\n  }), 128))], 36);\n}\n\nvar _VaTimePickerColumn = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaTimePickerColumn as _ };\nimport './VaTimePickerColumn.css';","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","VaTimePickerColumnCell","props","items","type","Array","default","activeItemIndex","Number","cellHeight","emits","useFocusEmits","setup","emit","rootElement","shallowRef","focus","blur","useFocus","syncActiveItemIndex","useSyncProp","watch","newVal","scrollTo","onMounted","value","index","animated","nextTick","behavior","top","times","length","n","isInteger","background","useElementBackground","textColorComputed","useTextColor","computed","color","getIndex","scrollTop","Math","max","ceil","calculatedIndex","floor","round","debounce","makeActiveNext","makeActivePrev","makeActiveByIndex","onScroll","onCellClick","formatCell","styleComputed","_createElementBlock","ref","tabindex","class","onKeydown","_ctx","_withModifiers","_withKeys","_cache","style","_normalizeStyle","_openBlock","_Fragment","_renderList","item","_createBlock","_component_VaTimePickerColumnCell","key","onScrollPassive","onTouchmovePassive","onMousewheelPassive","_createElementVNode","_normalizeClass","onClick","$event","_renderSlot","_normalizeProps","formattedItem","_toDisplayString","_createTextVNode","_hoisted_1"],"sources":["../../../../../../../src/components/va-time-picker/components/VaTimePickerColumn/VaTimePickerColumn.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"rootElement\"\n    tabindex=\"0\"\n    class=\"va-time-picker-column\"\n    @keydown.down.stop.prevent=\"makeActiveNext()\"\n    @keydown.space.stop.prevent=\"makeActiveNext(5)\"\n    @keydown.up.stop.prevent=\"makeActivePrev()\"\n    :style=\"styleComputed\"\n  >\n    <VaTimePickerColumnCell\n      v-for=\"(item, index) in items\" :key=\"item\"\n      @scroll.passive=\"onScroll\"\n      @touchmove.passive=\"onScroll\"\n      @mousewheel.passive=\"onScroll\"\n    >\n      <div\n        class=\"va-time-picker-cell\"\n        :class=\"{ 'va-time-picker-cell--active': index === $props.activeItemIndex }\"\n        @click=\"onCellClick(index)\"\n      >\n        <slot name=\"cell\" v-bind=\"{ item, index, activeItemIndex, items, formattedItem: formatCell(item) }\">\n          {{ formatCell(item) }}\n        </slot>\n      </div>\n    </VaTimePickerColumnCell>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport VaTimePickerColumnCell from '../VaTimePickerColumnCell.vue'\nimport { defineComponent, nextTick, shallowRef, watch, onMounted, PropType, computed } from 'vue'\n\nimport { useElementBackground, useSyncProp, useFocus, useFocusEmits, useTextColor } from '../../../../composables'\nimport debounce from 'lodash/debounce.js'\n\nexport default defineComponent({\n  name: 'VaTimePickerColumn',\n\n  components: { VaTimePickerColumnCell },\n\n  props: {\n    items: { type: Array as PropType<string[] | number[]>, default: () => [] },\n    activeItemIndex: { type: Number, default: 0 },\n    cellHeight: { type: Number, default: 30 },\n  },\n\n  emits: ['item-selected', 'update:activeItemIndex', ...useFocusEmits],\n\n  setup (props, { emit }) {\n    const rootElement = shallowRef<HTMLElement>()\n    const { focus, blur } = useFocus(rootElement, emit)\n    const [syncActiveItemIndex] = useSyncProp('activeItemIndex', props, emit)\n\n    watch(syncActiveItemIndex, (newVal) => { scrollTo(newVal) })\n\n    onMounted(() => scrollTo(syncActiveItemIndex.value, false))\n\n    const scrollTo = (index: number, animated = true) => {\n      nextTick(() => {\n        // see: https://github.com/vuejs/vue-test-utils/issues/319#issuecomment-354667621\n        rootElement.value?.scrollTo?.({\n          behavior: animated ? 'smooth' : 'auto',\n          top: index * props.cellHeight,\n        })\n      })\n    }\n\n    const makeActiveByIndex = (index: number) => {\n      syncActiveItemIndex.value = index\n      nextTick(() => scrollTo(syncActiveItemIndex.value))\n    }\n\n    const makeActiveNext = (times?: number) => {\n      syncActiveItemIndex.value = (syncActiveItemIndex.value + (times || 1)) % props.items.length\n      nextTick(() => scrollTo(syncActiveItemIndex.value))\n    }\n\n    const makeActivePrev = (times?: number) => {\n      syncActiveItemIndex.value = (syncActiveItemIndex.value - (times || 1) + props.items.length) % props.items.length\n      nextTick(() => scrollTo(syncActiveItemIndex.value))\n    }\n\n    const onCellClick = (index: number) => {\n      syncActiveItemIndex.value = index\n    }\n\n    const formatCell = (n: number | string): string => {\n      if (!Number.isInteger(n)) { return n as string }\n\n      return n < 10 ? `0${n}` : `${n}`\n    }\n\n    const { background } = useElementBackground(rootElement)\n    const { textColorComputed } = useTextColor(background)\n\n    const styleComputed = computed(() => ({\n      color: textColorComputed.value,\n    }))\n    const getIndex = () => {\n      const scrollTop = rootElement.value!.scrollTop\n      const calculatedIndex = Math.max(\n        (scrollTop - scrollTop % props.cellHeight) / props.cellHeight,\n        scrollTop / props.cellHeight,\n      )\n\n      if (syncActiveItemIndex.value * props.cellHeight < scrollTop) {\n        return Math.ceil(calculatedIndex)\n      } else if (syncActiveItemIndex.value * props.cellHeight > scrollTop) {\n        return Math.floor(calculatedIndex)\n      } else {\n        return Math.round(calculatedIndex)\n      }\n    }\n\n    const onScroll = debounce(() => {\n      if (rootElement.value && syncActiveItemIndex.value !== -1) {\n        syncActiveItemIndex.value = getIndex()\n      }\n    }, 200)\n\n    return {\n      rootElement,\n\n      makeActiveNext,\n      makeActivePrev,\n      makeActiveByIndex,\n      onScroll,\n\n      onCellClick,\n      formatCell,\n\n      styleComputed,\n\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n@import '../../../../styles/resources';\n\n@mixin hiddenYScroll {\n  overflow-y: scroll;\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n  &::-webkit-scrollbar { /* WebKit */\n    display: none;\n  }\n}\n\n.va-time-picker-column {\n  @include hiddenYScroll();\n\n  height: 100%;\n  border-right: var(--va-time-picker-column-border-right);\n\n  &::before,\n  &::after {\n    content: \"\";\n    display: block;\n    height: var(--va-time-picker-column-gap-height);\n    width: 100%;\n  }\n\n  &:last-child {\n    border-right: 0;\n  }\n\n  .va-time-picker-cell {\n    height: var(--va-time-picker-cell-height);\n    line-height: var(--va-time-picker-cell-height);\n    width: var(--va-time-picker-cell-width);\n    text-align: center;\n    cursor: var(--va-time-picker-cell-cursor);\n    user-select: none;\n\n    &--active {\n      position: relative;\n      color: var(--va-time-picker-cell-active-color);\n      z-index: 0;\n\n      &::before {\n        background: var(--va-time-picker-cell-active-background);\n        position: absolute;\n        height: 100%;\n        width: 100%;\n        left: 0;\n        right: 0;\n        content: '';\n        z-index: -1;\n        opacity: var(--va-time-picker-cell-active-background-opacity);\n      }\n    }\n\n    &:hover {\n      background: var(--va-time-picker-cell-background-color-hover);\n    }\n  }\n\n  &:focus-visible {\n    .va-time-picker-cell {\n      &--active {\n        @include focus-outline($radius: 4px, $offset: -2px);\n      }\n    }\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}