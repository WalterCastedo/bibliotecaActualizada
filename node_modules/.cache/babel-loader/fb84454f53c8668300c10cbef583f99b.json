{"ast":null,"code":"import { ref, onMounted, onBeforeUnmount } from \"vue\";\nconst useFocusEmits = [\"focus\", \"blur\"];\n\nfunction useFocus(el, emit) {\n  const isFocused = ref(false);\n\n  const onFocus = e => {\n    isFocused.value = true;\n    emit == null ? void 0 : emit(\"focus\", e);\n  };\n\n  const onBlur = e => {\n    isFocused.value = false;\n    emit == null ? void 0 : emit(\"blur\", e);\n  };\n\n  const focus = () => {\n    var _a;\n\n    (_a = el == null ? void 0 : el.value) == null ? void 0 : _a.focus();\n  };\n\n  const blur = () => {\n    var _a;\n\n    (_a = el == null ? void 0 : el.value) == null ? void 0 : _a.blur();\n  };\n\n  let element;\n  onMounted(() => {\n    var _a, _b;\n\n    element = (_b = (_a = el == null ? void 0 : el.value) == null ? void 0 : _a.$el) != null ? _b : el == null ? void 0 : el.value;\n\n    if (element) {\n      element.addEventListener(\"focus\", onFocus);\n      element.addEventListener(\"blur\", onBlur);\n    }\n  });\n  onBeforeUnmount(() => {\n    if (element) {\n      element.removeEventListener(\"focus\", onFocus);\n      element.removeEventListener(\"blur\", onBlur);\n    }\n  });\n  return {\n    isFocused,\n    onFocus,\n    onBlur,\n    focus,\n    blur\n  };\n}\n\nexport { useFocusEmits as a, useFocus as u };","map":{"version":3,"mappings":";AAEa,sBAAgB,CAAC,OAAD,EAAU,MAAV,CAAhB;;AAEN,kBACLA,EADK,EAELC,IAFK,EAGL;EACM,kBAAYC,IAAI,KAAJ,CAAZ;;EAEA,gBAAWC,CAAD,IAAe;IAC7BC,UAAUC,KAAV,GAAkB,IAAlB;IACAJ,6BAAO,OAAP,EAAgBE,CAAhB;EAAiB,CAFb;;EAKA,eAAUA,CAAD,IAAe;IAC5BC,UAAUC,KAAV,GAAkB,KAAlB;IACAJ,6BAAO,MAAP,EAAeE,CAAf;EAAgB,CAFZ;;EAKN,MAAMG,QAAQ,MAAY;;;IACxB,+BAAID,KAAJ,wBAAWC,KAAX;EAAiB,CADnB;;EAIA,MAAMC,OAAO,MAAY;;;IACvB,+BAAIF,KAAJ,wBAAWE,IAAX;EAAgB,CADlB;;EAII;EACJC,UAAU,MAAM;;;IACHC,+CAAIJ,KAAJ,wBAAmBK,GAAnB,iBAA0BV,yBAAIK,KAA9B;;IACX,IAAII,OAAJ,EAAa;MACHA,yBAAiB,OAAjB,EAA0BE,OAA1B;MACAF,yBAAiB,MAAjB,EAAyBG,MAAzB;IACV;EACD,CAND;EAOAC,gBAAgB,MAAM;IACpB,IAAIJ,OAAJ,EAAa;MACHA,4BAAoB,OAApB,EAA6BE,OAA7B;MACAF,4BAAoB,MAApB,EAA4BG,MAA5B;IACV;EACD,CALD;EAOO;IACLR,SADK;IAELO,OAFK;IAGLC,MAHK;IAILN,KAJK;IAKLC;EALK;AAOT","names":["el","emit","ref","e","isFocused","value","focus","blur","onMounted","element","$el","onFocus","onBlur","onBeforeUnmount"],"sources":["../../../../src/composables/useFocus.ts"],"sourcesContent":["import { ref, onMounted, onBeforeUnmount, Ref } from 'vue'\n\nexport const useFocusEmits = ['focus', 'blur']\n\nexport function useFocus (\n  el?: Ref<HTMLElement | null | undefined>,\n  emit?: (event: 'focus' | 'blur', e?: Event) => void,\n) {\n  const isFocused = ref(false)\n\n  const onFocus = (e?: Event) => {\n    isFocused.value = true\n    emit?.('focus', e)\n  }\n\n  const onBlur = (e?: Event) => {\n    isFocused.value = false\n    emit?.('blur', e)\n  }\n\n  const focus = (): void => {\n    el?.value?.focus()\n  }\n\n  const blur = (): void => {\n    el?.value?.blur()\n  }\n\n  let element: any\n  onMounted(() => {\n    element = (el?.value as any)?.$el ?? el?.value\n    if (element) {\n      element.addEventListener('focus', onFocus)\n      element.addEventListener('blur', onBlur)\n    }\n  })\n  onBeforeUnmount(() => {\n    if (element) {\n      element.removeEventListener('focus', onFocus)\n      element.removeEventListener('blur', onBlur)\n    }\n  })\n\n  return {\n    isFocused,\n    onFocus,\n    onBlur,\n    focus,\n    blur,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}