{"ast":null,"code":"import { a as isNil_1 } from \"../../../../vendor.js\";\nimport { d as defaultParseDateFunction } from \"./input-text-parser.js\";\n\nconst isRange = date => {\n  return typeof date === \"object\" && (\"start\" in date || \"end\" in date);\n};\n\nconst parseSingleDate = date => typeof date === \"string\" ? defaultParseDateFunction(date) : new Date(date);\n\nconst parseModelValue = date => {\n  if (Array.isArray(date)) {\n    return date.map(parseSingleDate);\n  }\n\n  if (isRange(date)) {\n    return {\n      start: isNil_1(date.start) ? date.start : parseSingleDate(date.start),\n      end: isNil_1(date.end) ? date.end : parseSingleDate(date.end)\n    };\n  }\n\n  return parseSingleDate(date);\n};\n\nexport { isRange as i, parseModelValue as p };","map":{"version":3,"mappings":";;;AAMa,gBAAWA,IAAD,IAAsE;EAC3F,OAAO,OAAOA,IAAP,KAAgB,QAAhB,KAA6B,WAAWA,IAAX,IAAmB,SAASA,IAAzD,CAAP;AACF,CAFa;;AAIA,wBAAmBA,IAAD,IAAyB,OAAOA,IAAP,KAAgB,QAAhB,GACpDC,yBAAyBD,IAAzB,CADoD,GAEpD,IAAIE,IAAJ,CAASF,IAAT,CAFS;;AAIA,wBAAmBA,IAAD,IAAqD;EAC9E,UAAMG,OAAN,CAAcH,IAAd,GAAqB;IAChB,YAAKI,GAAL,CAASC,eAAT;EACT;;EAEI,YAAQL,IAAR,GAAe;IACV;MACLM,OAAOC,QAAMP,KAAKM,KAAXC,IAAoBP,KAAKM,KAAzBC,GAAiCF,gBAAgBL,KAAKM,KAArB,CADnC;MAELE,KAAKD,QAAMP,KAAKQ,GAAXD,IAAkBP,KAAKQ,GAAvBD,GAA6BF,gBAAgBL,KAAKQ,GAArB;IAF7B;EAIT;;EAEA,OAAOH,gBAAgBL,IAAhB,CAAP;AACF,CAba","names":["date","defaultParseDateFunction","Date","isArray","map","parseSingleDate","start","isNil","end"],"sources":["../../../../../../src/components/va-date-input/hooks/model-value-parser.ts"],"sourcesContent":["import isNil from 'lodash/isNil'\n\nimport { DatePickerModelValue } from '../../va-date-picker/types'\nimport { defaultParseDateFunction } from './input-text-parser'\nimport { DateInputRange, DateInputModelValue, DateInputDate } from '../types'\n\nexport const isRange = (date: DateInputModelValue): date is DateInputRange<DateInputDate> => {\n  return typeof date === 'object' && ('start' in date || 'end' in date)\n}\n\nexport const parseSingleDate = (date: DateInputDate) => typeof date === 'string'\n  ? defaultParseDateFunction(date)\n  : new Date(date)\n\nexport const parseModelValue = (date: DateInputModelValue): DatePickerModelValue => {\n  if (Array.isArray(date)) {\n    return date.map(parseSingleDate)\n  }\n\n  if (isRange(date)) {\n    return {\n      start: isNil(date.start) ? date.start : parseSingleDate(date.start),\n      end: isNil(date.end) ? date.end : parseSingleDate(date.end),\n    }\n  }\n\n  return parseSingleDate(date!)\n}\n"]},"metadata":{},"sourceType":"module"}