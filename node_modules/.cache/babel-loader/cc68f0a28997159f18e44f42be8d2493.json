{"ast":null,"code":"import { isRef, watch, unref } from \"vue\";\nimport { d as debounce_1 } from \"../../vendor.js\";\n\nconst useDebounceFn = timeout => {\n  let callback = null;\n\n  const createDebounced = () => {\n    return debounce_1(() => {\n      callback == null ? void 0 : callback();\n      callback = null;\n    }, unref(timeout));\n  };\n\n  let debounced = createDebounced();\n\n  if (isRef(timeout)) {\n    watch(timeout, () => {\n      debounced = createDebounced();\n    });\n  }\n\n  return {\n    debounced: cb => {\n      callback = cb;\n      debounced();\n    },\n    cancel: () => debounced.cancel()\n  };\n};\n\nexport { useDebounceFn as u };","map":{"version":3,"mappings":";;;AAuBa,sBAAiBA,OAAD,IAAmC;EAC9D,IAAIC,WAAgC,IAApC;;EACA,MAAMC,kBAAkB,MAAM;IAC5B,OAAOC,WAAS,MAAM;MACTF;MACAA;IAAA,CAFNE,EAGJC,MAAMJ,OAAN,CAHIG,CAAP;EAGiB,CAJnB;;EAOA,IAAIE,YAAYH,iBAAhB;;EAEI,UAAMF,OAAN,GAAgB;IAClBM,MAAMN,OAAN,EAAe,MAAM;MAAEK,YAAYH,iBAAZ;IAA+B,CAAtD;EACF;;EAEO;IAELG,WAAYE,EAAD,IAAsB;MAAaN;MAAcI;IAAE,CAFzD;IAGLG,QAAQ,MAAMH,UAAUG,MAAV;EAHT;AAKT,CApBa","names":["timeout","callback","createDebounced","debounce","unref","debounced","watch","cb","cancel"],"sources":["../../../../src/composables/useDebounce.ts"],"sourcesContent":["import { isRef, Ref, unref, watch } from 'vue'\nimport debounce from 'lodash/debounce.js'\n\nexport const useDebounce = <T>(onUpdate: () => any, timeout: Ref<number> | number) => {\n  const createDebounced = () => {\n    return debounce(() => {\n      onUpdate()\n    }, unref(timeout))\n  }\n\n  let debounced = createDebounced()\n\n  if (isRef(timeout)) {\n    watch(timeout, () => { debounced = createDebounced() })\n  }\n\n  return {\n    // todo check if we need to create proxy here\n    debounced,\n  }\n}\n\n/** Used for debounced callbacks. Can be used to show cb near debounce call in code structure. */\nexport const useDebounceFn = (timeout: Ref<number> | number) => {\n  let callback: (() => void) | null = null\n  const createDebounced = () => {\n    return debounce(() => {\n      callback?.()\n      callback = null\n    }, unref(timeout))\n  }\n\n  let debounced = createDebounced()\n\n  if (isRef(timeout)) {\n    watch(timeout, () => { debounced = createDebounced() })\n  }\n\n  return {\n    // todo check if we need to create proxy here\n    debounced: (cb: (() => void)) => { callback = cb; debounced() },\n    cancel: () => debounced.cancel(),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}