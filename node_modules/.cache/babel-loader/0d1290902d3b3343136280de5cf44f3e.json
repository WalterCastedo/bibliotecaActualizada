{"ast":null,"code":"import { ref, computed, watch } from \"vue\";\n\nfunction useAnimationName(props, rows) {\n  const animationType = ref(\"shuffle\");\n  const animationName = computed(() => props.animated ? `table-transition-${animationType.value}` : \"\");\n  const oldRowsLength = ref(rows.value.length);\n  const isDifferentRowLength = computed(() => rows.value.length !== oldRowsLength.value);\n  watch(rows, (newRows, oldRows) => {\n    const hasRows = !!(newRows.length && oldRows.length);\n    animationType.value = newRows.length > 50 || isDifferentRowLength.value && hasRows ? \"fade\" : \"shuffle\";\n    oldRowsLength.value = newRows.length;\n  });\n  watch(() => props.currentPage, () => {\n    if (!isDifferentRowLength.value) {\n      animationType.value = \"shuffle\";\n    }\n  });\n  return animationName;\n}\n\nexport { useAnimationName as u };","map":{"version":3,"mappings":";;AAWA,0BACEA,KADF,EAEEC,IAFF,EAGE;EACM,sBAAgBC,IAAmB,SAAnB,CAAhB;EAEA,sBAAgBC,SAAS,MAAMH,MAAMI,QAAN,GAAiB,oBAAoBC,cAAcC,OAAnD,GAA6D,EAA5E,CAAhB;EAEN,MAAMC,gBAAgBL,IAAID,KAAKK,KAAL,CAAWE,MAAf,CAAtB;EACA,MAAMC,uBAAuBN,SAAS,MAAMF,KAAKK,KAAL,CAAWE,MAAX,KAAsBD,cAAcD,KAAnD,CAA7B;EAEMI,YAAM,CAACC,OAAD,EAAUC,OAAV,KAAsB;IAChC,MAAMC,UAAU,CAAC,EAAEF,QAAQH,MAAR,IAAkBI,QAAQJ,MAA5B,CAAjB;IAEAH,cAAcC,KAAd,GAAsBK,QAAQH,MAAR,GAAiB,EAAjB,IAAwBC,qBAAqBH,KAArB,IAA8BO,OAAtD,GAClB,MADkB,GAElB,SAFJ;IAIAN,cAAcD,KAAd,GAAsBK,QAAQH,MAA9B;EACD,CARK;EAUAE,YAAMV,MAAMc,WAAZ,EAAyB,MAAM;IAC/B,KAACL,qBAAqBH,KAAtB,EAA6B;MAC/BD,cAAcC,KAAd,GAAsB,SAAtB;IACF;EACD,CAJK;EAMC;AACT","names":["props","rows","ref","computed","animated","animationType","value","oldRowsLength","length","isDifferentRowLength","watch","newRows","oldRows","hasRows","currentPage"],"sources":["../../../../../../src/components/va-data-table/hooks/useAnimationName.ts"],"sourcesContent":["import { computed, Ref, ref, watch } from 'vue'\n\nimport type { DataTableRow } from '../types'\n\ntype AnimationName = 'shuffle' | 'fade'\n\ninterface useAnimationNameProps {\n  currentPage: number | undefined\n  animated: boolean\n}\n\nexport default function useAnimationName (\n  props: useAnimationNameProps,\n  rows: Ref<DataTableRow[]>,\n) {\n  const animationType = ref<AnimationName>('shuffle')\n\n  const animationName = computed(() => props.animated ? `table-transition-${animationType.value}` : '')\n\n  const oldRowsLength = ref(rows.value.length)\n  const isDifferentRowLength = computed(() => rows.value.length !== oldRowsLength.value)\n\n  watch(rows, (newRows, oldRows) => {\n    const hasRows = !!(newRows.length && oldRows.length)\n\n    animationType.value = newRows.length > 50 || (isDifferentRowLength.value && hasRows)\n      ? 'fade'\n      : 'shuffle'\n\n    oldRowsLength.value = newRows.length\n  })\n\n  watch(() => props.currentPage, () => {\n    if (!isDifferentRowLength.value) {\n      animationType.value = 'shuffle'\n    }\n  })\n\n  return animationName\n}\n"]},"metadata":{},"sourceType":"module"}