{"ast":null,"code":"const getTopCoordinate = element => element.offsetTop;\n\nconst getBottomCoordinate = element => element.offsetTop + element.offsetHeight;\n\nconst getCenterCoordinate = element => element.offsetTop + element.offsetHeight / 2;\n\nconst getScrollTop = (element, scrollTarget, verticalAlignment) => {\n  const viewHeight = scrollTarget.offsetHeight;\n  const currentPosition = scrollTarget.scrollTop;\n  const top = getTopCoordinate(element) - scrollTarget.offsetTop;\n  const center = getCenterCoordinate(element) - scrollTarget.offsetTop;\n  const bottom = getBottomCoordinate(element) - scrollTarget.offsetTop;\n\n  if (verticalAlignment === \"start\") {\n    return top;\n  }\n\n  if (verticalAlignment === \"end\") {\n    return bottom - viewHeight;\n  }\n\n  if (verticalAlignment === \"center\") {\n    return center - viewHeight / 2;\n  }\n\n  if (verticalAlignment === \"any\") {\n    if (top - currentPosition < 0) {\n      return top;\n    }\n\n    if (bottom - currentPosition > viewHeight) {\n      return bottom - viewHeight;\n    }\n  }\n};\n\nconst scrollToElement = (element, options = {\n  scrollTarget: element.parentElement,\n  verticalAlignment: \"any\",\n  smooth: false\n}) => {\n  const scrollTarget = options.scrollTarget || element.parentElement;\n  const top = getScrollTop(element, scrollTarget, options.verticalAlignment);\n\n  if (top === void 0) {\n    return;\n  }\n\n  scrollTarget.scroll({\n    top,\n    behavior: options.smooth ? \"smooth\" : \"auto\"\n  });\n};\n\nexport { scrollToElement as s };","map":{"version":3,"mappings":"AAAA,MAAMA,mBAAoBC,OAAD,IAA0BA,QAAQC,SAA3D;;AACA,MAAMC,sBAAuBF,OAAD,IAA0BA,QAAQC,SAAR,GAAoBD,QAAQG,YAAlF;;AACA,MAAMC,sBAAuBJ,OAAD,IAA0BA,QAAQC,SAAR,GAAoBD,QAAQG,YAAR,GAAuB,CAAjG;;AAEA,MAAME,eAAe,CAACL,OAAD,EAAuBM,YAAvB,EAAkDC,iBAAlD,KAA6G;EAChI,MAAMC,aAAaF,aAAaH,YAAhC;EACA,MAAMM,kBAAkBH,aAAaI,SAArC;EACA,MAAMC,MAAMZ,iBAAiBC,OAAjB,IAA4BM,aAAaL,SAArD;EACA,MAAMW,SAASR,oBAAoBJ,OAApB,IAA+BM,aAAaL,SAA3D;EACA,MAAMY,SAASX,oBAAoBF,OAApB,IAA+BM,aAAaL,SAA3D;;EAEA,IAAIM,sBAAsB,OAA1B,EAAmC;IAC1B;EACT;;EAEA,IAAIA,sBAAsB,KAA1B,EAAiC;IAC/B,OAAOM,SAASL,UAAhB;EACF;;EAEA,IAAID,sBAAsB,QAA1B,EAAoC;IAClC,OAAOK,SAASJ,aAAa,CAA7B;EACF;;EAEA,IAAID,sBAAsB,KAA1B,EAAiC;IAC3B,UAAME,eAAN,GAAwB,CAAxB,EAA2B;MACtB;IACT;;IAEI,aAASA,eAAT,GAA2BD,UAA3B,EAAuC;MACzC,OAAOK,SAASL,UAAhB;IACF;EACF;AACF,CA5BA;;AAiCa,wBAAkB,CAACR,OAAD,EAAuBc,UAIlD;EACFR,cAAcN,QAAQe,aADpB;EAEFR,mBAAmB,KAFjB;EAGFS,QAAQ;AAHN,CAJ2B,KAQzB;EACE,qBAAeF,QAAQR,YAAR,IAAwBN,QAAQe,aAA/C;EAEN,MAAMJ,MAAMN,aAAaL,OAAb,EAAsBM,YAAtB,EAAoCQ,QAAQP,iBAA5C,CAAZ;;EAEA,IAAII,QAAQ,MAAZ,EAAuB;IAAE;EAAO;;EAEhCL,aAAaW,MAAb,CAAoB;IAClBN,GADkB;IAElBO,UAAUJ,QAAQE,MAAR,GAAiB,QAAjB,GAA4B;EAFpB,CAApB;AAIF,CAnBa","names":["getTopCoordinate","element","offsetTop","getBottomCoordinate","offsetHeight","getCenterCoordinate","getScrollTop","scrollTarget","verticalAlignment","viewHeight","currentPosition","scrollTop","top","center","bottom","options","parentElement","smooth","scroll","behavior"],"sources":["../../../../src/utils/scroll-to-element.ts"],"sourcesContent":["const getTopCoordinate = (element: HTMLElement) => element.offsetTop\nconst getBottomCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight\nconst getCenterCoordinate = (element: HTMLElement) => element.offsetTop + element.offsetHeight / 2\n\nconst getScrollTop = (element: HTMLElement, scrollTarget: HTMLElement, verticalAlignment?: 'start' | 'end' | 'center' | 'any') => {\n  const viewHeight = scrollTarget.offsetHeight\n  const currentPosition = scrollTarget.scrollTop\n  const top = getTopCoordinate(element) - scrollTarget.offsetTop\n  const center = getCenterCoordinate(element) - scrollTarget.offsetTop\n  const bottom = getBottomCoordinate(element) - scrollTarget.offsetTop\n\n  if (verticalAlignment === 'start') {\n    return top\n  }\n\n  if (verticalAlignment === 'end') {\n    return bottom - viewHeight\n  }\n\n  if (verticalAlignment === 'center') {\n    return center - viewHeight / 2\n  }\n\n  if (verticalAlignment === 'any') {\n    if (top - currentPosition < 0) {\n      return top\n    }\n\n    if (bottom - currentPosition > viewHeight) {\n      return bottom - viewHeight\n    }\n  }\n}\n\n/**\n * @param options.scrollTarget - element that will be scrolled\n */\nexport const scrollToElement = (element: HTMLElement, options: {\n  scrollTarget?: HTMLElement,\n  verticalAlignment?: 'start' | 'end' | 'center' | 'any',\n  smooth?: boolean,\n} = {\n  scrollTarget: element.parentElement!,\n  verticalAlignment: 'any',\n  smooth: false,\n}) => {\n  const scrollTarget = options.scrollTarget || element.parentElement!\n\n  const top = getScrollTop(element, scrollTarget, options.verticalAlignment)\n\n  if (top === undefined) { return }\n\n  scrollTarget.scroll({\n    top: top,\n    behavior: options.smooth ? 'smooth' : 'auto',\n  })\n}\n"]},"metadata":{},"sourceType":"module"}