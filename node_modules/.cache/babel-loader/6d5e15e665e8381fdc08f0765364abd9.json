{"ast":null,"code":"import { computed } from \"vue\";\n\nconst getMonthDaysCount = (year, month) => new Date(year, month + 1, 0).getDate();\n\nconst getMonthStartWeekday = (year, month) => new Date(year, month, 1).getDay();\n\nconst getNumbersArray = length => Array.from(Array(length).keys()).map(k => k + 1);\n\nconst useVaDatePickerCalendar = (view, options) => {\n  const CALENDAR_ROWS_COUNT = 6;\n\n  const localizeWeekday = weekdayNumber => {\n    var _a;\n\n    if (options && ((_a = options.firstWeekday) == null ? void 0 : _a.value) === \"Monday\") {\n      return weekdayNumber === 0 ? 6 : weekdayNumber - 1;\n    }\n\n    return weekdayNumber;\n  };\n\n  const currentMonthStartWeekday = computed(() => localizeWeekday(getMonthStartWeekday(view.value.year, view.value.month)));\n\n  const getPreviousDates = () => {\n    if (currentMonthStartWeekday.value === 0) {\n      return [];\n    }\n\n    const prevMonthDaysCount = getMonthDaysCount(view.value.year, view.value.month - 1);\n    const prevMonthDays = getNumbersArray(prevMonthDaysCount);\n    return prevMonthDays.slice(-currentMonthStartWeekday.value).map(d => new Date(view.value.year, view.value.month - 1, d));\n  };\n\n  const getCurrentDates = () => {\n    const currentMonthDays = getNumbersArray(getMonthDaysCount(view.value.year, view.value.month));\n    return currentMonthDays.map(d => new Date(view.value.year, view.value.month, d));\n  };\n\n  const prevAndCurrentDays = computed(() => [...getPreviousDates(), ...getCurrentDates()]);\n  const currentMonthEndIndex = computed(() => prevAndCurrentDays.value.length);\n  const calendarDates = computed(() => {\n    const days = prevAndCurrentDays.value;\n    const daysRemaining = 7 * CALENDAR_ROWS_COUNT - days.length;\n    const nextMonthDaysCount = getMonthDaysCount(view.value.year, view.value.month + 1);\n    const nextMonthDays = getNumbersArray(nextMonthDaysCount);\n    return [...days, ...nextMonthDays.slice(0, daysRemaining).map(d => new Date(view.value.year, view.value.month + 1, d))];\n  });\n  return {\n    calendarDates,\n    currentMonthStartIndex: currentMonthStartWeekday,\n    currentMonthEndIndex\n  };\n};\n\nexport { useVaDatePickerCalendar as u };","map":{"version":3,"mappings":"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","names":["year","month","Date","getDate","getDay","getNumbersArray","length","Array","from","keys","map","k","view","options","CALENDAR_ROWS_COUNT","weekdayNumber","firstWeekday","value","currentMonthStartWeekday","computed","localizeWeekday","getMonthStartWeekday","getPreviousDates","getMonthDaysCount","prevMonthDaysCount","prevMonthDays","slice","d","getCurrentDates","currentMonthDays","currentMonthEndIndex","prevAndCurrentDays","days","nextMonthDaysCount","nextMonthDays","daysRemaining","calendarDates","currentMonthStartIndex"],"sources":["../../../../../../../src/components/va-date-picker/components/VaDayPicker/va-date-picker-calendar-hook.ts"],"sourcesContent":["import { computed, Ref } from 'vue'\n\nimport { DatePickerView } from '../../types'\n\n/** Returns last day of previous month */\nexport const getMonthDaysCount = (year: number, month: number): number => new Date(year, month + 1, 0).getDate()\n\nexport const getMonthStartWeekday = (year: number, month: number) => new Date(year, month, 1).getDay()\n\n/** Returns array from 1 to length */\nexport const getNumbersArray = (length: number) => Array.from(Array(length).keys()).map((k) => k + 1)\n\nexport const useVaDatePickerCalendar = (view: Ref<DatePickerView>, options?: { firstWeekday?: Ref<'Monday' | 'Sunday'> }) => {\n  const CALENDAR_ROWS_COUNT = 6 // Need 6 rows if first day of a month is Saturday and the last day is Monday 31th.\n\n  const localizeWeekday = (weekdayNumber: number) => {\n    if (options && options.firstWeekday?.value === 'Monday') {\n      // Set Sunday as 7th day of the week and Monday as first day of the week.\n      return weekdayNumber === 0 ? 6 : weekdayNumber - 1\n    }\n\n    return weekdayNumber\n  }\n\n  const currentMonthStartWeekday = computed(() => localizeWeekday(getMonthStartWeekday(view.value.year, view.value.month)))\n\n  const getPreviousDates = () => {\n    if (currentMonthStartWeekday.value === 0) { return [] }\n\n    const prevMonthDaysCount = getMonthDaysCount(view.value.year, view.value.month - 1)\n    const prevMonthDays: number[] = getNumbersArray(prevMonthDaysCount)\n\n    return prevMonthDays\n      .slice(-currentMonthStartWeekday.value)\n      .map((d) => new Date(view.value.year, view.value.month - 1, d))\n  }\n\n  const getCurrentDates = () => {\n    const currentMonthDays: number[] = getNumbersArray(getMonthDaysCount(view.value.year, view.value.month))\n\n    return currentMonthDays.map((d) => new Date(view.value.year, view.value.month, d))\n  }\n\n  const prevAndCurrentDays = computed(() => [...getPreviousDates(), ...getCurrentDates()])\n  const currentMonthEndIndex = computed(() => prevAndCurrentDays.value.length)\n\n  const calendarDates = computed(() => {\n    const days = prevAndCurrentDays.value\n\n    const daysRemaining = 7 * CALENDAR_ROWS_COUNT - days.length\n\n    const nextMonthDaysCount = getMonthDaysCount(view.value.year, view.value.month + 1)\n    const nextMonthDays: number[] = getNumbersArray(nextMonthDaysCount)\n\n    return [\n      ...days,\n      ...nextMonthDays\n        .slice(0, daysRemaining)\n        .map((d) => new Date(view.value.year, view.value.month + 1, d)),\n    ]\n  })\n\n  return { calendarDates, currentMonthStartIndex: currentMonthStartWeekday, currentMonthEndIndex }\n}\n"]},"metadata":{},"sourceType":"module"}