{"ast":null,"code":"import { getCurrentInstance, shallowRef, onMounted, onUpdated, onBeforeUnmount } from \"vue\";\n\nconst useTemplateRef = key => {\n  const vm = getCurrentInstance();\n  const el = shallowRef();\n\n  const updateEl = () => {\n    var _a;\n\n    el.value = (_a = vm.proxy) == null ? void 0 : _a.$refs[key];\n  };\n\n  onMounted(updateEl);\n  onUpdated(updateEl);\n  onBeforeUnmount(updateEl);\n  return el;\n};\n\nexport { useTemplateRef as u };","map":{"version":3,"mappings":";;AAEa,uBAAkBA,GAAD,IAAiB;EAC7C,MAAMC,KAAKC,oBAAX;EACA,MAAMC,KAAKC,YAAX;;EAEA,MAAMC,WAAW,MAAM;;;IAClBF,WAAQ,SAAGG,KAAH,wBAAUC,KAAV,CAAgBP,GAAhB,CAAR;EAAwB,CAD7B;;EAIAQ,UAAUH,QAAV;EACAI,UAAUJ,QAAV;EACAK,gBAAgBL,QAAhB;EAEO;AACT,CAba","names":["key","vm","getCurrentInstance","el","shallowRef","updateEl","proxy","$refs","onMounted","onUpdated","onBeforeUnmount"],"sources":["../../../../src/composables/useTemplateRef.ts"],"sourcesContent":["import { getCurrentInstance, onBeforeUnmount, onMounted, onUpdated, shallowRef } from 'vue'\n\nexport const useTemplateRef = (key: string) => {\n  const vm = getCurrentInstance()!\n  const el = shallowRef<HTMLElement>()\n\n  const updateEl = () => {\n    el.value = vm.proxy?.$refs[key] as HTMLElement\n  }\n\n  onMounted(updateEl)\n  onUpdated(updateEl)\n  onBeforeUnmount(updateEl)\n\n  return el\n}\n"]},"metadata":{},"sourceType":"module"}