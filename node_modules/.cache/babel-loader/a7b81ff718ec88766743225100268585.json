{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { provide, computed, onMounted, watch, inject, ref, onBeforeUnmount } from \"vue\";\nconst AccordionServiceKey = Symbol(\"AccordionService\");\n\nconst useAccordion = (props, state) => {\n  let items = [];\n\n  const onItemMounted = item => {\n    items.push(item);\n  };\n\n  const onItemUnmounted = item => {\n    items = items.filter(i => i !== item);\n  };\n\n  const onItemChanged = changedItem => {\n    state.value = items.map(item => {\n      if (item === changedItem) {\n        return item.state.value;\n      }\n\n      if (!props.multiple) {\n        item.state.value = false;\n      }\n\n      return item.state.value;\n    });\n  };\n\n  provide(AccordionServiceKey, {\n    isInsideAccordion: true,\n    onItemMounted,\n    onItemUnmounted,\n    onItemChanged,\n    props: computed(() => props)\n  });\n\n  const updateItemStates = () => {\n    items.forEach((item, index) => {\n      item.state.value = state.value[index];\n    });\n  };\n\n  onMounted(updateItemStates);\n  watch(state, updateItemStates);\n  return {\n    items\n  };\n};\n\nconst useAccordionItem = state => {\n  const accordion = inject(AccordionServiceKey, {\n    props: ref({\n      inset: void 0,\n      popout: void 0\n    }),\n    onItemChanged: () => void 0,\n    onItemMounted: () => void 0,\n    onItemUnmounted: () => void 0\n  });\n  const item = {\n    state\n  };\n  onMounted(() => accordion.onItemMounted(item));\n  onBeforeUnmount(() => accordion.onItemUnmounted(item));\n  return {\n    accordionProps: accordion.props,\n    toggle: () => {\n      state.value = !state.value;\n      accordion.onItemChanged(item);\n    }\n  };\n};\n\nexport { useAccordionItem as a, useAccordion as u };","map":{"version":3,"mappings":";;AAEa,4BAAsBA,OAAO,kBAAP,CAAtB;;AA0BA,qBAAe,CAACC,KAAD,EAAwBC,KAAxB,KAAkE;EAE5F,IAAIC,QAAyB,EAA7B;;EAEM,sBAAiBC,IAAD,IAAyB;IAAED,MAAME,IAAN,CAAWD,IAAX;EAAe,CAA1D;;EACA,wBAAmBA,IAAD,IAAyB;IAAED,QAAQA,MAAMG,MAAN,CAAcC,CAAD,IAAOA,MAAMH,IAA1B,CAAR;EAAsC,CAAnF;;EACA,sBAAiBI,WAAD,IAAgC;IACpDN,MAAMO,KAAN,GAAcN,MACXO,GADW,CACNN,IAAD,IAAyB;MAC5B,IAAIA,SAASI,WAAb,EAA0B;QACxB,OAAOJ,KAAKF,KAAL,CAAWO,KAAlB;MACF;;MAEI,KAACR,MAAMU,QAAP,EAAiB;QACnBP,KAAKF,KAAL,CAAWO,KAAX,GAAmB,KAAnB;MACF;;MAEA,OAAOL,KAAKF,KAAL,CAAWO,KAAlB;IACD,CAXW,CAAd;EAWG,CAZC;;EAeNG,QAAQC,mBAAR,EAA6B;IAC3BC,mBAAmB,IADQ;IAE3BC,aAF2B;IAG3BC,eAH2B;IAI3BC,aAJ2B;IAK3BhB,OAAOiB,SAAS,MAAMjB,KAAf;EALoB,CAA7B;;EAQA,MAAMkB,mBAAmB,MAAM;IACvBhB,cAAQ,CAACC,IAAD,EAAsBgB,KAAtB,KAAwC;MAC/ChB,WAAMK,KAAN,GAAcP,MAAMO,KAAN,CAAYW,KAAZ,CAAd;IACN,CAFK;EAEL,CAHH;;EAMAC,UAAUF,gBAAV;EACAG,MAAMpB,KAAN,EAAaiB,gBAAb;EAEA,OAAO;IAAEhB;EAAF,CAAP;AACF,CAvCa;;AA6CA,yBAAoBD,KAAD,IAAyC;EACjE,kBAAYqB,OAAwBV,mBAAxB,EAA6C;IAC7DZ,OAAOuB,IAAI;MAAEC,OAAO,MAAT;MAAoBC,QAAQ;IAA5B,CAAJ,CADsD;IAE7DT,eAAe,MAAM,MAFwC;IAG7DF,eAAe,MAAM,MAHwC;IAI7DC,iBAAiB,MAAM;EAJsC,CAA7C,CAAZ;EAOA,aAAO;IAAEd;EAAF,CAAP;EAENmB,UAAU,MAAMM,UAAUZ,aAAV,CAAwBX,IAAxB,CAAhB;EACAwB,gBAAgB,MAAMD,UAAUX,eAAV,CAA0BZ,IAA1B,CAAtB;EAEO;IACLyB,gBAAgBF,UAAU1B,KADrB;IAGL6B,QAAQ,MAAM;MAEN5B,cAAQ,CAACA,MAAMO,KAAf;MACNkB,UAAUV,aAAV,CAAwBb,IAAxB;IACF;EAPK;AAST,CAtBa","names":["Symbol","props","state","items","item","push","filter","i","changedItem","value","map","multiple","provide","AccordionServiceKey","isInsideAccordion","onItemMounted","onItemUnmounted","onItemChanged","computed","updateItemStates","index","onMounted","watch","inject","ref","inset","popout","accordion","onBeforeUnmount","accordionProps","toggle"],"sources":["../../../../../../src/components/va-accordion/hooks/useAccordion.ts"],"sourcesContent":["import { computed, inject, onBeforeUnmount, onMounted, provide, Ref, ref, watch, WritableComputedRef } from 'vue'\n\nexport const AccordionServiceKey = Symbol('AccordionService')\n\nexport interface AccordionItemProps {\n  inset?: boolean,\n  popout?: boolean\n}\n\nexport interface AccordionProps extends AccordionItemProps {\n  modelValue: boolean[],\n  multiple: boolean,\n}\n\nexport interface AccordionItem {\n  state: WritableComputedRef<boolean>\n}\n\nexport interface AccordionInject {\n  onItemMounted: (item: AccordionItem) => void,\n  onItemUnmounted: (item: AccordionItem) => void,\n  onItemChanged: (changedItem: AccordionItem) => void,\n  props: Ref<AccordionItemProps>,\n}\n\n/**\n * @param props\n * @param state array of states of all accordion items */\nexport const useAccordion = (props: AccordionProps, state: WritableComputedRef<boolean[]>) => {\n  /** @notice items are reactive because they have reactive `state` inside */\n  let items: AccordionItem[] = []\n\n  const onItemMounted = (item: AccordionItem) => { items.push(item) }\n  const onItemUnmounted = (item: AccordionItem) => { items = items.filter((i) => i !== item) }\n  const onItemChanged = (changedItem: AccordionItem) => {\n    state.value = items\n      .map((item: AccordionItem) => {\n        if (item === changedItem) {\n          return item.state.value\n        }\n\n        if (!props.multiple) {\n          item.state.value = false\n        }\n\n        return item.state.value\n      })\n  }\n\n  provide(AccordionServiceKey, {\n    isInsideAccordion: true,\n    onItemMounted,\n    onItemUnmounted,\n    onItemChanged,\n    props: computed(() => props),\n  })\n\n  const updateItemStates = () => {\n    items.forEach((item: AccordionItem, index: number) => {\n      item.state.value = state.value[index]\n    })\n  }\n\n  onMounted(updateItemStates)\n  watch(state, updateItemStates)\n\n  return { items }\n}\n\n/**\n * Hook used in items that should react on VaAccordion changes\n * @param state shows if accordion item is open\n */\nexport const useAccordionItem = (state: WritableComputedRef<boolean>) => {\n  const accordion = inject<AccordionInject>(AccordionServiceKey, {\n    props: ref({ inset: undefined, popout: undefined }),\n    onItemChanged: () => undefined,\n    onItemMounted: () => undefined,\n    onItemUnmounted: () => undefined,\n  })\n\n  const item = { state }\n\n  onMounted(() => accordion.onItemMounted(item))\n  onBeforeUnmount(() => accordion.onItemUnmounted(item))\n\n  return {\n    accordionProps: accordion.props,\n\n    toggle: () => {\n      /** Toggle collapse value and notify accordion about it */\n      state.value = !state.value\n      accordion.onItemChanged(item)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}