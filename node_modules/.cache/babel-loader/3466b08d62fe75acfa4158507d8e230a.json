{"ast":null,"code":"import axios from \"axios\";\nexport const RUTA_SERVIDOR_ALUMNOS = process.env.VUE_APP_RUTA_API_ALUMNOS;\nexport const RUTA_SERVIDOR_LIBROS = process.env.VUE_APP_RUTA_API_LIBROS;\nimport { jsPDF } from \"jspdf\";\nimport \"jspdf-autotable\";\nexport default {\n  name: \"ListarPrensa\",\n\n  data() {\n    return {\n      acceso: localStorage.getItem(\"acceso\"),\n      idAdmin: localStorage.getItem(\"id\"),\n      nombrePrensa: \"\",\n      Prensas: [],\n      elementosPorPagina: 10,\n      datosPaginados: [],\n      paginaActual: 1,\n      totalPrensas: [],\n      prensasEditar: {\n        nombre: \"\",\n        id: 0,\n        urlPrensa: \"\",\n        urlImagenPrensa: \"\"\n      }\n    };\n  },\n\n  created: function () {\n    this.consultarPrensa();\n  },\n\n  mounted() {},\n\n  methods: {\n    abrirEnlace(enlace) {\n      window.open(\"http://\" + enlace, \"_blank\");\n    },\n\n    consultarPrensa() {\n      fetch(RUTA_SERVIDOR_LIBROS + \"/prensa\").then(respuesta => respuesta.json()).then(datosRespuesta => {\n        if (typeof datosRespuesta[0].success === \"undefined\") {\n          datosRespuesta.sort((a, b) => {\n            if (a.nombre.toUpperCase() == b.nombre.toUpperCase()) {\n              return 0;\n            }\n\n            if (a.nombre.toUpperCase() > b.nombre.toUpperCase()) {\n              return 1;\n            }\n\n            if (a.nombre.toUpperCase() < b.nombre.toUpperCase()) {\n              return -1;\n            }\n          });\n          this.Prensas = datosRespuesta;\n          console.log(this.Prensas);\n          this.filtrarPrensa();\n        }\n      }).catch(console.log);\n    },\n\n    filtrarPrensa() {\n      this.totalPrensas = [];\n\n      for (let index = 0; index < this.Prensas.length; index++) {\n        if (this.Prensas[index].activo === 1 && this.Prensas[index].nombre.toUpperCase().includes(this.nombrePrensa.toUpperCase())) {\n          this.totalPrensas = this.totalPrensas.concat(this.Prensas[index]);\n        }\n      }\n\n      console.log(this.totalPrensas);\n    },\n\n    eliminar(prensa) {\n      const confirmacion = window.confirm(\"¿Estás seguro de que deseas eliminar este medio de prensa?\");\n\n      if (confirmacion) {\n        axios.put(RUTA_SERVIDOR_LIBROS + \"/prensa/\" + prensa.id, {\n          nombre: prensa.nombre,\n          idEmpleado: parseInt(localStorage.getItem('id')),\n          urlImagenPrensa: prensa.urlImagenPrensa,\n          urlPrensa: prensa.urlPrensa,\n          activo: 0\n        }).then(function (response) {\n          console.log(response);\n          location.reload();\n        }).catch(function (error) {\n          console.log(error); // console.log(this.libro);\n        });\n      }\n    },\n\n    activo(noPoag) {\n      return noPoag === this.paginaActual ? \"active\" : \"\";\n    },\n\n    obtenerPrensa(prensa) {\n      this.prensasEditar.nombre = prensa.nombre;\n      this.prensasEditar.id = prensa.id;\n      this.prensasEditar.urlImagenPrensa = prensa.urlImagenPrensa;\n      this.prensasEditar.urlPrensa = prensa.urlPrensa;\n    },\n\n    actualizar() {\n      if (this.prensasEditar.nombre.trim() === \"\" || this.prensasEditar.urlPrensa.trim() === \"\" || this.prensasEditar.urlImagenPrensa.trim() === \"\") {\n        alert(\"Por favor, complete todos los campos antes de actualizar.\");\n        return;\n      }\n\n      axios.put(RUTA_SERVIDOR_LIBROS + \"/prensa/\" + this.prensasEditar.id, {\n        nombre: this.prensasEditar.nombre,\n        idEmpleado: parseInt(localStorage.getItem('id')),\n        urlImagenPrensa: this.prensasEditar.urlImagenPrensa,\n        urlPrensa: this.prensasEditar.urlPrensa,\n        activo: 1\n      }).then(function (response) {\n        console.log(response);\n        location.reload();\n      }).then(alert(\"El prensa de material bibliotecario se actualizo correctamente\")).catch(function (error) {\n        console.log(error); // console.log(this.libro);\n      });\n    },\n\n    exportarAExcel() {\n      const tabla = document.createElement(\"table\");\n      const tbody = tabla.createTBody(); // Crear una tabla HTML con los datos que deseas exportar\n\n      const cabeceraFila = document.createElement(\"tr\");\n      const cabeceraCelda = document.createElement(\"th\");\n      cabeceraCelda.innerText = \"Prensas de materiales biblotecarios\";\n      cabeceraFila.appendChild(cabeceraCelda);\n      tbody.appendChild(cabeceraFila); // Agregar filas de datos a la tabla\n\n      this.datosPaginados.forEach(prensa => {\n        const fila = tbody.insertRow();\n        const nombreCell = fila.insertCell(0); // 0 es la primera columna\n\n        nombreCell.innerText = prensa.prensa;\n      }); // Crear un archivo Blob para la tabla HTML\n\n      const blob = new Blob([tabla.outerHTML], {\n        type: \"application/vnd.ms-excel\"\n      }); // Crear un enlace para descargar el archivo Excel\n\n      const link = document.createElement(\"a\");\n      link.href = URL.createObjectURL(blob);\n      link.download = \"PrensasMaterial.xls\"; // Simular un clic en el enlace para iniciar la descarga\n\n      link.click();\n    },\n\n    imprimirPrensas() {\n      // Crear un nuevo documento PDF\n      var doc = new jsPDF(); // Obtener la tabla visible\n\n      var table = document.querySelector(\".tableMb\"); //titulo\n\n      doc.setFontSize(16);\n      var title = \"Prensas\";\n      var titleWidth = doc.getStringUnitWidth(title) * doc.internal.getFontSize() / doc.internal.scaleFactor;\n      var pageWidth = doc.internal.pageSize.getWidth();\n      var x = (pageWidth - titleWidth) / 2;\n      doc.text(title, x, 10); // Obtener la tabla visible\n\n      var table = document.querySelector(\".tableMb\"); // Configurar los estilos de la tabla\n\n      var styles = {\n        overflow: \"linebreak\",\n        fontSize: 8,\n        // Tamaño de fuente reducido\n        lineWidth: 0.1,\n        lineColor: [0, 0, 0],\n        // Color de las líneas\n        font: \"helvetica\",\n        fontStyle: \"normal\",\n        halign: \"center\",\n        // Alineación horizontal\n        valign: \"middle\",\n        // Alineación vertical\n        cellPadding: 2,\n        tableWidth: \"auto\",\n        tableBorder: 1,\n        tableLineColor: [0, 0, 0],\n        // Color del borde de la tabla\n        tableFillColor: [255, 255, 255],\n        // Color de fondo de la tabla\n        textColor: 0,\n        cellWidth: \"auto\" // Ajustar el ancho de la celda automáticamente\n\n      }; // Ocultar la última columna (Acción) antes de agregar la tabla al documento PDF\n\n      var actionColumn = table.querySelector(\"th:last-child, td:last-child\");\n\n      if (actionColumn) {\n        actionColumn.style.display = \"none\";\n      } // Agregar la tabla al documento PDF\n\n\n      doc.autoTable({\n        html: table,\n        startY: 20,\n        styles\n      }); // Mostrar la última columna nuevamente\n\n      if (actionColumn) {\n        actionColumn.style.display = \"table-cell\";\n      } // Guardar el PDF\n\n\n      doc.save(\"PrensasMaterial.pdf\");\n    },\n\n    closeModal() {\n      this.$refs.modalCenter.hide();\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAsIA;AACA;AACA;AACA;AACA;AACA;EACAA,oBADA;;EAEAC;IACA;MACAC,sCADA;MAEAC,mCAFA;MAGAC,gBAHA;MAIAC,WAJA;MAKAC,sBALA;MAMAC,kBANA;MAOAC,eAPA;MAQAC,gBARA;MASAC;QACAC,UADA;QAEAC,KAFA;QAGAC,aAHA;QAIAC;MAJA;IATA;EAiBA,CApBA;;EAsBAC;IACA;EACA,CAxBA;;EAyBAC,YAzBA;;EA0BAC;IACAC;MACAC;IACA,CAHA;;IAKAC;MACAC,wCACAC,IADA,CACAC,6BADA,EAEAD,IAFA,CAEAE;QACA;UACAA;YACA;cACA;YACA;;YACA;cACA;YACA;;YACA;cACA;YACA;UACA,CAVA;UAWA;UACAC;UACA;QACA;MACA,CAnBA,EAoBAC,KApBA,CAoBAD,WApBA;IAqBA,CA3BA;;IA6BAE;MACA;;MACA;QACA,IACA,oCACA,2BACAC,WADA,GAEAC,QAFA,CAEA,+BAFA,CAFA,EAKA;UACA;QACA;MACA;;MACAJ;IACA,CA1CA;;IA4CAK;MACA,oCACA,4DADA;;MAIA;QACAC,MACAC,GADA,CACAC,6CADA,EACA;UACAtB,qBADA;UAEAuB,gDAFA;UAGApB,uCAHA;UAIAD,2BAJA;UAKAsB;QALA,CADA,EAQAb,IARA,CAQA;UACAG;UACAW;QACA,CAXA,EAYAV,KAZA,CAYA;UACAD,mBADA,CAEA;QACA,CAfA;MAgBA;IACA,CAnEA;;IAqEAU;MACA;IACA,CAvEA;;IAyEAE;MACA;MACA;MACA;MACA;IAEA,CA/EA;;IAgFAC;MACA,IACA,2CACA,0CADA,IAEA,gDAHA,EAIA;QACAC;QACA;MACA;;MACAR,MACAC,GADA,CACAC,yDADA,EACA;QACAtB,iCADA;QAEAuB,gDAFA;QAGApB,mDAHA;QAIAD,uCAJA;QAKAsB;MALA,CADA,EAQAb,IARA,CAQA;QACAG;QACAW;MACA,CAXA,EAYAd,IAZA,CAaAiB,MACA,gEADA,CAbA,EAiBAb,KAjBA,CAiBA;QACAD,mBADA,CAEA;MACA,CApBA;IAqBA,CA9GA;;IAgHAe;MACA;MACA,kCAFA,CAGA;;MACA;MACA;MACAC;MACAC;MACAC,gCARA,CAUA;;MACA;QACA;QACA,sCAFA,CAEA;;QACAC;MACA,CAJA,EAXA,CAiBA;;MACA;QACAC;MADA,GAlBA,CAsBA;;MACA;MACAC;MACAA,sCAzBA,CA2BA;;MACAA;IACA,CA7IA;;IA8IAC;MACA;MACA,sBAFA,CAIA;;MACA,+CALA,CAMA;;MACAC;MACA;MACA,iBACAA,6DACAA,wBAFA;MAGA;MACA;MACAA,uBAdA,CAeA;;MACA,+CAhBA,CAkBA;;MACA;QACAC,qBADA;QAEAC,WAFA;QAEA;QACAC,cAHA;QAIAC,oBAJA;QAIA;QACAC,iBALA;QAMAC,mBANA;QAOAC,gBAPA;QAOA;QACAC,gBARA;QAQA;QACAC,cATA;QAUAC,kBAVA;QAWAC,cAXA;QAYAC,yBAZA;QAYA;QACAC,+BAbA;QAaA;QACAC,YAdA;QAeAC,iBAfA,CAeA;;MAfA,EAnBA,CAqCA;;MACA;;MACA;QACAC;MACA,CAzCA,CA2CA;;;MACAhB;QAAAiB;QAAAC;QAAAC;MAAA,GA5CA,CA8CA;;MACA;QACAH;MACA,CAjDA,CAmDA;;;MACAhB;IACA,CAnMA;;IAoMAoB;MACA;IACA;;EAtMA;AA1BA","names":["name","data","acceso","idAdmin","nombrePrensa","Prensas","elementosPorPagina","datosPaginados","paginaActual","totalPrensas","prensasEditar","nombre","id","urlPrensa","urlImagenPrensa","created","mounted","methods","abrirEnlace","window","consultarPrensa","fetch","then","respuesta","datosRespuesta","console","catch","filtrarPrensa","toUpperCase","includes","eliminar","axios","put","RUTA_SERVIDOR_LIBROS","idEmpleado","activo","location","obtenerPrensa","actualizar","alert","exportarAExcel","cabeceraCelda","cabeceraFila","tbody","nombreCell","type","link","imprimirPrensas","doc","overflow","fontSize","lineWidth","lineColor","font","fontStyle","halign","valign","cellPadding","tableWidth","tableBorder","tableLineColor","tableFillColor","textColor","cellWidth","actionColumn","html","startY","styles","closeModal"],"sourceRoot":"src/components","sources":["ListarPrensa.vue"],"sourcesContent":["<template class=\"fondo\">\n  <div class=\"row align-items-center\">\n    <div class=\"col\">\n      <div class=\"align-items-center\">\n        <div class=\"form-group text-center\">\n          <label for=\"\">Buscar prensa</label>\n          <br>        <br>\n          <input\n            v-on:keyup=\"filtrarPrensa()\"\n            v-model=\"nombrePrensa\"\n            type=\"text\"\n            class=\"form-control text-center\"\n            placeholder=\"Nombre\"\n          />\n        </div>\n\n        <br>\n        <br />\n        <div class=\"carrusel row\">\n          <div\n         \n            align=\"center\"\n            class=\"listado col-xs-12 col-md-6 col-xl-4\"\n            v-for=\"prensa in totalPrensas\"\n            :key=\"prensa.id\"\n          \n          >\n            <div>\n              <div\n                class=\"icon-container-2\"\n                @click=\"abrirEnlace(prensa.urlPrensa)\"\n                v-bind:style=\"{\n                  backgroundImage: 'url(' + prensa.urlImagenPrensa + ')',\n                  backgroundSize: 'cover',\n                  backgroundPosition: 'center',\n                  height: '300px',\n                  width: '300px',\n                }\"\n              >\n                \n              </div>\n            </div>\n            <div class=\"titulo\" @click=\"abrirEnlace(prensa.urlPrensa)\">\n              {{ prensa.nombre }}\n            </div>\n            <div class=\"autor\" style=\"margin-bottom: 0px;\" @click=\"abrirEnlace(prensa.urlPrensa)\">\n              {{ prensa.urlPrensa }}\n            </div>\n            <div v-if=\"acceso==2\" class=\"row justify-content-center align-items-center\" >\n              <div\n              v-b-modal.modal-center\n                      @click=\"obtenerPrensa(prensa)\"\n                class=\"btn btn-info col-sx-12 col-6\"\n                style=\"width: 140px;\n                margin-right: 10px;\"\n              >\n                Editar\n              </div>\n              <div\n                @click=\"eliminar(prensa)\"\n                class=\"btn btn-danger col-sx-12 col-6\"\n                style=\"width: 140px;\n                margin-left: 10px;\"\n              >\n                Eliminar\n              </div>\n            </div>\n            <br>\n            <br>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <b-modal\n      id=\"modal-center\"\n      ref=\"modalCenter\"\n      centered\n      title=\"Modificar Prensa\"\n      hide-footer\n      hide-close-button\n    >\n      <template #modal-title>\n        <button @click=\"closeModal\" class=\"btn btn-sm btn-danger close-button\">\n          X\n        </button>\n        <h5 class=\"modal-title\">Modificar Prensa</h5>\n      </template>\n      <div class=\"form-group d-flex flex-column\">\n        <label for=\"\">Nombre del medio de Prensa</label>\n        <input\n          v-model=\"prensasEditar.nombre\"\n          type=\"text\"\n          name=\"\"\n          id=\"nombre\"\n          class=\"form-control\"\n          placeholder=\"Nombre\"\n          aria-describedby=\"helpId\"\n        />\n        <br />\n        <label for=\"\">Url del medio de prensa (empezar con www)</label>\n        <input\n          v-model=\"prensasEditar.urlPrensa\"\n          type=\"text\"\n          name=\"\"\n          id=\"urlPrensa\"\n          class=\"form-control\"\n          placeholder=\"Enlace\"\n          aria-describedby=\"helpId\"\n        />\n        <br />\n        <label for=\"\">Url del la imagen de portada (Mejor si es formato cuadrada)</label>\n        <input\n          v-model=\"prensasEditar.urlImagenPrensa\"\n          type=\"text\"\n          name=\"\"\n          id=\"urlImagenPrensa\"\n          class=\"form-control\"\n          placeholder=\"Imagen del medio\"\n          aria-describedby=\"helpId\"\n        />\n        <br />\n        <img :src=\"prensasEditar.urlImagenPrensa\" alt=\"\">\n        \n        <br />\n        <button class=\"btn align-items-center btn-info\" @click=\"actualizar()\">\n          Actualizar datos\n        </button>\n      </div>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nexport const RUTA_SERVIDOR_ALUMNOS = process.env.VUE_APP_RUTA_API_ALUMNOS;\nexport const RUTA_SERVIDOR_LIBROS = process.env.VUE_APP_RUTA_API_LIBROS;\nimport { jsPDF } from \"jspdf\";\nimport \"jspdf-autotable\";\nexport default {\n  name: \"ListarPrensa\",\n  data() {\n    return {\n      acceso: localStorage.getItem(\"acceso\"),\n      idAdmin: localStorage.getItem(\"id\"),\n      nombrePrensa: \"\",\n      Prensas: [],\n      elementosPorPagina: 10,\n      datosPaginados: [],\n      paginaActual: 1,\n      totalPrensas: [],\n      prensasEditar: {\n        nombre: \"\",\n        id: 0,\n        urlPrensa:\"\",\n        urlImagenPrensa:\"\"\n\n      },\n    };\n  },\n\n  created: function () {\n    this.consultarPrensa();\n  },\n  mounted() {},\n  methods: {\n    abrirEnlace(enlace) {\n      window.open(\"http://\" + enlace, \"_blank\");\n    },\n\n    consultarPrensa() {\n      fetch(RUTA_SERVIDOR_LIBROS + \"/prensa\")\n        .then((respuesta) => respuesta.json())\n        .then((datosRespuesta) => {\n          if (typeof datosRespuesta[0].success === \"undefined\") {\n            datosRespuesta.sort((a, b) => {\n              if (a.nombre.toUpperCase() == b.nombre.toUpperCase()) {\n                return 0;\n              }\n              if (a.nombre.toUpperCase() > b.nombre.toUpperCase()) {\n                return 1;\n              }\n              if (a.nombre.toUpperCase() < b.nombre.toUpperCase()) {\n                return -1;\n              }\n            });\n            this.Prensas = datosRespuesta;\n            console.log(this.Prensas);\n            this.filtrarPrensa();\n          }\n        })\n        .catch(console.log);\n    },\n\n    filtrarPrensa() {\n      this.totalPrensas = [];\n      for (let index = 0; index < this.Prensas.length; index++) {\n        if (\n          this.Prensas[index].activo === 1 &&\n          this.Prensas[index].nombre\n            .toUpperCase()\n            .includes(this.nombrePrensa.toUpperCase())\n        ) {\n          this.totalPrensas = this.totalPrensas.concat(this.Prensas[index]);\n        }\n      }\n      console.log(this.totalPrensas);\n    },\n\n    eliminar(prensa) {\n      const confirmacion = window.confirm(\n        \"¿Estás seguro de que deseas eliminar este medio de prensa?\"\n      );\n\n      if (confirmacion) {\n        axios\n          .put(RUTA_SERVIDOR_LIBROS + \"/prensa/\" + prensa.id, {\n            nombre: prensa.nombre,\n            idEmpleado: parseInt(localStorage.getItem('id')),\n            urlImagenPrensa:prensa.urlImagenPrensa,\n            urlPrensa:prensa.urlPrensa,\n            activo: 0,\n          })\n          .then(function (response) {\n            console.log(response);\n            location.reload();\n          })\n          .catch(function (error) {\n            console.log(error);\n            // console.log(this.libro);\n          });\n      }\n    },\n\n    activo(noPoag) {\n      return noPoag === this.paginaActual ? \"active\" : \"\";\n    },\n\n    obtenerPrensa(prensa) {\n      this.prensasEditar.nombre = prensa.nombre;\n      this.prensasEditar.id = prensa.id;\n      this.prensasEditar.urlImagenPrensa = prensa.urlImagenPrensa;\n      this.prensasEditar.urlPrensa = prensa.urlPrensa;\n\n    },\n    actualizar() {\n      if (\n    this.prensasEditar.nombre.trim() === \"\" ||\n    this.prensasEditar.urlPrensa.trim() === \"\" ||\n    this.prensasEditar.urlImagenPrensa.trim() === \"\"\n  ) {\n    alert(\"Por favor, complete todos los campos antes de actualizar.\");\n    return;\n  }\n      axios\n        .put(RUTA_SERVIDOR_LIBROS + \"/prensa/\" + this.prensasEditar.id, {\n             nombre: this.prensasEditar.nombre,\n            idEmpleado: parseInt(localStorage.getItem('id')),\n            urlImagenPrensa:this.prensasEditar.urlImagenPrensa,\n            urlPrensa:this.prensasEditar.urlPrensa,\n            activo: 1,\n        })\n        .then(function (response) {\n          console.log(response);\n          location.reload();\n        })\n        .then(\n          alert(\n            \"El prensa de material bibliotecario se actualizo correctamente\"\n          )\n        )\n        .catch(function (error) {\n          console.log(error);\n          // console.log(this.libro);\n        });\n    },\n\n    exportarAExcel() {\n      const tabla = document.createElement(\"table\");\n      const tbody = tabla.createTBody();\n      // Crear una tabla HTML con los datos que deseas exportar\n      const cabeceraFila = document.createElement(\"tr\");\n      const cabeceraCelda = document.createElement(\"th\");\n      cabeceraCelda.innerText = \"Prensas de materiales biblotecarios\";\n      cabeceraFila.appendChild(cabeceraCelda);\n      tbody.appendChild(cabeceraFila);\n\n      // Agregar filas de datos a la tabla\n      this.datosPaginados.forEach((prensa) => {\n        const fila = tbody.insertRow();\n        const nombreCell = fila.insertCell(0); // 0 es la primera columna\n        nombreCell.innerText = prensa.prensa;\n      });\n\n      // Crear un archivo Blob para la tabla HTML\n      const blob = new Blob([tabla.outerHTML], {\n        type: \"application/vnd.ms-excel\",\n      });\n\n      // Crear un enlace para descargar el archivo Excel\n      const link = document.createElement(\"a\");\n      link.href = URL.createObjectURL(blob);\n      link.download = \"PrensasMaterial.xls\";\n\n      // Simular un clic en el enlace para iniciar la descarga\n      link.click();\n    },\n    imprimirPrensas() {\n      // Crear un nuevo documento PDF\n      var doc = new jsPDF();\n\n      // Obtener la tabla visible\n      var table = document.querySelector(\".tableMb\");\n      //titulo\n      doc.setFontSize(16);\n      var title = \"Prensas\";\n      var titleWidth =\n        (doc.getStringUnitWidth(title) * doc.internal.getFontSize()) /\n        doc.internal.scaleFactor;\n      var pageWidth = doc.internal.pageSize.getWidth();\n      var x = (pageWidth - titleWidth) / 2;\n      doc.text(title, x, 10);\n      // Obtener la tabla visible\n      var table = document.querySelector(\".tableMb\");\n\n      // Configurar los estilos de la tabla\n      var styles = {\n        overflow: \"linebreak\",\n        fontSize: 8, // Tamaño de fuente reducido\n        lineWidth: 0.1,\n        lineColor: [0, 0, 0], // Color de las líneas\n        font: \"helvetica\",\n        fontStyle: \"normal\",\n        halign: \"center\", // Alineación horizontal\n        valign: \"middle\", // Alineación vertical\n        cellPadding: 2,\n        tableWidth: \"auto\",\n        tableBorder: 1,\n        tableLineColor: [0, 0, 0], // Color del borde de la tabla\n        tableFillColor: [255, 255, 255], // Color de fondo de la tabla\n        textColor: 0,\n        cellWidth: \"auto\", // Ajustar el ancho de la celda automáticamente\n      };\n\n      // Ocultar la última columna (Acción) antes de agregar la tabla al documento PDF\n      var actionColumn = table.querySelector(\"th:last-child, td:last-child\");\n      if (actionColumn) {\n        actionColumn.style.display = \"none\";\n      }\n\n      // Agregar la tabla al documento PDF\n      doc.autoTable({ html: table, startY: 20, styles });\n\n      // Mostrar la última columna nuevamente\n      if (actionColumn) {\n        actionColumn.style.display = \"table-cell\";\n      }\n\n      // Guardar el PDF\n      doc.save(\"PrensasMaterial.pdf\");\n    },\n    closeModal() {\n      this.$refs.modalCenter.hide();\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}