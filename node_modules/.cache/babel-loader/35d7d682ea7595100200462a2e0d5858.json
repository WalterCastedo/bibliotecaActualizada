{"ast":null,"code":"function normalizeProps(props) {\n  switch (true) {\n    case Array.isArray(props):\n      return props.reduce((acc, prop) => ({ ...acc,\n        [prop]: null\n      }), {});\n\n    case typeof props === \"object\" && props !== null:\n      return props;\n\n    default:\n      return {};\n  }\n}\n\nfunction mergeProps(to, from, optionsType = \"props\") {\n  const {\n    mixins,\n    extends: extendsOptions\n  } = from;\n  extendsOptions && mergeProps(to, extendsOptions, optionsType);\n  mixins && mixins.forEach(m => mergeProps(to, m, optionsType));\n  const props = normalizeProps(from[optionsType]);\n\n  for (const key in props) {\n    to[key] = props[key];\n  }\n}\n\nfunction getComponentOptions(component) {\n  if (component.options) {\n    return component.options;\n  }\n\n  if (component.__vccOpts || component.__b) {\n    return { ...component.__vccOpts,\n      ...component.__b\n    };\n  }\n\n  return component;\n}\n\nfunction resolveProps(options, optionsType = \"props\") {\n  var _a, _b;\n\n  const mixins = (_a = options.mixins) != null ? _a : [];\n  const extendsOptions = (_b = options.extends) != null ? _b : [];\n  const result = {};\n  mergeProps(result, extendsOptions, optionsType);\n\n  for (let i = 0; i < mixins.length; i++) {\n    mergeProps(result, mixins[i], optionsType);\n  }\n\n  Object.assign(result, normalizeProps(options[optionsType]));\n  return result;\n}\n\nconst getComponentProps = component => {\n  return resolveProps(getComponentOptions(component));\n};\n\nexport { getComponentProps as g };","map":{"version":3,"mappings":"AAGA,wBAAyBA,KAAzB,EAAqC;EAC3B;IAAA,KACDC,MAAMC,OAAN,CAAcF,KAAd,CADC;MAEJ,OAAOA,MAAMG,MAAN,CAAa,CAACC,GAAD,EAA+BC,IAA/B,MAAiD,EAAE,GAAGD,GAAL;QAAU,CAACC,IAAD,GAAQ;MAAlB,CAAjD,CAAb,EAAyF,EAAzF,CAAP;;IAAkG,KAC/F,OAAOL,KAAP,KAAiB,QAAjB,IAA6BA,UAAU,IADwD;MAE3F;;IAAA;MAEP,OAAO,EAAP;EANI;AAQV;;AAEA,oBAAqBM,EAArB,EAA8CC,IAA9C,EAAyEC,cAAc,OAAvF,EAAgG;EACxF;IAAEC,MAAF;IAAUC,SAASC;EAAnB,IAAsCJ,IAAtC;EAEYI,6BAAWL,EAAX,EAAeK,cAAf,EAA+BH,WAA/B;EACRC,iBAAOG,OAAP,CAAgBC,CAAD,IAAYC,WAAWR,EAAX,EAAeO,CAAf,EAAkBL,WAAlB,CAA3B;EAEJ,cAAQO,eAAeR,KAAKC,WAAL,CAAf,CAAR;;EAEN,WAAWQ,GAAX,IAAkBhB,KAAlB,EAAyB;IACvBM,GAAGU,GAAH,IAAUhB,MAAMgB,GAAN,CAAV;EACF;AACF;;AAEA,6BAA8BC,SAA9B,EAAmF;EACjF,IAAIA,UAAUC,OAAd,EAAuB;IACrB,OAAOD,UAAUC,OAAjB;EACF;;EAEI,cAAUC,SAAV,IAAuBF,UAAUG,GAAjC,EAAsC;IACxC,OAAO,EAAE,GAAGH,UAAUE,SAAf;MAA0B,GAAGF,UAAUG;IAAvC,CAAP;EACF;;EAEO;AACT;;AAEA,sBAAuBF,OAAvB,EAAqCV,cAAc,OAAnD,EAA4D;EApC5D;;EAqCQ,eAAS,cAAQC,MAAR,iBAAkB,EAA3B;EACA,uBAAiB,cAAQC,OAAR,iBAAmB,EAApC;EACN,MAAMW,SAA8B,EAApC;EAEWP,mBAAQH,cAAR,EAAwBH,WAAxB;;EAEX,SAASc,IAAI,CAAb,EAAgBA,IAAIb,OAAOc,MAA3B,EAAmCD,GAAnC,EAAwC;IAC3BR,mBAAQL,OAAOa,CAAP,CAAR,EAAmBd,WAAnB;EACb;;EAEAgB,OAAOC,MAAP,CAAcJ,MAAd,EAAsBN,eAAeG,QAAQV,WAAR,CAAf,CAAtB;EAEO;AACT;;AAGa,0BAAuDS,SAAnC,IAAoD;EAC5E,oBAAaS,oBAAoBT,SAApB,CAAb;AACT,CAFa","names":["props","Array","isArray","reduce","acc","prop","to","from","optionsType","mixins","extends","extendsOptions","forEach","m","mergeProps","normalizeProps","key","component","options","__vccOpts","__b","result","i","length","Object","assign","getComponentOptions"],"sources":["../../../../../src/utils/component-options/resolve-component-props.ts"],"sourcesContent":["import type { ComponentOptions } from 'vue'\nimport type { DefineComponentOptions, ExtractComponentProps } from './types'\n\nfunction normalizeProps (props: any) {\n  switch (true) {\n    case Array.isArray(props):\n      return props.reduce((acc: Record<string, unknown>, prop: string) => ({ ...acc, [prop]: null }), {})\n    case typeof props === 'object' && props !== null:\n      return props\n    default:\n      return {}\n  }\n}\n\nfunction mergeProps (to: Record<string, any>, from: Record<string, any>, optionsType = 'props') {\n  const { mixins, extends: extendsOptions } = from\n\n  extendsOptions && mergeProps(to, extendsOptions, optionsType)\n  mixins && mixins.forEach((m: any) => mergeProps(to, m, optionsType))\n\n  const props = normalizeProps(from[optionsType])\n\n  for (const key in props) {\n    to[key] = props[key]\n  }\n}\n\nfunction getComponentOptions (component: DefineComponentOptions): ComponentOptions {\n  if (component.options) {\n    return component.options\n  }\n\n  if (component.__vccOpts || component.__b) {\n    return { ...component.__vccOpts, ...component.__b }\n  }\n\n  return component\n}\n\nfunction resolveProps (options: any, optionsType = 'props') {\n  const mixins = options.mixins ?? []\n  const extendsOptions = options.extends ?? []\n  const result: Record<string, any> = {}\n\n  mergeProps(result, extendsOptions, optionsType)\n\n  for (let i = 0; i < mixins.length; i++) {\n    mergeProps(result, mixins[i], optionsType)\n  }\n\n  Object.assign(result, normalizeProps(options[optionsType]))\n\n  return result\n}\n\n/** Extract all component props, from mixins and VueClassComponent */\nexport const getComponentProps = <T extends DefineComponentOptions>(component: T) => {\n  return resolveProps(getComponentOptions(component)) as ExtractComponentProps<T>\n}\n"]},"metadata":{},"sourceType":"module"}