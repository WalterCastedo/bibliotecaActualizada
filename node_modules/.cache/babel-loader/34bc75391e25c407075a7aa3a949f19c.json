{"ast":null,"code":"import { defineComponent, shallowRef, computed, toRefs, resolveComponent, openBlock, createBlock, mergeProps, createSlots, withCtx, withModifiers, withKeys, createCommentVNode, renderSlot, normalizeProps, guardReactiveProps, createElementBlock, renderList } from \"vue\";\nimport { o as omit_1, p as pick_1 } from \"../../../vendor.js\";\nimport { e as extractComponentProps } from \"../../utils/component-options/extract-component-options.js\";\nimport { f as filterComponentProps } from \"../../utils/component-options/filter-props.js\";\nimport { u as useClearableProps, a as useClearableEmits, b as useClearable } from \"../../composables/useClearable.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { u as useEmitProxy } from \"../../composables/useEmitProxy.js\";\nimport { u as useFocusDeep } from \"../../composables/useFocusDeep.js\";\nimport { u as useFormProps } from \"../../composables/useForm.js\";\nimport { u as useValidationProps, a as useValidationEmits, b as useValidation } from \"../../composables/useValidation.js\";\nimport { u as useTranslation } from \"../../composables/useTranslation.js\";\nimport { u as useCleaveProps, a as useCleave } from \"./hooks/useCleave.js\";\nimport { V as VaInputWrapper } from \"./components/VaInputWrapper/VaInputWrapper.js\";\nimport { V as VaTextarea } from \"./components/VaTextarea/VaTextarea.js\";\nimport { V as VaIcon } from \"../va-icon/VaIcon.js\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper.js\";\nconst VaTextareaProps = extractComponentProps(VaTextarea);\nconst {\n  createEmits: createInputEmits,\n  createListeners: createInputListeners\n} = useEmitProxy([\"change\", \"keyup\", \"keypress\", \"keydown\", \"focus\", \"blur\"]);\nconst {\n  createEmits: createFieldEmits,\n  createListeners: createFieldListeners\n} = useEmitProxy([\"click\", \"click-prepend\", \"click-append\", \"click-prepend-inner\", \"click-append-inner\"]);\n\nconst _sfc_main = defineComponent({\n  name: \"VaInput\",\n  components: {\n    VaInputWrapper,\n    VaTextarea,\n    VaIcon\n  },\n  props: { ...useFormProps,\n    ...useValidationProps,\n    ...useClearableProps,\n    ...useCleaveProps,\n    ...VaTextareaProps,\n    ...useComponentPresetProp,\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    tabindex: {\n      type: Number,\n      default: 0\n    },\n    modelValue: {\n      type: [String, Number],\n      default: \"\"\n    },\n    label: {\n      type: String,\n      default: \"\"\n    },\n    type: {\n      type: String,\n      default: \"text\"\n    },\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    inputClass: {\n      type: String,\n      default: \"\"\n    },\n    pattern: {\n      type: String\n    },\n    inputmode: {\n      type: String,\n      default: \"text\"\n    },\n    ariaLabel: {\n      type: String,\n      default: void 0\n    },\n    counter: {\n      type: Boolean,\n      default: false\n    },\n    maxLength: {\n      type: Number,\n      default: void 0\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    },\n    outline: {\n      type: Boolean,\n      default: false\n    },\n    bordered: {\n      type: Boolean,\n      default: false\n    },\n    requiredMark: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"update:modelValue\", ...useValidationEmits, ...useClearableEmits, ...createInputEmits(), ...createFieldEmits()],\n  inheritAttrs: false,\n\n  setup(props, {\n    emit,\n    attrs,\n    slots\n  }) {\n    const input = shallowRef();\n    const isFocused = useFocusDeep();\n\n    const reset = () => withoutValidation(() => {\n      emit(\"update:modelValue\", props.clearValue);\n      emit(\"clear\");\n      resetValidation();\n    });\n\n    const focus = () => {\n      var _a;\n\n      (_a = input.value) == null ? void 0 : _a.focus();\n    };\n\n    const blur = () => {\n      var _a;\n\n      (_a = input.value) == null ? void 0 : _a.blur();\n    };\n\n    const filterSlots = computed(() => {\n      const iconSlot = [\"icon\"];\n      return Object.keys(slots).filter(slot => !iconSlot.includes(slot));\n    });\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners: validationListeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation\n    } = useValidation(props, emit, {\n      reset,\n      focus\n    });\n    const {\n      modelValue\n    } = toRefs(props);\n    const {\n      canBeCleared,\n      clearIconProps\n    } = useClearable(props, modelValue, input, computedError);\n    const computedCleaveTarget = computed(() => props.type === \"textarea\" ? void 0 : input.value);\n    const {\n      computedValue,\n      onInput\n    } = useCleave(computedCleaveTarget, props, emit);\n    const inputListeners = createInputListeners(emit);\n\n    const onFocus = e => {\n      inputListeners.onFocus(e);\n      validationListeners.onFocus();\n    };\n\n    const onBlur = e => {\n      inputListeners.onBlur(e);\n      validationListeners.onBlur();\n    };\n\n    const inputEvents = { ...inputListeners,\n      onFocus,\n      onBlur,\n      onInput\n    };\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex);\n    const computedChildAttributes = computed(() => ({\n      ariaLabel: props.ariaLabel || props.label,\n      ariaRequired: props.requiredMark,\n      tabindex: tabIndexComputed.value,\n      class: props.inputClass,\n      ariaDisabled: props.disabled,\n      ariaReadonly: props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit_1(attrs, [\"class\", \"style\"])\n    }));\n    const computedInputAttributes = computed(() => ({ ...computedChildAttributes.value,\n      ...pick_1(props, [\"type\", \"disabled\", \"readonly\", \"placeholder\", \"pattern\", \"inputmode\"])\n    }));\n    const valueLengthComputed = computed(() => props.counter && typeof computedValue.value === \"string\" ? computedValue.value.length : void 0);\n    return { ...useTranslation(),\n      input,\n      inputEvents,\n      valueLengthComputed,\n      computedChildAttributes,\n      computedInputAttributes,\n      textareaProps: filterComponentProps(VaTextareaProps),\n      computedValue,\n      tabIndexComputed,\n      computedError,\n      computedErrorMessages,\n      isFocused,\n      canBeCleared,\n      clearIconProps,\n      fieldListeners: createFieldListeners(emit),\n      filterSlots,\n      reset,\n      focus,\n      blur\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"value\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_icon = resolveComponent(\"va-icon\");\n\n  const _component_VaTextarea = resolveComponent(\"VaTextarea\");\n\n  const _component_va_input_wrapper = resolveComponent(\"va-input-wrapper\");\n\n  return openBlock(), createBlock(_component_va_input_wrapper, mergeProps(_ctx.fieldListeners, {\n    class: [\"va-input\", _ctx.$attrs.class],\n    style: _ctx.$attrs.style,\n    color: _ctx.$props.color,\n    readonly: _ctx.$props.readonly,\n    disabled: _ctx.$props.disabled,\n    success: _ctx.$props.success,\n    messages: _ctx.$props.messages,\n    error: _ctx.computedError,\n    \"error-messages\": _ctx.computedErrorMessages,\n    \"error-count\": _ctx.errorCount,\n    label: _ctx.$props.label,\n    bordered: _ctx.$props.bordered,\n    outline: _ctx.$props.outline,\n    requiredMark: _ctx.$props.requiredMark,\n    focused: _ctx.isFocused,\n    \"counter-value\": _ctx.valueLengthComputed,\n    \"max-length\": _ctx.$props.maxLength,\n    onClick: _ctx.focus\n  }), createSlots({\n    icon: withCtx(slotScope => [_ctx.canBeCleared ? (openBlock(), createBlock(_component_va_icon, mergeProps({\n      key: 0,\n      role: \"button\",\n      \"aria-label\": _ctx.t(\"reset\"),\n      tabindex: _ctx.tabIndexComputed\n    }, _ctx.clearIconProps, {\n      onClick: withModifiers(_ctx.reset, [\"stop\"]),\n      onKeydown: [withKeys(withModifiers(_ctx.reset, [\"stop\"]), [\"enter\"]), withKeys(withModifiers(_ctx.reset, [\"stop\"]), [\"space\"])]\n    }), null, 16, [\"aria-label\", \"tabindex\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"\", true), _ctx.$props.loading ? (openBlock(), createBlock(_component_va_icon, {\n      key: 1,\n      color: _ctx.$props.color,\n      size: \"small\",\n      name: \"va-loading\",\n      spin: \"counter-clockwise\"\n    }, null, 8, [\"color\"])) : createCommentVNode(\"\", true), renderSlot(_ctx.$slots, \"icon\", normalizeProps(guardReactiveProps(slotScope)))]),\n    default: withCtx(() => [_ctx.type === \"textarea\" && !_ctx.$slots.content ? (openBlock(), createBlock(_component_VaTextarea, mergeProps({\n      key: 0,\n      ref: \"input\"\n    }, { ..._ctx.computedChildAttributes,\n      ..._ctx.textareaProps,\n      ..._ctx.inputEvents\n    }, {\n      class: \"va-input__content__input\"\n    }), null, 16)) : !_ctx.$slots.content ? (openBlock(), createElementBlock(\"input\", mergeProps({\n      key: 1,\n      ref: \"input\",\n      class: \"va-input__content__input\"\n    }, { ..._ctx.computedInputAttributes,\n      ..._ctx.inputEvents\n    }, {\n      value: _ctx.computedValue\n    }), null, 16, _hoisted_1)) : createCommentVNode(\"\", true)]),\n    _: 2\n  }, [renderList(_ctx.filterSlots, name => {\n    return {\n      name,\n      fn: withCtx(slotScope => [renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotScope)))])\n    };\n  })]), 1040, [\"class\", \"style\", \"color\", \"readonly\", \"disabled\", \"success\", \"messages\", \"error\", \"error-messages\", \"error-count\", \"label\", \"bordered\", \"outline\", \"requiredMark\", \"focused\", \"counter-value\", \"max-length\", \"onClick\"]);\n}\n\nvar _VaInput = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaInput as _ };","map":{"version":3,"mappings":"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","names":["VaTextareaProps","extractComponentProps","VaTextarea","createEmits","createInputEmits","createListeners","createInputListeners","useEmitProxy","createFieldEmits","createFieldListeners","_sfc_main","defineComponent","name","components","VaInputWrapper","VaIcon","props","useFormProps","useValidationProps","useClearableProps","useCleaveProps","useComponentPresetProp","placeholder","type","String","default","tabindex","Number","modelValue","label","loading","Boolean","inputClass","pattern","inputmode","ariaLabel","counter","maxLength","color","outline","bordered","requiredMark","emits","useValidationEmits","useClearableEmits","inheritAttrs","setup","emit","attrs","slots","input","shallowRef","isFocused","useFocusDeep","withoutValidation","clearValue","resetValidation","focus","value","blur","computed","keys","filter","slot","iconSlot","includes","computedError","computedErrorMessages","listeners","validationListeners","validationAriaAttributes","useValidation","reset","toRefs","canBeCleared","clearIconProps","useClearable","computedValue","onInput","useCleave","computedCleaveTarget","e","inputListeners","onFocus","onBlur","inputEvents","tabIndexComputed","disabled","ariaRequired","class","ariaDisabled","ariaReadonly","readonly","omit","computedChildAttributes","pick","valueLengthComputed","length","useTranslation","computedInputAttributes","textareaProps","filterComponentProps","fieldListeners","filterSlots","_createBlock","_component_va_input_wrapper","_ctx","_mergeProps","style","$attrs","$props","success","messages","error","focused","onClick","_createSlots","icon","_withCtx","slotScope","_component_va_icon","key","role","t","_withModifiers","onKeydown","_withKeys","createCommentVNode","openBlock","size","spin","_createCommentVNode","_renderSlot","normalizeProps","content","_openBlock","_component_VaTextarea","ref","_createElementBlock","_hoisted_1","_renderList","fn","_normalizeProps","_guardReactiveProps"],"sources":["../../../../../src/components/va-input/VaInput.vue"],"sourcesContent":["<template>\n  <va-input-wrapper\n    v-bind=\"fieldListeners\"\n    class=\"va-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    :color=\"$props.color\"\n    :readonly=\"$props.readonly\"\n    :disabled=\"$props.disabled\"\n    :success=\"$props.success\"\n    :messages=\"$props.messages\"\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"errorCount\"\n    :label=\"$props.label\"\n    :bordered=\"$props.bordered\"\n    :outline=\"$props.outline\"\n    :requiredMark=\"$props.requiredMark\"\n    :focused=\"isFocused\"\n    :counter-value=\"valueLengthComputed\"\n    :max-length=\"$props.maxLength\"\n    @click=\"focus\"\n  >\n    <!-- Simply proxy slots to VaInputWrapper -->\n    <template\n      v-for=\"name in filterSlots\"\n      :key=\"name\"\n      v-slot:[name]=\"slotScope\"\n    >\n      <slot :name=\"name\" v-bind=\"slotScope\" />\n    </template>\n\n    <template #icon=\"slotScope\">\n      <va-icon\n        v-if=\"canBeCleared\"\n        role=\"button\"\n        :aria-label=\"t('reset')\"\n        :tabindex=\"tabIndexComputed\"\n        v-bind=\"clearIconProps\"\n        @click.stop=\"reset\"\n        @keydown.enter.stop=\"reset\"\n        @keydown.space.stop=\"reset\"\n      />\n      <va-icon\n        v-if=\"$props.loading\"\n        :color=\"$props.color\"\n        size=\"small\"\n        name=\"va-loading\"\n        spin=\"counter-clockwise\"\n      />\n      <slot name=\"icon\" v-bind=\"slotScope\" />\n    </template>\n\n    <VaTextarea\n      v-if=\"type === 'textarea' && !$slots.content\"\n      ref=\"input\"\n      v-bind=\"{ ...computedChildAttributes, ...textareaProps, ...inputEvents }\"\n      class=\"va-input__content__input\"\n    />\n\n    <input\n      v-else-if=\"!$slots.content\"\n      ref=\"input\"\n      class=\"va-input__content__input\"\n      v-bind=\"{ ...computedInputAttributes, ...inputEvents }\"\n      :value=\"computedValue\"\n    >\n  </va-input-wrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, InputHTMLAttributes, shallowRef, toRefs } from 'vue'\nimport omit from 'lodash/omit.js'\nimport pick from 'lodash/pick.js'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\n\nimport {\n  useComponentPresetProp,\n  useFormProps,\n  useValidation, useValidationProps, useValidationEmits, ValidationProps,\n  useEmitProxy,\n  useClearable, useClearableProps, useClearableEmits,\n  useFocusDeep,\n  useTranslation,\n} from '../../composables'\nimport { useCleave, useCleaveProps } from './hooks/useCleave'\n\nimport type { AnyStringPropType } from '../../utils/types/prop-type'\n\nimport VaInputWrapper from './components/VaInputWrapper/VaInputWrapper.vue'\nimport VaTextarea from './components/VaTextarea/VaTextarea.vue'\nimport VaIcon from '../va-icon/VaIcon.vue'\n\nconst VaTextareaProps = extractComponentProps(VaTextarea)\n\nconst { createEmits: createInputEmits, createListeners: createInputListeners } = useEmitProxy(\n  ['change', 'keyup', 'keypress', 'keydown', 'focus', 'blur'],\n)\n\nconst { createEmits: createFieldEmits, createListeners: createFieldListeners } = useEmitProxy([\n  'click',\n  'click-prepend',\n  'click-append',\n  'click-prepend-inner',\n  'click-append-inner',\n])\n\nexport default defineComponent({\n  name: 'VaInput',\n\n  components: { VaInputWrapper, VaTextarea, VaIcon },\n\n  props: {\n    ...useFormProps,\n    ...useValidationProps as ValidationProps<string>,\n    ...useClearableProps,\n    ...useCleaveProps,\n    ...VaTextareaProps,\n    ...useComponentPresetProp,\n\n    // input\n    placeholder: { type: String, default: '' },\n    tabindex: { type: Number, default: 0 },\n    modelValue: { type: [String, Number], default: '' },\n    label: { type: String, default: '' },\n    type: { type: String as AnyStringPropType<'textarea' | 'text' | 'password'>, default: 'text' },\n    loading: { type: Boolean, default: false },\n    inputClass: { type: String, default: '' },\n    pattern: { type: String },\n    inputmode: { type: String, default: 'text' },\n    ariaLabel: { type: String, default: undefined },\n    counter: { type: Boolean, default: false },\n    maxLength: { type: Number, default: undefined },\n\n    // style\n    color: { type: String, default: 'primary' },\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  emits: [\n    'update:modelValue',\n    ...useValidationEmits,\n    ...useClearableEmits,\n    ...createInputEmits(),\n    ...createFieldEmits(),\n  ],\n\n  inheritAttrs: false,\n\n  setup (props, { emit, attrs, slots }) {\n    const input = shallowRef<HTMLInputElement | typeof VaTextarea>()\n\n    const isFocused = useFocusDeep()\n\n    const reset = () => withoutValidation(() => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n      resetValidation()\n    })\n\n    const focus = () => {\n      input.value?.focus()\n    }\n\n    const blur = () => {\n      input.value?.blur()\n    }\n\n    const filterSlots = computed(() => {\n      const iconSlot = ['icon']\n      return Object.keys(slots).filter(slot => !iconSlot.includes(slot))\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners: validationListeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus })\n\n    const { modelValue } = toRefs(props)\n    const {\n      canBeCleared,\n      clearIconProps,\n    } = useClearable(props, modelValue, input, computedError)\n\n    /** Use cleave only if this component is input, because it will break. */\n    const computedCleaveTarget = computed(() => props.type === 'textarea'\n      ? undefined\n      : input.value as HTMLInputElement | undefined)\n\n    const { computedValue, onInput } = useCleave(computedCleaveTarget, props, emit)\n\n    const inputListeners = createInputListeners(emit)\n\n    /** Combine EmitProxy events with validation events to avoid events overriding */\n    const onFocus = (e: Event) => {\n      inputListeners.onFocus(e)\n      validationListeners.onFocus()\n    }\n\n    const onBlur = (e: Event) => {\n      inputListeners.onBlur(e)\n      validationListeners.onBlur()\n    }\n\n    const inputEvents = {\n      ...inputListeners,\n      onFocus,\n      onBlur,\n      onInput,\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n\n    const computedChildAttributes = computed(() => ({\n      ariaLabel: props.ariaLabel || props.label,\n      ariaRequired: props.requiredMark,\n      tabindex: tabIndexComputed.value,\n      class: props.inputClass,\n      ariaDisabled: props.disabled,\n      ariaReadonly: props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, ['class', 'style']),\n    }) as InputHTMLAttributes)\n\n    const computedInputAttributes = computed(() => ({\n      ...computedChildAttributes.value,\n      ...pick(props, ['type', 'disabled', 'readonly', 'placeholder', 'pattern', 'inputmode']),\n    }) as InputHTMLAttributes)\n\n    const valueLengthComputed = computed(() =>\n      props.counter && typeof computedValue.value === 'string' ? computedValue.value.length : undefined,\n    )\n\n    return {\n      ...useTranslation(),\n      input,\n      inputEvents,\n\n      valueLengthComputed,\n      computedChildAttributes,\n      computedInputAttributes,\n      textareaProps: filterComponentProps(VaTextareaProps),\n      computedValue,\n      tabIndexComputed,\n\n      // Validations\n      computedError,\n      computedErrorMessages,\n      isFocused,\n\n      // Icon\n      canBeCleared,\n      clearIconProps,\n\n      fieldListeners: createFieldListeners(emit),\n      filterSlots,\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}