{"ast":null,"code":"import { f as isFunction_1 } from \"../../vendor.js\";\nimport { getCurrentInstance, computed } from \"vue\";\n\nconst checkSlotChildrenDeep = (v, initial = true) => {\n  var _a;\n\n  if (!v || initial && (!isFunction_1(v) || !((_a = v()) == null ? void 0 : _a.length))) {\n    return false;\n  }\n\n  const slotData = initial ? v() : v;\n\n  if (Array.isArray(slotData)) {\n    return slotData.some(el => {\n      return Array.isArray(el.children) ? checkSlotChildrenDeep(el.children, false) : el.children || el.props;\n    });\n  }\n\n  return !!slotData.children;\n};\n\nconst useSlotPassed = (name = \"default\") => {\n  const {\n    slots\n  } = getCurrentInstance();\n  return computed(() => checkSlotChildrenDeep(slots[name]));\n};\n\nexport { useSlotPassed as u };","map":{"version":3,"mappings":";;;AASO,MAAMA,wBAAwB,CAACC,CAAD,EAASC,UAAU,IAAnB,KAAqC;;;EACpE,KAACD,CAAD,IAAOC,YAAa,cAAWD,CAAXE,KAAiB,EAAC,iCAAKC,MAAN,CAA9B,CAAP,EAAqD;IAAS;EAAM;;EAElE,iBAAWF,UAAUD,GAAV,GAAgBA,CAA3B;;EAEF,UAAMI,OAAN,CAAcC,QAAd,GAAyB;IACpB,gBAASC,IAAT,CAAeC,EAAD,IAAa;MAChC,OAAOC,MAAMJ,OAAN,CAAcG,GAAGE,QAAjB,IAA6BV,sBAAsBQ,GAAGE,QAAzB,EAAmC,KAAnC,CAA7B,GAAyEF,GAAGE,QAAH,IAAeF,GAAGG,KAAlG;IACD,CAFM;EAGT;;EAEO,QAAC,CAACL,SAASI,QAAX;AACT,CAZO;;AAeM,sBAAgB,CAAkCE,OAAa,SAA/C,KAAqE;EAC1F;IAAEC;EAAF,IAAYC,oBAAZ;EAEN,OAAOC,SAAS,MAAMf,sBAAsBa,MAAMD,IAAN,CAAtB,CAAf,CAAP;AACF,CAJa","names":["checkSlotChildrenDeep","v","initial","isFunction","length","isArray","slotData","some","el","Array","children","props","name","slots","getCurrentInstance","computed"],"sources":["../../../../src/composables/useSlotPassed.ts"],"sourcesContent":["import isFunction from 'lodash/isFunction.js'\nimport { computed, getCurrentInstance } from 'vue'\n\n/**\n * @description checks if empty slot was passed\n * @param v - any slot\n * @param initial - flag for initial function call\n * @example checkSlotChildrenDeep(slots.default)\n */\nexport const checkSlotChildrenDeep = (v: any, initial = true): boolean => {\n  if (!v || (initial && (!isFunction(v) || !v()?.length))) { return false }\n\n  const slotData = initial ? v() : v\n\n  if (Array.isArray(slotData)) {\n    return slotData.some((el: any) => {\n      return Array.isArray(el.children) ? checkSlotChildrenDeep(el.children, false) : el.children || el.props\n    })\n  }\n\n  return !!slotData.children\n}\n\n/** Deeply check if slot is passed */\nexport const useSlotPassed = <Name extends string = 'default'>(name: Name = 'default' as Name) => {\n  const { slots } = getCurrentInstance()!\n\n  return computed(() => checkSlotChildrenDeep(slots[name]))\n}\n"]},"metadata":{},"sourceType":"module"}