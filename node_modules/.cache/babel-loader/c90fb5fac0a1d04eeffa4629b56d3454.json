{"ast":null,"code":"import { watch } from \"vue\";\nimport { i as isServer } from \"../../../utils/ssr.js\";\nimport { j as cssVariableName } from \"../utils.js\";\nimport { u as useColors } from \"../../../composables/useColors.js\";\n\nconst setCSSVariable = (name, value, root) => {\n  root.style.setProperty(cssVariableName(name), value);\n};\n\nconst createColorConfigPlugin = (app, config) => {\n  var _a;\n\n  const {\n    colors: configColors,\n    getTextColor,\n    getColor,\n    currentPresetName,\n    applyPreset\n  } = useColors();\n\n  const renderCSSVariables = (colors = configColors) => {\n    if (!colors) {\n      return;\n    }\n\n    const colorNames = Object.keys(colors);\n    return colorNames.map(key => `${cssVariableName(key)}: ${colors[key]}`).join(\";\");\n  };\n\n  const updateColors = newValue => {\n    if (!newValue) {\n      return;\n    }\n\n    if (isServer()) {\n      return;\n    }\n\n    const root = document.documentElement;\n    const colorNames = Object.keys(newValue);\n    colorNames.forEach(key => {\n      setCSSVariable(key, newValue[key], root);\n    });\n    colorNames.forEach(key => {\n      setCSSVariable(`on-${key}`, getColor(getTextColor(newValue[key])), root);\n    });\n  };\n\n  watch(configColors, newValue => {\n    updateColors(newValue);\n  }, {\n    immediate: true,\n    deep: true\n  });\n\n  if ((_a = config == null ? void 0 : config.colors) == null ? void 0 : _a.currentPresetName) {\n    applyPreset(config.colors.currentPresetName);\n  }\n\n  return {\n    renderCSSVariables,\n    updateColors\n  };\n};\n\nexport { createColorConfigPlugin as c };","map":{"version":3,"mappings":";;;;;AAOO,MAAMA,iBAAiB,CAACC,IAAD,EAAeC,KAAf,EAA8BC,IAA9B,KAAoD;EAChFA,KAAKC,KAAL,CAAWC,WAAX,CAAuBC,gBAAgBL,IAAhB,CAAvB,EAA8CC,KAA9C;AACF,CAFO;;AAIM,gCAA0B,CAACK,GAAD,EAAWC,MAAX,KAA4C;;;EACjF,MAAM;IAAEC,QAAQC,YAAV;IAAwBC,YAAxB;IAAsCC,QAAtC;IAAgDC,iBAAhD;IAAmEC;EAAnE,IAAmFC,WAAzF;;EAGM,2BAAqB,CAACN,SAAqCC,YAAtC,KAAuD;IAChF,IAAI,CAACD,MAAL,EAAa;MAAE;IAAO;;IAEhB,mBAAaO,OAAOC,IAAP,CAAYR,MAAZ,CAAb;IACN,OAAOS,WAAWC,GAAX,CAAgBC,GAAD,IAAS,GAAGd,gBAAgBc,GAAhB,CAAmB,KAAMX,OAAOW,GAAP,CAAO,EAA3D,EAAmEC,IAAnE,CAAwE,GAAxE,CAAP;EAAkF,CAJ9E;;EAOA,qBAAgBC,QAAD,IAA0C;IAC7D,IAAI,CAACA,QAAL,EAAe;MAAE;IAAO;;IACxB,IAAIC,UAAJ,EAAgB;MAAE;IAAO;;IAEzB,MAAMpB,OAAOqB,SAASC,eAAtB;IAEM,mBAAaT,OAAOC,IAAP,CAAYK,QAAZ,CAAb;IACKJ,mBAASE,GAAD,IAAS;MACXpB,oBAAKsB,SAASF,GAAT,CAAL,EAAoBjB,IAApB;IAChB,CAFU;IAGAe,mBAASE,GAAD,IAAS;MACXpB,qBAAMoB,KAAN,EAAaR,SAASD,aAAaW,SAASF,GAAT,CAAb,CAAT,CAAb,EAAoDjB,IAApD;IAChB,CAFU;EAEV,CAZG;;EAeAuB,oBAAeJ,QAAD,IAAc;IAChCK,aAAaL,QAAb;EAAqB,CADjB,EAEH;IAAEM,WAAW,IAAb;IAAmBC,MAAM;EAAzB,CAFG;;EAIF,2CAAQpB,MAAR,wBAAgBI,iBAAhB,EAAmC;IACzBC,mBAAOL,MAAP,CAAcI,iBAAd;EACd;;EAEO;IACLiB,kBADK;IAELH;EAFK;AAIT,CAtCa","names":["setCSSVariable","name","value","root","style","setProperty","cssVariableName","app","config","colors","configColors","getTextColor","getColor","currentPresetName","applyPreset","useColors","Object","keys","colorNames","map","key","join","newValue","isServer","document","documentElement","watch","updateColors","immediate","deep","renderCSSVariables"],"sources":["../../../../../../src/services/color/plugin/create-color-config-plugin.ts"],"sourcesContent":["import { PartialGlobalConfig } from './../../global-config/types'\nimport { ColorVariables } from './../types'\nimport { App, watch } from 'vue'\nimport { isServer } from '../../../utils/ssr'\nimport { cssVariableName } from '../utils'\nimport { useColors } from '../../../composables'\n\nexport const setCSSVariable = (name: string, value: string, root: HTMLElement) => {\n  root.style.setProperty(cssVariableName(name), value)\n}\n\nexport const createColorConfigPlugin = (app: App, config?: PartialGlobalConfig) => {\n  const { colors: configColors, getTextColor, getColor, currentPresetName, applyPreset } = useColors()\n\n  /** Renders CSS variables string. Use this in SSR mode */\n  const renderCSSVariables = (colors: ColorVariables | undefined = configColors) => {\n    if (!colors) { return }\n\n    const colorNames = Object.keys(colors)\n    return colorNames.map((key) => `${cssVariableName(key)}: ${colors[key]}`).join(';')\n  }\n\n  const updateColors = (newValue: ColorVariables | undefined) => {\n    if (!newValue) { return }\n    if (isServer()) { return }\n\n    const root = document.documentElement\n\n    const colorNames = Object.keys(newValue)\n    colorNames.forEach((key) => {\n      setCSSVariable(key, newValue[key], root)\n    })\n    colorNames.forEach((key) => {\n      setCSSVariable(`on-${key}`, getColor(getTextColor(newValue[key])), root)\n    })\n  }\n\n  watch(configColors, (newValue) => {\n    updateColors(newValue)\n  }, { immediate: true, deep: true })\n\n  if (config?.colors?.currentPresetName) {\n    applyPreset(config.colors.currentPresetName)\n  }\n\n  return {\n    renderCSSVariables,\n    updateColors,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}