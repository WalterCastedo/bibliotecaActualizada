{"ast":null,"code":"import { defineComponent, computed, openBlock, createBlock, resolveDynamicComponent, mergeProps, toHandlers, withCtx, renderSlot } from \"vue\";\nimport { u as useColors } from \"../../../composables/useColors.js\";\nimport { u as useComponentPresetProp } from \"../../../composables/useComponentPreset.js\";\nimport { u as useElementRef } from \"../../../composables/useElementRef.js\";\nimport { u as useHover } from \"../../../composables/useHover.js\";\nimport { e as applyColors } from \"../../../services/color/utils.js\";\nimport { u as useKeyboardOnlyFocus } from \"../../../composables/useKeyboardOnlyFocus.js\";\nimport { u as useRouterLinkProps, a as useRouterLink } from \"../../../composables/useRouterLink.js\";\nimport { u as useTextColor } from \"../../../composables/useTextColor.js\";\nimport { a as useSidebarItem } from \"../hooks/useSidebar.js\";\nimport { _ as _export_sfc } from \"../../../../plugin-vue_export-helper.js\";\n\nvar VaSidebarItem_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \":root{--va-sidebar-min-height: 100%;--va-sidebar-height: 100%;--va-sidebar-position: relative;--va-sidebar-top: 0;--va-sidebar-left: 0;--va-sidebar-transition: var(--va-transition);--va-sidebar-z-index: 1;--va-sidebar-menu-max-height: 100%;--va-sidebar-menu-margin-bottom: 0;--va-sidebar-menu-list-style: none;--va-sidebar-menu-padding-left: 0;--va-sidebar-menu-overflow-y: auto;--va-sidebar-menu-overflow-x: hidden;--va-sidebar-item-active-border-size: 4px;--va-sidebar-item-transition: var(--va-transition);--va-sidebar-item-content-padding: 1rem;--va-sidebar-item-content-gap: .5rem;--va-sidebar-item-title-white-space: nowrap}.va-sidebar__item{border-left:var(--va-sidebar-item-active-border-size) solid transparent;padding-right:var(--va-sidebar-item-active-border-size);display:inline-block;width:100%;font-family:var(--va-font-family);transition:var(--va-sidebar-item-transition);box-sizing:border-box;color:currentColor}\\n\")();\n\nconst _sfc_main = defineComponent({\n  name: \"VaSidebarItem\",\n  props: { ...useRouterLinkProps,\n    ...useComponentPresetProp,\n    active: {\n      type: Boolean,\n      default: false\n    },\n    textColor: {\n      type: String,\n      default: void 0\n    },\n    activeColor: {\n      type: String,\n      default: \"primary\"\n    },\n    hoverColor: {\n      type: String,\n      default: void 0\n    },\n    hoverOpacity: {\n      type: Number,\n      default: 0.2\n    },\n    borderColor: {\n      type: String,\n      default: void 0\n    }\n  },\n\n  setup(props) {\n    const rootElement = useElementRef();\n    const sidebar = useSidebarItem();\n    const {\n      isHovered\n    } = useHover(rootElement);\n    const {\n      getColor,\n      getHoverColor,\n      getFocusColor\n    } = useColors();\n    const {\n      hasKeyboardFocus,\n      keyboardFocusListeners\n    } = useKeyboardOnlyFocus();\n    const backgroundColorComputed = computed(() => {\n      if (props.active && !isHovered.value && !hasKeyboardFocus.value) {\n        return getColor(props.activeColor);\n      }\n\n      if (hasKeyboardFocus.value) {\n        return getFocusColor(getColor(props.hoverColor || props.activeColor));\n      }\n\n      return \"#ffffff00\";\n    });\n    const textBackground = computed(() => applyColors(getColor(sidebar == null ? void 0 : sidebar.color), backgroundColorComputed.value));\n    const {\n      textColorComputed\n    } = useTextColor(textBackground);\n    const computedStyle = computed(() => {\n      const style = {\n        color: textColorComputed.value\n      };\n\n      if (isHovered.value || props.active || hasKeyboardFocus.value) {\n        style.backgroundColor = backgroundColorComputed.value;\n      }\n\n      if (props.active) {\n        const mergedProps = { ...sidebar,\n          ...props\n        };\n        style.borderColor = getColor(mergedProps.borderColor || mergedProps.activeColor);\n      }\n\n      if (hasKeyboardFocus.value) {\n        style.backgroundColor = getFocusColor(getColor(props.hoverColor || props.activeColor));\n      }\n\n      if (isHovered.value) {\n        style.backgroundColor = getHoverColor(getColor(props.hoverColor || props.activeColor), props.hoverOpacity);\n      }\n\n      return style;\n    });\n    const {\n      tagComputed,\n      hrefComputed\n    } = useRouterLink(props);\n    return {\n      rootElement,\n      computedStyle,\n      keyboardFocusListeners,\n      tagComputed,\n      hrefComputed,\n      isHovered,\n      backgroundColorComputed,\n      bg: getColor(sidebar == null ? void 0 : sidebar.color),\n      textBackground\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tagComputed), mergeProps({\n    ref: \"rootElement\",\n    class: [\"va-sidebar__item va-sidebar-item\", {\n      \"va-sidebar-item--active\": _ctx.$props.active\n    }],\n    tabindex: \"0\",\n    style: _ctx.computedStyle,\n    href: _ctx.hrefComputed,\n    to: _ctx.$props.to\n  }, toHandlers(_ctx.keyboardFocusListeners)), {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  }, 16, [\"class\", \"style\", \"href\", \"to\"]);\n}\n\nvar _VaSidebarItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaSidebarItem as _ };\nimport './VaSidebarItem.css';","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","useRouterLinkProps","useComponentPresetProp","active","type","Boolean","default","textColor","String","activeColor","hoverColor","hoverOpacity","Number","borderColor","setup","rootElement","useElementRef","sidebar","useSidebarItem","isHovered","useHover","getColor","getHoverColor","getFocusColor","useColors","hasKeyboardFocus","keyboardFocusListeners","useKeyboardOnlyFocus","computed","value","applyColors","color","backgroundColorComputed","textColorComputed","useTextColor","textBackground","style","backgroundColor","mergedProps","tagComputed","hrefComputed","useRouterLink","computedStyle","bg","_createBlock","_resolveDynamicComponent","_ctx","ref","class","tabindex","href","to","$props","_mergeProps","_toHandlers","_renderSlot","_withCtx","_"],"sources":["../../../../../../src/components/va-sidebar/VaSidebarItem/VaSidebarItem.vue"],"sourcesContent":["<template>\n  <component\n    ref=\"rootElement\"\n    class=\"va-sidebar__item va-sidebar-item\"\n    tabindex=\"0\"\n    :class=\"{ 'va-sidebar-item--active': $props.active }\"\n    :style=\"computedStyle\"\n    :href=\"hrefComputed\"\n    :to=\"$props.to\"\n    :is=\"tagComputed\"\n    v-on=\"keyboardFocusListeners\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed } from 'vue'\n\nimport {\n  applyColors,\n  useElementRef,\n  useColors,\n  useKeyboardOnlyFocus,\n  useHover,\n  useRouterLink, useRouterLinkProps,\n  useTextColor,\n} from '../../../composables'\nimport { useSidebarItem } from '../hooks/useSidebar'\nimport { useComponentPresetProp } from '../../../composables/useComponentPreset'\n\nexport default defineComponent({\n  name: 'VaSidebarItem',\n\n  props: {\n    ...useRouterLinkProps,\n    ...useComponentPresetProp,\n    active: { type: Boolean, default: false },\n    textColor: { type: String, default: undefined },\n    activeColor: { type: String, default: 'primary' },\n    hoverColor: { type: String, default: undefined },\n    hoverOpacity: { type: Number, default: 0.2 },\n    borderColor: { type: String, default: undefined },\n  },\n\n  setup (props) {\n    const rootElement = useElementRef()\n    const sidebar = useSidebarItem()\n\n    const { isHovered } = useHover(rootElement)\n    const { getColor, getHoverColor, getFocusColor } = useColors()\n    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus()\n\n    const backgroundColorComputed = computed(() => {\n      if (props.active && !isHovered.value && !hasKeyboardFocus.value) {\n        return getColor(props.activeColor)\n      }\n\n      if (hasKeyboardFocus.value) {\n        return getFocusColor(getColor(props.hoverColor || props.activeColor))\n      }\n\n      return '#ffffff00'\n    })\n\n    const textBackground = computed(() => applyColors(getColor(sidebar?.color), backgroundColorComputed.value))\n    const { textColorComputed } = useTextColor(textBackground)\n\n    const computedStyle = computed(() => {\n      const style: Record<string, string> = { color: textColorComputed.value }\n\n      if (isHovered.value || props.active || hasKeyboardFocus.value) {\n        style.backgroundColor = backgroundColorComputed.value\n      }\n\n      if (props.active) {\n        const mergedProps = { ...sidebar, ...props }\n        style.borderColor = getColor(mergedProps.borderColor || mergedProps.activeColor)\n      }\n\n      if (hasKeyboardFocus.value) {\n        style.backgroundColor = getFocusColor(getColor(props.hoverColor || props.activeColor))\n      }\n\n      if (isHovered.value) {\n        style.backgroundColor = getHoverColor(\n          getColor(props.hoverColor || props.activeColor), props.hoverOpacity,\n        )\n      }\n\n      return style\n    })\n\n    const { tagComputed, hrefComputed } = useRouterLink(props)\n\n    return {\n      rootElement,\n      computedStyle,\n      keyboardFocusListeners,\n      tagComputed,\n      hrefComputed,\n      isHovered,\n      backgroundColorComputed,\n      bg: getColor(sidebar?.color),\n      textBackground,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../variables\";\n@import \"../../../styles/resources\";\n\n.va-sidebar__item {\n  border-left: var(--va-sidebar-item-active-border-size) solid transparent;\n  padding-right: var(--va-sidebar-item-active-border-size);\n  display: inline-block;\n  width: 100%;\n  font-family: var(--va-font-family);\n  transition: var(--va-sidebar-item-transition);\n  box-sizing: border-box;\n  color: currentColor;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}