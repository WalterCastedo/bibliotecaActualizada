{"ast":null,"code":"const isIconConfigurationString = config => {\n  return typeof config.name === \"string\";\n};\n\nconst isIconConfigurationRegex = config => {\n  return config.name instanceof RegExp;\n};\n\nexport { isIconConfigurationRegex as a, isIconConfigurationString as i };","map":{"version":3,"mappings":"AA+Ba,kCAA6BA,MAAD,IAAkE;EAClG,cAAOA,OAAOC,IAAd,KAAuB,QAAvB;AACT,CAFa;;AAIA,iCAA4BD,MAAD,IAAiE;EACvG,OAAOA,OAAOC,IAAP,YAAuBC,MAA9B;AACF,CAFa","names":["config","name","RegExp"],"sources":["../../../../../src/services/icon/types.ts"],"sourcesContent":["export interface IconProps {\n  attrs?: Record<string, string | ((...args: any[]) => unknown)>\n\n  /** Vue component */\n  component?: any\n  /** Content that will be passed as text inside icon tag or as slot in component */\n  content?: string\n\n  class?: string,\n  tag?: string\n  color?: string\n  rotation?: number | string\n  spin?: 'clockwise' | 'counter-clockwise' | boolean\n  to?: string\n}\n\nexport interface IconConfigurationString extends IconProps {\n  name: string\n  resolve?: ((dynamicSegments: {[dynamicSegment: string]: string }) => IconProps)\n}\n\nexport interface IconConfigurationRegex extends IconProps {\n  name: RegExp\n  // Need a different resolve method name because ts don't understand types\n  resolveFromRegex?: ((...regexGroupValues: string[]) => IconProps)\n}\n\nexport type IconConfiguration = IconConfigurationString | IconConfigurationRegex\n\nexport type IconConfig = IconConfiguration[]\n\nexport const isIconConfigurationString = (config: IconConfiguration): config is IconConfigurationString => {\n  return typeof config.name === 'string'\n}\n\nexport const isIconConfigurationRegex = (config: IconConfiguration): config is IconConfigurationRegex => {\n  return config.name instanceof RegExp\n}\n"]},"metadata":{},"sourceType":"module"}