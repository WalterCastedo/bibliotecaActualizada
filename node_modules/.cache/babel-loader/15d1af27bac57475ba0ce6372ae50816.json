{"ast":null,"code":"const isMatchRegex = (str, regex) => {\n  return regex.test(str);\n};\n\nconst regexGroupsValues = (str, regex) => {\n  if (typeof regex !== \"string\" && regex.global) {\n    return [...str.matchAll(regex)].map(g => g.slice(1));\n  }\n\n  const match = str.match(regex) || [];\n\n  if (!match) {\n    return [];\n  }\n\n  if (match.length > 1) {\n    return match.slice(1);\n  }\n\n  return match;\n};\n\nexport { isMatchRegex as i, regexGroupsValues as r };","map":{"version":3,"mappings":"AAAa,qBAAe,CAACA,GAAD,EAAcC,KAAd,KAAgC;EACnD,aAAMC,IAAN,CAAWF,GAAX;AACT,CAFa;;AAaA,0BAAoB,CAACA,GAAD,EAAcC,KAAd,KAAgE;EAC/F,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,MAAME,MAAvC,EAA+C;IAE7C,OAAO,CAAC,GAAGH,IAAII,QAAJ,CAAaH,KAAb,CAAJ,EAAyBI,GAAzB,CAAkCC,CAAL,IAAKA,EAAEC,KAAF,CAAQ,CAAR,CAAlC,CAAP;EACF;;EAEA,MAAMC,QAAQR,IAAIQ,KAAJ,CAAUP,KAAV,KAAoB,EAAlC;;EACA,IAAI,CAACO,KAAL,EAAY;IAAE,OAAO,EAAP;EAAU;;EAQpB,UAAMC,MAAN,GAAe,CAAf,EAAkB;IAAS,aAAMF,KAAN,CAAY,CAAZ;EAAe;;EAEvC;AACT,CAlBa","names":["str","regex","test","global","matchAll","map","g","slice","match","length"],"sources":["../../../../../../src/services/icon/utils/regex.ts"],"sourcesContent":["export const isMatchRegex = (str: string, regex: RegExp) => {\n  return regex.test(str)\n}\n\n/**\n * Return values from regex groups\n * @example\n * ```\n * \"fa-phone-o\", /fa-(.*)-(.*)/ -> [\"phone\", \"o\"]\n * \"any string\", /(.*)/ -> [\"any string\"]\n * \"global regex test\", /global (regex) (test)/g -> [['regex', 'test']]\n * ```\n */\nexport const regexGroupsValues = (str: string, regex: RegExp | string): string[] | string[][] => {\n  if (typeof regex !== 'string' && regex.global) {\n    // Global regex can return multiple matches array. So we need to map this all matches and remove non group values.\n    return [...str.matchAll(regex)].map(g => g.slice(1))\n  }\n\n  const match = str.match(regex) || []\n  if (!match) { return [] }\n  /**\n   * If there is groups in result - we need to slice first match\n   * ```\n   * \"test\".match(/(s)/)\n   * > Array [ \"s\", \"s\" ]\n   * ```\n   */\n  if (match.length > 1) { return match.slice(1) }\n\n  return match\n}\n"]},"metadata":{},"sourceType":"module"}