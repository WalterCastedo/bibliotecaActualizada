{"ast":null,"code":"import { onMounted, onBeforeUnmount } from \"vue\";\n\nconst useCaptureEvent = (event, cb, options = {}) => {\n  onMounted(() => window.addEventListener(event, cb, {\n    capture: true,\n    ...options\n  }));\n  onBeforeUnmount(() => window.removeEventListener(event, cb, {\n    capture: true,\n    ...options\n  }));\n};\n\nexport { useCaptureEvent as u };","map":{"version":3,"mappings":";;AAGO,MAAMA,kBAAkB,CAACC,KAAD,EAAgBC,EAAhB,EAA8CC,UAAmC,EAAjF,KAAwF;EAC3GC,gBAAMC,OAAOC,gBAAP,CAAwBL,KAAxB,EAA+BC,EAA/B,EAAmC;IAAEK,SAAS,IAAX;IAAiB,GAAGJ;EAApB,CAAnC,CAAN;EACMK,sBAAMH,OAAOI,mBAAP,CAA2BR,KAA3B,EAAkCC,EAAlC,EAAsC;IAAEK,SAAS,IAAX;IAAiB,GAAGJ;EAApB,CAAtC,CAAN;AAClB,CAHO","names":["useCaptureEvent","event","cb","options","onMounted","window","addEventListener","capture","onBeforeUnmount","removeEventListener"],"sources":["../../../../src/composables/useCaptureEvent.ts"],"sourcesContent":["import { onMounted, onBeforeUnmount } from 'vue'\n\n/** Register globally event catcher. SSR safe */\nexport const useCaptureEvent = (event: string, cb: (...args: any[]) => void, options: AddEventListenerOptions = {}) => {\n  onMounted(() => window.addEventListener(event, cb, { capture: true, ...options }))\n  onBeforeUnmount(() => window.removeEventListener(event, cb, { capture: true, ...options }))\n}\n"]},"metadata":{},"sourceType":"module"}