{"ast":null,"code":"const HIDDEN_TEXTAREA_STYLE = `\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important';\n`;\nconst SIZING_STYLE = [\"letter-spacing\", \"line-height\", \"padding-top\", \"padding-bottom\", \"font-family\", \"font-weight\", \"font-size\", \"text-rendering\", \"text-transform\", \"width\", \"text-indent\", \"padding-left\", \"padding-right\", \"border-width\", \"box-sizing\"];\n\nconst getNodeHeightStyles = node => {\n  const style = window.getComputedStyle(node);\n  return {\n    boxSizing: style.getPropertyValue(\"box-sizing\") || style.getPropertyValue(\"-moz-box-sizing\") || style.getPropertyValue(\"-webkit-box-sizing\"),\n    padding: parseFloat(style.getPropertyValue(\"padding-bottom\")) + parseFloat(style.getPropertyValue(\"padding-top\")),\n    border: parseFloat(style.getPropertyValue(\"border-bottom-width\")) + parseFloat(style.getPropertyValue(\"border-top-width\")),\n    styles: SIZING_STYLE.map(name => `${name}:${style.getPropertyValue(name)}`).join(\";\") + \";\",\n    lineHeight: parseInt(style.getPropertyValue(\"line-height\"))\n  };\n};\n\nlet textarea = null;\n\nconst createHiddenTextarea = (original, styles) => {\n  if (!textarea) {\n    textarea = document.createElement(\"textarea\");\n  }\n\n  textarea.setAttribute(\"style\", styles + HIDDEN_TEXTAREA_STYLE);\n  textarea.value = original.value || original.placeholder || \"\";\n  const wrap = original.getAttribute(\"wrap\");\n\n  if (wrap !== null) {\n    textarea.setAttribute(\"wrap\", wrap);\n  } else {\n    textarea.removeAttribute(\"wrap\");\n  }\n\n  return textarea;\n};\n\nconst useTextareaRowHeight = textarea2 => {\n  const calculateRowHeight = () => {\n    if (!textarea2.value) {\n      return 0;\n    }\n\n    return getNodeHeightStyles(textarea2.value).lineHeight;\n  };\n\n  const calculateHeight = () => {\n    if (!textarea2.value) {\n      return 0;\n    }\n\n    const {\n      boxSizing,\n      padding,\n      border,\n      styles\n    } = getNodeHeightStyles(textarea2.value);\n    const hiddenTextarea = createHiddenTextarea(textarea2.value, styles);\n    document.body.appendChild(hiddenTextarea);\n    let height = hiddenTextarea.scrollHeight;\n\n    if (boxSizing === \"border-box\") {\n      height += border;\n    } else if (boxSizing === \"content-box\") {\n      height -= padding;\n    }\n\n    document.body.removeChild(hiddenTextarea);\n    return height;\n  };\n\n  return {\n    calculateRowHeight,\n    calculateHeight\n  };\n};\n\nexport { useTextareaRowHeight as u };","map":{"version":3,"mappings":"AAEA,MAAMA,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9B;AAYA,MAAMC,eAAe,CACnB,gBADmB,EAEnB,aAFmB,EAGnB,aAHmB,EAInB,gBAJmB,EAKnB,aALmB,EAMnB,aANmB,EAOnB,WAPmB,EAQnB,gBARmB,EASnB,gBATmB,EAUnB,OAVmB,EAWnB,aAXmB,EAYnB,cAZmB,EAanB,eAbmB,EAcnB,cAdmB,EAenB,YAfmB,CAArB;;AAkBA,MAAMC,sBAAuBC,IAAD,IAAuB;EAC3C,cAAQC,OAAOC,gBAAP,CAAwBF,IAAxB,CAAR;EAEC;IACLG,WACEC,MAAMC,gBAAN,CAAuB,YAAvB,KACAD,MAAMC,gBAAN,CAAuB,iBAAvB,CADA,IAEAD,MAAMC,gBAAN,CAAuB,oBAAvB,CAJG;IAKLC,SACEC,WAAWH,MAAMC,gBAAN,CAAuB,gBAAvB,CAAX,IACAE,WAAWH,MAAMC,gBAAN,CAAuB,aAAvB,CAAX,CAPG;IAQLG,QACED,WAAWH,MAAMC,gBAAN,CAAuB,qBAAvB,CAAX,IACAE,WAAWH,MAAMC,gBAAN,CAAuB,kBAAvB,CAAX,CAVG;IAWLI,QACEX,aAAaY,GAAb,CAAiBC,QAAQ,GAAGA,QAAQP,MAAMC,gBAAN,CAAuBM,IAAvB,CAA2B,EAA/D,EAAoEC,IAApE,CAAyE,GAAzE,IAAgF,GAZ7E;IAaLC,YACEC,SAASV,MAAMC,gBAAN,CAAuB,aAAvB,CAAT;EAdG;AAgBT,CAnBA;;AAqBA,IAAIU,WAAuC,IAA3C;;AAEA,MAAMC,uBAAuB,CAACC,QAAD,EAAgCR,MAAhC,KAAmD;EAC9E,IAAI,CAACM,QAAL,EAAe;IACFA,oBAASG,aAAT,CAAuB,UAAvB;EACb;;EAESH,sBAAa,OAAb,EAAsBN,SAASZ,qBAA/B;EACTkB,SAASI,KAAT,GAAiBF,SAASE,KAAT,IAAkBF,SAASG,WAA3B,IAA0C,EAA3D;EACM,aAAOH,SAASI,YAAT,CAAsB,MAAtB,CAAP;;EAEN,IAAIC,SAAS,IAAb,EAAmB;IACRP,sBAAa,MAAb,EAAqBO,IAArB;EAAyB,CADpC,MAEO;IACLP,SAASQ,eAAT,CAAyB,MAAzB;EACF;;EAEO;AACT,CAhBA;;AAkBa,6BAAwBC,SAAD,IAAoD;EACtF,MAAMC,qBAAqB,MAAM;IAC3B,KAACD,UAASL,KAAV,EAAiB;MAAS;IAAE;;IAEzB,2BAAoBK,UAASL,KAA7B,EAAoCN,UAApC;EAAoC,CAH7C;;EAMA,MAAMa,kBAAkB,MAAM;IACxB,KAACF,UAASL,KAAV,EAAiB;MAAS;IAAE;;IAEhC,MAAM;MAAEhB,SAAF;MAAaG,OAAb;MAAsBE,MAAtB;MAA8BC;IAA9B,IAAyCV,oBAAoByB,UAASL,KAA7B,CAA/C;IACA,MAAMQ,iBAAiBX,qBAAqBQ,UAASL,KAA9B,EAAqCV,MAArC,CAAvB;IACSmB,cAAKC,WAAL,CAAiBF,cAAjB;IACT,IAAIG,SAASH,eAAeI,YAA5B;;IAEA,IAAI5B,cAAc,YAAlB,EAAgC;MACpB2B;IAAA,CADZ,MACY,IACD3B,cAAc,aADb,EAC4B;MAC5B2B;IACZ;;IAESF,cAAKI,WAAL,CAAiBL,cAAjB;IAEF;EAAA,CAhBT;;EAmBO;IACLF,kBADK;IAELC;EAFK;AAIT,CA9Ba","names":["HIDDEN_TEXTAREA_STYLE","SIZING_STYLE","getNodeHeightStyles","node","window","getComputedStyle","boxSizing","style","getPropertyValue","padding","parseFloat","border","styles","map","name","join","lineHeight","parseInt","textarea","createHiddenTextarea","original","createElement","value","placeholder","getAttribute","wrap","removeAttribute","textarea2","calculateRowHeight","calculateHeight","hiddenTextarea","document","appendChild","height","scrollHeight","removeChild"],"sources":["../../../../../../../src/components/va-input/components/VaTextarea/useTextareaRowHeight.ts"],"sourcesContent":["import { Ref } from 'vue'\n\nconst HIDDEN_TEXTAREA_STYLE = `\n  min-height:0 !important;\n  max-height:none !important;\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important';\n`\n\nconst SIZING_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing',\n]\n\nconst getNodeHeightStyles = (node: HTMLElement) => {\n  const style = window.getComputedStyle(node)\n\n  return {\n    boxSizing:\n      style.getPropertyValue('box-sizing') ||\n      style.getPropertyValue('-moz-box-sizing') ||\n      style.getPropertyValue('-webkit-box-sizing'),\n    padding:\n      parseFloat(style.getPropertyValue('padding-bottom')) +\n      parseFloat(style.getPropertyValue('padding-top')),\n    border:\n      parseFloat(style.getPropertyValue('border-bottom-width')) +\n      parseFloat(style.getPropertyValue('border-top-width')),\n    styles:\n      SIZING_STYLE.map(name => `${name}:${style.getPropertyValue(name)}`).join(';') + ';',\n    lineHeight:\n      parseInt(style.getPropertyValue('line-height')),\n  }\n}\n\nlet textarea: null | HTMLTextAreaElement = null\n\nconst createHiddenTextarea = (original: HTMLTextAreaElement, styles: string) => {\n  if (!textarea) {\n    textarea = document.createElement('textarea')\n  }\n\n  textarea.setAttribute('style', styles + HIDDEN_TEXTAREA_STYLE)\n  textarea.value = original.value || original.placeholder || ''\n  const wrap = original.getAttribute('wrap')\n\n  if (wrap !== null) {\n    textarea.setAttribute('wrap', wrap)\n  } else {\n    textarea.removeAttribute('wrap')\n  }\n\n  return textarea\n}\n\nexport const useTextareaRowHeight = (textarea: Ref<HTMLTextAreaElement | undefined>) => {\n  const calculateRowHeight = () => {\n    if (!textarea.value) { return 0 }\n\n    return getNodeHeightStyles(textarea.value).lineHeight\n  }\n\n  const calculateHeight = () => {\n    if (!textarea.value) { return 0 }\n\n    const { boxSizing, padding, border, styles } = getNodeHeightStyles(textarea.value)\n    const hiddenTextarea = createHiddenTextarea(textarea.value, styles)\n    document.body.appendChild(hiddenTextarea)\n    let height = hiddenTextarea.scrollHeight\n\n    if (boxSizing === 'border-box') {\n      height += border\n    } else if (boxSizing === 'content-box') {\n      height -= padding\n    }\n\n    document.body.removeChild(hiddenTextarea)\n\n    return height\n  }\n\n  return {\n    calculateRowHeight,\n    calculateHeight,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}