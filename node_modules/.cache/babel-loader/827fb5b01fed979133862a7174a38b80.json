{"ast":null,"code":"import { defineComponent, toRefs, computed, watch, resolveComponent, openBlock, createElementBlock, mergeProps, Fragment, renderList, createVNode, withCtx, renderSlot, normalizeProps, guardReactiveProps, createTextVNode, toDisplayString } from \"vue\";\nimport { u as useGridKeyboardNavigation } from \"../../hooks/grid-keyboard-navigation.js\";\nimport { u as useDatePicker } from \"../../hooks/use-picker.js\";\nimport { V as VaDatePickerCell } from \"../VaDatePickerCell.js\";\nimport { _ as _export_sfc } from \"../../../../../plugin-vue_export-helper.js\";\n\nvar VaMonthPicker_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \".va-month-picker{display:grid;grid-template-columns:repeat(3,1fr);grid-gap:var(--va-date-picker-cell-gap);min-width:calc(var(--va-date-picker-cell-size) * 7 + var(--va-date-picker-cell-gap) * 6);width:100%}.va-month-picker__month-wrapper{border-radius:var(--va-date-picker-cell-radius);text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;overflow:hidden}\\n\")();\n\nconst _sfc_main = defineComponent({\n  name: \"VaMonthPicker\",\n  components: {\n    VaDatePickerCell\n  },\n  props: {\n    modelValue: {\n      type: [Date, Array, Object]\n    },\n    monthNames: {\n      type: Array,\n      required: true\n    },\n    view: {\n      type: Object,\n      default: () => ({\n        type: \"month\"\n      })\n    },\n    allowedMonths: {\n      type: Function,\n      default: void 0\n    },\n    highlightToday: {\n      type: Boolean,\n      default: true\n    },\n    mode: {\n      type: String,\n      default: \"auto\"\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    }\n  },\n  emits: [\"update:modelValue\", \"hover:month\", \"click:month\"],\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      view\n    } = toRefs(props);\n    const months = computed(() => Array.from(Array(12).keys()).map(month => new Date(view.value.year, month)));\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange\n    } = useDatePicker(\"month\", months, props, emit);\n\n    const isDisabled = date => props.allowedMonths === void 0 ? false : !props.allowedMonths(date);\n\n    const {\n      focusedCellIndex,\n      containerAttributes\n    } = useGridKeyboardNavigation({\n      rowSize: 3,\n      start: 0,\n      end: months.value.length,\n      onSelected: selectedIndex => onClick(months.value[selectedIndex])\n    });\n    watch(focusedCellIndex, index => {\n      hoveredIndex.value = index;\n    });\n    watch(hoveredIndex, index => {\n      focusedCellIndex.value = index;\n    });\n    return {\n      months,\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isDisabled,\n      containerAttributes,\n      focusedCellIndex\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"onMouseenter\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_date_picker_cell = resolveComponent(\"va-date-picker-cell\");\n\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    class: \"va-month-picker\"\n  }, _ctx.containerAttributes), [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.months, (month, monthIndex) => {\n    return openBlock(), createElementBlock(\"div\", {\n      key: monthIndex,\n      class: \"va-month-picker__month-wrapper\",\n      onMouseenter: $event => _ctx.hoveredIndex = monthIndex,\n      onMouseleave: _cache[0] || (_cache[0] = $event => _ctx.hoveredIndex = -1)\n    }, [createVNode(_component_va_date_picker_cell, {\n      \"in-range\": !!_ctx.isInRange(month),\n      selected: !!_ctx.isSelected(month),\n      disabled: !!_ctx.isDisabled(month),\n      today: !!_ctx.isToday(month),\n      focused: _ctx.hoveredIndex === monthIndex,\n      \"highlight-today\": _ctx.highlightToday,\n      readonly: _ctx.$props.readonly,\n      color: _ctx.color,\n      onClick: $event => {\n        _ctx.onClick(month);\n\n        _ctx.focusedCellIndex = monthIndex;\n      }\n    }, {\n      default: withCtx(() => [renderSlot(_ctx.$slots, \"month\", normalizeProps(guardReactiveProps({\n        monthIndex,\n        month: _ctx.monthNames[monthIndex]\n      })), () => [createTextVNode(toDisplayString(_ctx.monthNames[monthIndex]), 1)])]),\n      _: 2\n    }, 1032, [\"in-range\", \"selected\", \"disabled\", \"today\", \"focused\", \"highlight-today\", \"readonly\", \"color\", \"onClick\"])], 40, _hoisted_1);\n  }), 128))], 16);\n}\n\nvar VaMonthPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { VaMonthPicker as V };\nimport './VaMonthPicker.css';","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","VaDatePickerCell","props","modelValue","type","Date","Array","Object","monthNames","required","view","default","allowedMonths","Function","highlightToday","Boolean","mode","String","readonly","color","emits","setup","emit","toRefs","computed","from","keys","map","month","value","year","hoveredIndex","onClick","isToday","isSelected","isInRange","useDatePicker","months","date","focusedCellIndex","containerAttributes","useGridKeyboardNavigation","rowSize","start","end","length","onSelected","selectedIndex","watch","index","isDisabled","_createElementBlock","class","_mergeProps","_ctx","_Fragment","_renderList","monthIndex","key","onMouseenter","$event","onMouseleave","_cache","_createVNode","_component_va_date_picker_cell","selected","disabled","today","focused","$props","_renderSlot","$slots","_normalizeProps","_toDisplayString","_createTextVNode"],"sources":["../../../../../../../src/components/va-date-picker/components/VaMonthPicker/VaMonthPicker.vue"],"sourcesContent":["<template>\n  <div class=\"va-month-picker\" v-bind=\"containerAttributes\">\n    <div\n      v-for=\"(month, monthIndex) in months\"\n      :key=\"monthIndex\"\n      class=\"va-month-picker__month-wrapper\"\n      @mouseenter=\"hoveredIndex = monthIndex\"\n      @mouseleave=\"hoveredIndex = -1\"\n    >\n      <va-date-picker-cell\n        :in-range=\"!!isInRange(month)\"\n        :selected=\"!!isSelected(month)\"\n        :disabled=\"!!isDisabled(month)\"\n        :today=\"!!isToday(month)\"\n        :focused=\"hoveredIndex === monthIndex\"\n        :highlight-today=\"highlightToday\"\n        :readonly=\"$props.readonly\"\n        :color=\"color\"\n        @click=\"onClick(month); focusedCellIndex = monthIndex\"\n      >\n        <slot name=\"month\" v-bind=\"{ monthIndex, month: monthNames[monthIndex] }\">\n          {{ monthNames[monthIndex] }}\n        </slot>\n      </va-date-picker-cell>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, toRefs, watch } from 'vue'\n\nimport { useGridKeyboardNavigation } from '../../hooks/grid-keyboard-navigation'\nimport { useDatePicker } from '../../hooks/use-picker'\n\nimport { DatePickerMode, DatePickerView, DatePickerModelValue } from '../../types'\n\nimport VaDatePickerCell from '../VaDatePickerCell.vue'\n\nexport default defineComponent({\n  name: 'VaMonthPicker',\n\n  components: { VaDatePickerCell },\n\n  props: {\n    modelValue: { type: [Date, Array, Object] as PropType<DatePickerModelValue> },\n    monthNames: { type: Array as PropType<string[]>, required: true },\n    view: { type: Object as PropType<DatePickerView>, default: () => ({ type: 'month' }) },\n    allowedMonths: { type: Function as PropType<(date: Date) => boolean>, default: undefined },\n    highlightToday: { type: Boolean, default: true },\n    mode: { type: String as PropType<DatePickerMode>, default: 'auto' },\n    readonly: { type: Boolean, default: false },\n    color: { type: String, default: 'primary' },\n  },\n\n  emits: ['update:modelValue', 'hover:month', 'click:month'],\n\n  setup (props, { emit }) {\n    const { view } = toRefs(props)\n\n    const months = computed(() => Array.from(Array(12).keys()).map((month) => new Date(view.value.year, month)))\n\n    const {\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n    } = useDatePicker('month', months, props, emit)\n\n    const isDisabled = (date: Date) => props.allowedMonths === undefined ? false : !props.allowedMonths(date)\n\n    const {\n      focusedCellIndex, containerAttributes,\n    } = useGridKeyboardNavigation({\n      rowSize: 3,\n      start: 0,\n      end: months.value.length,\n      onSelected: (selectedIndex) => onClick(months.value[selectedIndex]),\n    })\n\n    watch(focusedCellIndex, (index) => { hoveredIndex.value = index })\n    watch(hoveredIndex, (index) => { focusedCellIndex.value = index })\n\n    return {\n      months,\n      hoveredIndex,\n      onClick,\n      isToday,\n      isSelected,\n      isInRange,\n      isDisabled,\n      containerAttributes,\n      focusedCellIndex,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.va-month-picker {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr); // 4 columns\n  grid-gap: var(--va-date-picker-cell-gap);\n  min-width: calc(var(--va-date-picker-cell-size) * 7 + var(--va-date-picker-cell-gap) * 6); // 7 days + gap\n  width: 100%;\n\n  &__month-wrapper {\n    border-radius: var(--va-date-picker-cell-radius);\n    text-align: center;\n    user-select: none;\n    overflow: hidden;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}