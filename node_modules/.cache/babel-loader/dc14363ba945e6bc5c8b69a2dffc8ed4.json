{"ast":null,"code":"import { ref } from \"vue\";\n\nconst parse = text => {\n  const m = text.match(/[0-9]{1,2}/g);\n\n  if (!m) {\n    return [];\n  }\n\n  return m.map(s => Number(s));\n};\n\nconst parsePeriod = text => {\n  const m = text.match(/pm|am/i);\n\n  if (!m) {\n    return null;\n  }\n\n  return Number(m[0].toLowerCase() === \"pm\");\n};\n\nconst defaultParseDateFunction = text => {\n  const d = new Date();\n  const [h, m, s] = parse(text);\n  const period = parsePeriod(text);\n\n  if (!h) {\n    return null;\n  }\n\n  const is12format = period !== null && h <= 12;\n  const isPM = is12format && !!period;\n  const fh = is12format ? h === 12 ? 0 : h : h;\n  d.setHours(Math.min(fh || 0, is12format ? 12 : 24) + (isPM ? 12 : 0));\n  d.setMinutes(Math.min(m || 0, 60));\n  d.setSeconds(Math.min(s || 0, 60));\n  return d;\n};\n\nconst useTimeParser = props => {\n  const getParseDateFn = () => props.parse || defaultParseDateFunction;\n\n  const isValid = ref(true);\n\n  const parseDate = text => {\n    const parse3 = getParseDateFn();\n    const result = parse3(text);\n\n    if (!result) {\n      isValid.value = false;\n    }\n\n    return result;\n  };\n\n  const parse2 = text => {\n    isValid.value = true;\n    return parseDate(text);\n  };\n\n  return {\n    parse: parse2,\n    isValid\n  };\n};\n\nexport { useTimeParser as u };","map":{"version":3,"mappings":";;AAEA,MAAMA,QAASC,IAAD,IAAkB;EACxB,UAAIA,KAAKC,KAAL,CAAW,aAAX,CAAJ;;EAEN,IAAI,CAACC,CAAL,EAAQ;IAAE,OAAO,EAAP;EAAU;;EAEpB,OAAOA,EAAEC,GAAF,CAAOC,CAAD,IAAOC,OAAOD,CAAP,CAAb,CAAP;AACF,CANA;;AAQA,MAAME,cAAeN,IAAD,IAAkB;EAC9B,UAAIA,KAAKC,KAAL,CAAW,QAAX,CAAJ;;EAEN,IAAI,CAACC,CAAL,EAAQ;IAAS;EAAK;;EAEtB,OAAOG,OAAOH,EAAE,CAAF,EAAKK,WAAL,OAAuB,IAA9B,CAAP;AACF,CANA;;AAQA,MAAMC,2BAA4BR,IAAD,IAAkB;EAC3C,UAAI,IAAIS,IAAJ,EAAJ;EAEN,MAAM,CAACC,CAAD,EAAIR,CAAJ,EAAOE,CAAP,IAAYL,MAAMC,IAAN,CAAlB;EACM,eAASM,YAAYN,IAAZ,CAAT;;EAEN,IAAI,CAACU,CAAL,EAAQ;IAAS;EAAK;;EAEhB,mBAAaC,WAAW,IAAX,IAAmBD,KAAK,EAArC;EACA,aAAOE,cAAc,CAAC,CAACD,MAAvB;EAEN,MAAME,KAAKD,aAAcF,MAAM,EAAN,GAAW,CAAX,GAAeA,CAA7B,GAAkCA,CAA7C;EAEEI,WAASC,KAAKC,GAAL,CAAUH,MAAM,CAAhB,EAAoBD,aAAa,EAAb,GAAkB,EAAtC,KAAoDK,YAAK,CAAzD,CAAT;EACFH,EAAEI,UAAF,CAAaH,KAAKC,GAAL,CAASd,KAAK,CAAd,EAAiB,EAAjB,CAAb;EACAY,EAAEK,UAAF,CAAaJ,KAAKC,GAAL,CAASZ,KAAK,CAAd,EAAiB,EAAjB,CAAb;EAEO;AACT,CAlBA;;AAoBa,sBAAiBgB,KAAD,IAEvB;EAIE,uBAAiB,MAAMA,MAAMrB,KAAN,IAAeS,wBAAtC;;EAEA,gBAAUa,IAAI,IAAJ,CAAV;;EAEA,kBAAarB,IAAD,IAAkB;IAClC,MAAMsB,SAAQC,gBAAd;IAEM,eAASD,OAAMtB,IAAN,CAAT;;IAEN,IAAI,CAACwB,MAAL,EAAa;MAAEC,QAAQC,KAAR,GAAgB,KAAhB;IAAsB;;IAE9B;EAAA,CAPH;;EAUA,eAAS1B,IAAD,IAAkB;IAC9ByB,QAAQC,KAAR,GAAgB,IAAhB;IAeA,OAAOC,UAAU3B,IAAV,CAAP;EAAqB,CAhBjB;;EAmBC;IACLD,aADK;IAEL0B;EAFK;AAIT,CA3Ca","names":["parse","text","match","m","map","s","Number","parsePeriod","toLowerCase","defaultParseDateFunction","Date","h","period","is12format","fh","d","Math","min","isPM","setMinutes","setSeconds","props","ref","parse3","getParseDateFn","result","isValid","value","parseDate"],"sources":["../../../../../../src/components/va-time-input/hooks/time-text-parser.ts"],"sourcesContent":["import { Ref, ref } from 'vue'\n\nconst parse = (text: string) => {\n  const m = text.match(/[0-9]{1,2}/g)\n\n  if (!m) { return [] }\n\n  return m.map((s) => Number(s))\n}\n\nconst parsePeriod = (text: string) => {\n  const m = text.match(/pm|am/i)\n\n  if (!m) { return null }\n\n  return Number(m[0].toLowerCase() === 'pm')\n}\n\nconst defaultParseDateFunction = (text: string) => {\n  const d = new Date()\n\n  const [h, m, s] = parse(text)\n  const period = parsePeriod(text)\n\n  if (!h) { return null }\n\n  const is12format = period !== null && h <= 12\n  const isPM = is12format && !!period\n  // Switch 12 to 0, because of 12h format\n  const fh = is12format ? (h === 12 ? 0 : h) : h\n\n  d.setHours(Math.min((fh || 0), is12format ? 12 : 24) + (isPM ? 12 : 0))\n  d.setMinutes(Math.min(m || 0, 60))\n  d.setSeconds(Math.min(s || 0, 60))\n\n  return d\n}\n\nexport const useTimeParser = (props: {\n  parse?: (input: string, isValidRef?: Ref<boolean>) => Date,\n}) => {\n  // const isTextIsMultipleDates = (text: string) => text.includes(props.delimiter)\n  // const isTextIsDateRange = (text: string) => text.includes(props.rangeDelimiter)\n\n  const getParseDateFn = () => props.parse || defaultParseDateFunction\n\n  const isValid = ref(true)\n\n  const parseDate = (text: string) => {\n    const parse = getParseDateFn()\n\n    const result = parse(text)\n\n    if (!result) { isValid.value = false }\n\n    return result\n  }\n\n  const parse = (text: string) => {\n    isValid.value = true\n\n    // if (props.parse) {\n    //   return props.parse(text, isValid)\n    // }\n\n    // if (isTextIsMultipleDates(text)) {\n    //   return text.split(props.delimiter).map((dateText) => parseDate(dateText))\n    // }\n\n    // if (isTextIsDateRange(text)) {\n    //   const [start, end] = text.split(props.rangeDelimiter).map((dateText) => parseDate(dateText))\n    //   return { start, end }\n    // }\n\n    return parseDate(text)\n  }\n\n  return {\n    parse,\n    isValid,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}