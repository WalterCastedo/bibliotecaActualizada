{"ast":null,"code":"const getEvent = event => typeof event === \"object\" ? event.listen : event;\n\nconst getEmit = event => typeof event === \"object\" ? event.emit : event;\n\nconst useEmitProxy = events => {\n  const createEmits = () => events.map(getEmit);\n\n  const eventToListenerName = event => {\n    const eventName = event.charAt(0).toUpperCase() + event.slice(1);\n    return `on${eventName}`;\n  };\n\n  const createListeners = emit => {\n    return events.reduce((acc, key) => ({ ...acc,\n      [eventToListenerName(getEvent(key))]: (...args) => emit(getEmit(key), ...args)\n    }), {});\n  };\n\n  const createVOnListeners = emit => {\n    return events.reduce((acc, key) => ({ ...acc,\n      [getEvent(key)]: (...args) => emit(getEmit(key), ...args)\n    }), {});\n  };\n\n  return {\n    createListeners,\n    createVOnListeners,\n    createEmits\n  };\n};\n\nexport { useEmitProxy as u };","map":{"version":3,"mappings":"AAEA,MAAMA,WAAYC,KAAD,IAAmB,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,MAAMC,MAAlC,GAA2CD,KAA/E;;AACA,MAAME,UAAWF,KAAD,IAAmB,OAAOA,KAAP,KAAiB,QAAjB,GAA4BA,MAAMG,IAAlC,GAAyCH,KAA5E;;AAEa,qBAAgBI,MAAD,IAAsB;EAChD,MAAMC,cAAc,MAAMD,OAAOE,GAAP,CAAWJ,OAAX,CAA1B;;EAEM,4BAAuBF,KAAD,IAAmB;IACvC,kBAAYA,MAAMO,MAAN,CAAa,CAAb,EAAgBC,WAAhB,KAAgCR,MAAMS,KAAN,CAAY,CAAZ,CAA5C;IACN,OAAO,KAAKC,WAAZ;EAAY,CAFR;;EAKA,wBAAmBP,IAAD,IAAmD;IACzE,OAAOC,OAAOO,MAAP,CAAc,CAACC,GAAD,EAAMC,GAAN,MAAe,EAClC,GAAGD,GAD+B;MAElC,CAACE,oBAAoBf,SAASc,GAAT,CAApB,CAAD,GAAsC,IAAIE,IAAJ,KAAoBZ,KAAKD,QAAQW,GAAR,CAAL,EAAmB,GAAGE,IAAtB;IAFxB,CAAf,CAAd,EAGH,EAHG,CAAP;EAG6B,CAJzB;;EAOA,2BAAsBZ,IAAD,IAAmD;IAC5E,OAAOC,OAAOO,MAAP,CAAc,CAACC,GAAD,EAAMC,GAAN,MAAe,EAClC,GAAGD,GAD+B;MAElC,CAACb,SAASc,GAAT,CAAD,GAAiB,IAAIE,IAAJ,KAAoBZ,KAAKD,QAAQW,GAAR,CAAL,EAAmB,GAAGE,IAAtB;IAFH,CAAf,CAAd,EAGH,EAHG,CAAP;EAG6B,CAJzB;;EAOC;IACLC,eADK;IAELC,kBAFK;IAGLZ;EAHK;AAKT,CA3Ba","names":["getEvent","event","listen","getEmit","emit","events","createEmits","map","charAt","toUpperCase","slice","eventName","reduce","acc","key","eventToListenerName","args","createListeners","createVOnListeners"],"sources":["../../../../src/composables/useEmitProxy.ts"],"sourcesContent":["type Events = string | { listen: string, emit: string }\n\nconst getEvent = (event: Events) => typeof event === 'object' ? event.listen : event\nconst getEmit = (event: Events) => typeof event === 'object' ? event.emit : event\n\nexport const useEmitProxy = (events: Events[]) => {\n  const createEmits = () => events.map(getEmit)\n\n  const eventToListenerName = (event: string) => {\n    const eventName = event.charAt(0).toUpperCase() + event.slice(1)\n    return `on${eventName}`\n  }\n\n  const createListeners = (emit: (event: string, ...args: any[]) => void) => {\n    return events.reduce((acc, key) => ({\n      ...acc,\n      [eventToListenerName(getEvent(key))]: (...args: any[]) => emit(getEmit(key), ...args),\n    }), {} as Record<string, any>)\n  }\n\n  const createVOnListeners = (emit: (event: string, ...args: any[]) => void) => {\n    return events.reduce((acc, key) => ({\n      ...acc,\n      [getEvent(key)]: (...args: any[]) => emit(getEmit(key), ...args),\n    }), {} as Record<string, any>)\n  }\n\n  return {\n    createListeners,\n    createVOnListeners,\n    createEmits,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}