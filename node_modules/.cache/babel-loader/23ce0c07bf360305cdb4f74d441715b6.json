{"ast":null,"code":"import { watch, unref } from \"vue\";\nimport { u as useWindow } from \"./useWindow.js\";\n\nconst useEvent = (event, listener, target) => {\n  const source = target && typeof target !== \"boolean\" ? target : useWindow();\n  const capture = typeof target === \"boolean\" ? target : false;\n  watch(source, (newValue, oldValue) => {\n    var _a, _b;\n\n    if (!Array.isArray(event)) {\n      (_a = unref(newValue)) == null ? void 0 : _a.addEventListener(event, listener, capture);\n      (_b = unref(oldValue)) == null ? void 0 : _b.removeEventListener(event, listener, capture);\n    } else {\n      event.forEach(e => {\n        var _a2, _b2;\n\n        (_a2 = unref(newValue)) == null ? void 0 : _a2.addEventListener(e, listener, capture);\n        (_b2 = unref(oldValue)) == null ? void 0 : _b2.removeEventListener(e, listener, capture);\n      });\n    }\n  }, {\n    immediate: true\n  });\n};\n\nexport { useEvent as u };","map":{"version":3,"mappings":";;;AAoBO,MAAMA,WAAW,CACtBC,KADsB,EAEtBC,QAFsB,EAGtBC,MAHsB,KAInB;EACH,MAAMC,SAASD,UAAU,OAAOA,MAAP,KAAkB,SAA5B,GAAwCA,MAAxC,GAAiDE,WAAhE;EACA,MAAMC,UAAU,OAAOH,MAAP,KAAkB,SAAlB,GAA8BA,MAA9B,GAAuC,KAAvD;EAEMI,cAAQ,CAACC,QAAD,EAAWC,QAAX,KAAwB;;;IACpC,IAAI,CAACC,MAAMC,OAAN,CAAcV,KAAd,CAAL,EAA2B;MACzB,YAAMO,QAAN,yBAAiBI,gBAAjB,CAAkCX,KAAlC,EAAyCC,QAAzC,EAA0DI,OAA1D;MACA,YAAMG,QAAN,yBAAiBI,mBAAjB,CAAqCZ,KAArC,EAA4CC,QAA5C,EAA6DI,OAA7D;IAAoE,CAFtE,MAGO;MACCL,cAASa,CAAD,IAAO;;;QACnB,aAAMN,QAAN,0BAAiBI,gBAAjB,CAAkCE,CAAlC,EAAqCZ,QAArC,EAAsDI,OAAtD;QACA,aAAMG,QAAN,0BAAiBI,mBAAjB,CAAqCC,CAArC,EAAwCZ,QAAxC,EAAyDI,OAAzD;MACD,CAHK;IAIR;EAAA,CATI,EAUH;IAAES,WAAW;EAAb,CAVG;AAWR,CAnBO","names":["useEvent","event","listener","target","source","useWindow","capture","watch","newValue","oldValue","Array","isArray","addEventListener","removeEventListener","e","immediate"],"sources":["../../../../src/composables/useEvent.ts"],"sourcesContent":["import { Ref, unref, watch } from 'vue'\nimport { useWindow } from './useWindow'\n\ntype MaybeRef<T> = Ref<T> | T\n\ntype UseEventEventName = keyof GlobalEventHandlersEventMap | string[]\ntype UseEventEvent<N extends UseEventEventName, D> = N extends keyof GlobalEventHandlersEventMap ? GlobalEventHandlersEventMap[N] : D\n\n/**\n * SSR safety listen to target event.\n * @param target by default window\n * @param event if string, listener will be fully typed. If array of string, you need to type event manually.\n *\n *\n * @example\n * ```ts\n * useEvent('resize': (e) => {})\n * useEvent(['mousedown', 'mouseup', 'mousemove'], (e) => {})\n * ```\n */\nexport const useEvent = <N extends UseEventEventName, E extends Event>(\n  event: N,\n  listener: (this: GlobalEventHandlers, event: UseEventEvent<N, E>) => any,\n  target?: MaybeRef<GlobalEventHandlers | undefined | null> | boolean,\n) => {\n  const source = target && typeof target !== 'boolean' ? target : useWindow()\n  const capture = typeof target === 'boolean' ? target : false\n\n  watch(source, (newValue, oldValue) => {\n    if (!Array.isArray(event)) {\n      unref(newValue)?.addEventListener(event, listener as any, capture)\n      unref(oldValue)?.removeEventListener(event, listener as any, capture)\n    } else {\n      event.forEach((e) => {\n        unref(newValue)?.addEventListener(e, listener as any, capture)\n        unref(oldValue)?.removeEventListener(e, listener as any, capture)\n      })\n    }\n  }, { immediate: true })\n}\n"]},"metadata":{},"sourceType":"module"}