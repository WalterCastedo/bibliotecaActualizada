{"ast":null,"code":"import { defineComponent, computed, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createElementBlock, Fragment, renderList, createTextVNode, toDisplayString } from \"vue\";\nimport { e as extractComponentProps } from \"../../utils/component-options/extract-component-options.js\";\nimport { o as omit_1 } from \"../../../vendor.js\";\nimport { u as useColors } from \"../../composables/useColors.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { V as VaButton } from \"../va-button/index.js\";\nimport { V as VaButtonGroup } from \"../va-button-group/index.js\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper.js\";\n\nvar VaButtonToggle_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => '.va-button-toggle .va-button{height:auto}.va-button-toggle .va-button:focus-visible{outline:2px solid var(--va-focus)!important;border-radius:\"inherit\";outline-offset:-2px}\\n')();\n\nconst VaButtonGroupProps = extractComponentProps(VaButtonGroup);\n\nconst _sfc_main = defineComponent({\n  name: \"VaButtonToggle\",\n  components: {\n    VaButtonGroup,\n    VaButton\n  },\n  emits: [\"update:modelValue\"],\n  props: { ...VaButtonGroupProps,\n    ...useComponentPresetProp,\n    modelValue: {\n      type: [String, Number],\n      default: \"\"\n    },\n    options: {\n      type: Array,\n      required: true\n    },\n    activeButtonTextColor: {\n      type: String\n    },\n    toggleColor: {\n      type: String,\n      default: \"\"\n    }\n  },\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      getColor,\n      shiftHSLAColor\n    } = useColors();\n    VaButtonGroupProps.color;\n    const colorComputed = computed(() => getColor(props.color));\n\n    const isToggled = value => value === props.modelValue;\n\n    const activeButtonColor = computed(() => {\n      if (props.toggleColor) {\n        return getColor(props.toggleColor);\n      }\n\n      return shiftHSLAColor(colorComputed.value, {\n        l: props.plain ? -16 : -6\n      });\n    });\n    const activeButtonBackgroundOpacityComputed = computed(() => {\n      if (!props.preset || props.preset === \"default\") {\n        return {};\n      }\n\n      return {\n        backgroundOpacity: props.pressedOpacity\n      };\n    });\n    const activeButtonPropsComputed = computed(() => ({\n      color: activeButtonColor.value,\n      textColor: props.activeButtonTextColor,\n      ...activeButtonBackgroundOpacityComputed.value\n    }));\n\n    const getButtonProps = (option = {}) => {\n      const iconsProps = {\n        icon: option.icon,\n        iconRight: option.iconRight\n      };\n\n      if (!isToggled(option.value)) {\n        return iconsProps;\n      }\n\n      return { ...(isToggled(option.value) && activeButtonPropsComputed.value),\n        ...iconsProps\n      };\n    };\n\n    const buttonGroupPropsComputed = computed(() => omit_1(props, [\"modelValue\", \"options\", \"activeButtonTextColor\", \"toggleColor\"]));\n\n    const changeValue = value => emit(\"update:modelValue\", value);\n\n    return {\n      buttonGroupPropsComputed,\n      getButtonProps,\n      changeValue,\n      isToggled\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_button = resolveComponent(\"va-button\");\n\n  const _component_va_button_group = resolveComponent(\"va-button-group\");\n\n  return openBlock(), createBlock(_component_va_button_group, mergeProps({\n    class: \"va-button-toggle\"\n  }, _ctx.buttonGroupPropsComputed), {\n    default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, option => {\n      return openBlock(), createBlock(_component_va_button, mergeProps({\n        key: option.value,\n        \"aria-pressed\": _ctx.isToggled(option.value)\n      }, _ctx.getButtonProps(option), {\n        onClick: $event => _ctx.changeValue(option.value)\n      }), {\n        default: withCtx(() => [createTextVNode(toDisplayString(option.label), 1)]),\n        _: 2\n      }, 1040, [\"aria-pressed\", \"onClick\"]);\n    }), 128))]),\n    _: 1\n  }, 16);\n}\n\nvar _VaButtonToggle = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaButtonToggle as _ };\nimport './VaButtonToggle.css';","map":{"version":3,"mappings":"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","names":["VaButtonGroupProps","extractComponentProps","VaButtonGroup","_sfc_main","defineComponent","name","components","VaButton","emits","props","useComponentPresetProp","modelValue","type","String","Number","default","options","Array","required","activeButtonTextColor","toggleColor","setup","emit","getColor","shiftHSLAColor","useColors","color","colorComputed","computed","isToggled","value","l","plain","preset","backgroundOpacity","pressedOpacity","activeButtonColor","textColor","activeButtonBackgroundOpacityComputed","getButtonProps","option","iconsProps","icon","iconRight","activeButtonPropsComputed","omit","changeValue","buttonGroupPropsComputed","_component_va_button_group","_createBlock","class","_mergeProps","_ctx","_createElementBlock","_Fragment","_renderList","_component_va_button","key","onClick","$event","label","_toDisplayString","_createTextVNode","_","_withCtx"],"sources":["../../../../../src/components/va-button-toggle/VaButtonToggle.vue"],"sourcesContent":["<template>\n  <va-button-group\n    class=\"va-button-toggle\"\n    v-bind=\"buttonGroupPropsComputed\"\n  >\n    <va-button\n      v-for=\"option in options\"\n      :key=\"option.value\"\n      :aria-pressed=\"isToggled(option.value)\"\n      v-bind.prop=\"getButtonProps(option)\"\n      @click=\"changeValue(option.value)\"\n    >\n      {{ option.label }}\n    </va-button>\n  </va-button-group>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\nimport { extractComponentProps } from '../../utils/component-options'\n\nimport { useDeprecated, useComponentPresetProp, useColors } from '../../composables'\n\nimport { ButtonOption } from './types'\n\nimport { VaButton } from '../va-button'\nimport { VaButtonGroup } from '../va-button-group'\n\nimport omit from 'lodash/omit.js'\n\nconst VaButtonGroupProps = extractComponentProps(VaButtonGroup)\n\nexport default defineComponent({\n  name: 'VaButtonToggle',\n  components: {\n    VaButtonGroup,\n    VaButton,\n  },\n  emits: ['update:modelValue'],\n  props: {\n    ...VaButtonGroupProps,\n    ...useComponentPresetProp,\n    modelValue: { type: [String, Number], default: '' },\n    options: {\n      type: Array as PropType<ButtonOption[]>,\n      required: true,\n    },\n    activeButtonTextColor: { type: String },\n    toggleColor: { type: String, default: '' },\n  },\n\n  setup (props, { emit }) {\n    // TODO(1.6.0): Remove deprecated props\n    useDeprecated(['flat', 'outline'])\n\n    const { getColor, shiftHSLAColor } = useColors()\n    const p = VaButtonGroupProps.color\n    const colorComputed = computed(() => getColor(props.color))\n\n    const isToggled = (value: any) => value === props.modelValue\n\n    const activeButtonColor = computed(() => {\n      if (props.toggleColor) { return getColor(props.toggleColor) }\n      return shiftHSLAColor(colorComputed.value, { l: props.plain ? -16 : -6 })\n    })\n\n    const activeButtonBackgroundOpacityComputed = computed(() => {\n      if (!props.preset || props.preset === 'default') { return {} }\n      return { backgroundOpacity: props.pressedOpacity }\n    })\n\n    const activeButtonPropsComputed = computed(() => ({\n      color: activeButtonColor.value,\n      textColor: props.activeButtonTextColor,\n      ...activeButtonBackgroundOpacityComputed.value,\n    }))\n\n    const getButtonProps = (option: ButtonOption = {} as ButtonOption) => {\n      const iconsProps = { icon: option.icon, iconRight: option.iconRight }\n\n      if (!isToggled(option.value)) { return iconsProps }\n      return {\n        ...(isToggled(option.value) && activeButtonPropsComputed.value),\n        ...iconsProps,\n      }\n    }\n\n    const buttonGroupPropsComputed = computed(() =>\n      omit(props, ['modelValue', 'options', 'activeButtonTextColor', 'toggleColor']),\n    )\n\n    const changeValue = (value: any) => emit('update:modelValue', value)\n\n    return {\n      buttonGroupPropsComputed,\n      getButtonProps,\n      changeValue,\n      isToggled,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import '../../styles/resources';\n\n.va-button-toggle {\n  .va-button {\n    @include keyboard-focus-outline($offset: -2px);\n\n    height: auto;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}