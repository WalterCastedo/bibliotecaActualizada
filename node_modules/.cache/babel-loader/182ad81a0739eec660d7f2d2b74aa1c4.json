{"ast":null,"code":"import { ref, unref } from \"vue\";\n\nfunction isUndefined(t) {\n  return t === void 0;\n}\n\nconst useGridKeyboardNavigation = ({\n  rowSize,\n  start,\n  end,\n  onSelected,\n  onFocusIndex\n}) => {\n  const focusedCellIndex = ref(-1);\n  let previouslyClicked = false;\n\n  const onMousedown = () => {\n    previouslyClicked = true;\n  };\n\n  const onFocus = () => {\n    if (previouslyClicked) {\n      return;\n    }\n\n    previouslyClicked = false;\n    const index = onFocusIndex === void 0 ? unref(start) || 0 : unref(onFocusIndex);\n    focusedCellIndex.value = index;\n  };\n\n  const onBlur = () => {\n    previouslyClicked = false;\n    focusedCellIndex.value = -1;\n  };\n\n  const onKeydown = e => {\n    if ([\"ArrowRight\", \"ArrowLeft\", \"ArrowDown\", \"ArrowUp\", \"Enter\", \"Space\"].includes(e.key)) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    if (e.key === \"Enter\" || e.key === \"Space\") {\n      if (onSelected === void 0) {\n        return;\n      }\n\n      onSelected(focusedCellIndex.value);\n      return;\n    }\n\n    if (e.key === \"ArrowRight\") {\n      focusedCellIndex.value += 1;\n    }\n\n    if (e.key === \"ArrowLeft\") {\n      focusedCellIndex.value -= 1;\n    }\n\n    if (e.key === \"ArrowDown\") {\n      focusedCellIndex.value += rowSize;\n    }\n\n    if (e.key === \"ArrowUp\") {\n      focusedCellIndex.value -= rowSize;\n    }\n\n    if (!isUndefined(start) && focusedCellIndex.value < unref(start)) {\n      focusedCellIndex.value = unref(start);\n    }\n\n    if (!isUndefined(end) && focusedCellIndex.value > unref(end) - 1) {\n      focusedCellIndex.value = unref(end) - 1;\n    }\n  };\n\n  const containerAttributes = {\n    onFocus,\n    onKeydown,\n    onBlur,\n    onMousedown,\n    tabindex: 0\n  };\n  return {\n    focusedCellIndex,\n    containerAttributes\n  };\n};\n\nexport { useGridKeyboardNavigation as u };","map":{"version":3,"mappings":";;AAEA,qBAAyBA,CAAzB,EAA2D;EACzD,OAAOA,MAAM,MAAb;AACF;;AAEO,MAAMC,4BAA4B,CACvC;EACEC,OADF;EAEEC,KAFF;EAGEC,GAHF;EAIEC,UAJF;EAKEC;AALF,CADuC,KAcpC;EACG,yBAAmBC,IAAI,EAAJ,CAAnB;EAEN,IAAIC,oBAAoB,KAAxB;;EACA,MAAMC,cAAc,MAAM;IAAsBD;EAAA,CAAhD;;EAEA,MAAME,UAAU,MAAM;IACpB,IAAIF,iBAAJ,EAAuB;MAAE;IAAO;;IACZA;IAEd,cAAQF,iBAAiB,MAAjB,GAA6BK,MAAMR,KAAN,KAAgB,CAA7C,GAAiDQ,MAAML,YAAN,CAAzD;IAENM,iBAAiBC,KAAjB,GAAyBC,KAAzB;EAAyB,CAN3B;;EASA,MAAMC,SAAS,MAAM;IACCP;IAEpBI,iBAAiBC,KAAjB,GAAyB,EAAzB;EAAyB,CAH3B;;EAMM,kBAAaG,CAAD,IAAsB;IAClC,KAAC,YAAD,EAAe,WAAf,EAA4B,WAA5B,EAAyC,SAAzC,EAAoD,OAApD,EAA6D,OAA7D,EAAsEC,QAAtE,CAA+ED,EAAEE,GAAjF,GAAuF;MAEzFF,EAAEG,cAAF;MACAH,EAAEI,eAAF;IACF;;IAEA,IAAIJ,EAAEE,GAAF,KAAU,OAAV,IAAqBF,EAAEE,GAAF,KAAU,OAAnC,EAA4C;MAC1C,IAAIb,eAAe,MAAnB,EAA8B;QAAE;MAAO;;MAEvCA,WAAWO,iBAAiBC,KAA5B;MACA;IACF;;IAEI,MAAEK,GAAF,KAAU,YAAV,EAAwB;MAC1BN,iBAAiBC,KAAjB,IAA0B,CAA1B;IACF;;IACI,MAAEK,GAAF,KAAU,WAAV,EAAuB;MACzBN,iBAAiBC,KAAjB,IAA0B,CAA1B;IACF;;IACI,MAAEK,GAAF,KAAU,WAAV,EAAuB;MACzBN,iBAAiBC,KAAjB,IAA0BX,OAA1B;IACF;;IACI,MAAEgB,GAAF,KAAU,SAAV,EAAqB;MACvBN,iBAAiBC,KAAjB,IAA0BX,OAA1B;IACF;;IAEI,KAACmB,YAAYlB,KAAZ,CAAD,IAAuBS,iBAAiBC,KAAjB,GAAyBF,MAAMR,KAAN,CAAhD,EAA8D;MAC/CS,yBAAQD,MAAMR,KAAN,CAAR;IACnB;;IACI,KAACkB,YAAYjB,GAAZ,CAAD,IAAqBQ,iBAAiBC,KAAjB,GAAyBF,MAAMP,GAAN,IAAa,CAA3D,EAA8D;MAC/CQ,yBAAQD,MAAMP,GAAN,IAAa,CAArB;IACnB;EAAA,CAhCI;;EAmCN,MAAMkB,sBAAsB;IAC1BZ,OAD0B;IACjBa,SADiB;IACNR,MADM;IACEN,WADF;IACee,UAAU;EADzB,CAA5B;EAIO;IACLZ,gBADK;IACaU;EADb;AAGT,CA7EO","names":["t","useGridKeyboardNavigation","rowSize","start","end","onSelected","onFocusIndex","ref","previouslyClicked","onMousedown","onFocus","unref","focusedCellIndex","value","index","onBlur","e","includes","key","preventDefault","stopPropagation","isUndefined","containerAttributes","onKeydown","tabindex"],"sources":["../../../../../../src/components/va-date-picker/hooks/grid-keyboard-navigation.ts"],"sourcesContent":["import { ref, Ref, isRef, unref } from 'vue'\n\nfunction isUndefined<T> (t: T | undefined): t is undefined {\n  return t === undefined\n}\n\nexport const useGridKeyboardNavigation = (\n  {\n    rowSize,\n    start,\n    end,\n    onSelected,\n    onFocusIndex,\n  }: {\n    rowSize: number,\n    start?: Ref<number> | number,\n    end?: Ref<number> | number,\n    onFocusIndex?: Ref<number> | number,\n    onSelected?: (selectedValue: number) => any | null,\n  },\n) => {\n  const focusedCellIndex = ref(-1)\n\n  let previouslyClicked = false\n  const onMousedown = () => { previouslyClicked = true }\n\n  const onFocus = () => {\n    if (previouslyClicked) { return }\n    previouslyClicked = false\n\n    const index = onFocusIndex === undefined ? unref(start) || 0 : unref(onFocusIndex)\n\n    focusedCellIndex.value = index\n  }\n\n  const onBlur = () => {\n    previouslyClicked = false\n\n    focusedCellIndex.value = -1\n  }\n\n  const onKeydown = (e: KeyboardEvent) => {\n    if (['ArrowRight', 'ArrowLeft', 'ArrowDown', 'ArrowUp', 'Enter', 'Space'].includes(e.key)) {\n      // Prevent default for arrow keys and enter. Do not prevent default for tab! :)\n      e.preventDefault()\n      e.stopPropagation()\n    }\n\n    if (e.key === 'Enter' || e.key === 'Space') {\n      if (onSelected === undefined) { return }\n\n      onSelected(focusedCellIndex.value)\n      return\n    }\n\n    if (e.key === 'ArrowRight') {\n      focusedCellIndex.value += 1\n    }\n    if (e.key === 'ArrowLeft') {\n      focusedCellIndex.value -= 1\n    }\n    if (e.key === 'ArrowDown') {\n      focusedCellIndex.value += rowSize\n    }\n    if (e.key === 'ArrowUp') {\n      focusedCellIndex.value -= rowSize\n    }\n\n    if (!isUndefined(start) && focusedCellIndex.value < unref(start)) {\n      focusedCellIndex.value = unref(start)\n    }\n    if (!isUndefined(end) && focusedCellIndex.value > unref(end) - 1) {\n      focusedCellIndex.value = unref(end) - 1\n    }\n  }\n\n  const containerAttributes = {\n    onFocus, onKeydown, onBlur, onMousedown, tabindex: 0,\n  }\n\n  return {\n    focusedCellIndex, containerAttributes,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}