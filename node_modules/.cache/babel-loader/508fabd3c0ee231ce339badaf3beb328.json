{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { m as merge_1 } from \"../../../../vendor.js\";\nimport { i as isMatchDynamicSegments, d as dynamicSegments } from \"./dynamic-segment.js\";\nimport { i as isMatchRegex, r as regexGroupsValues } from \"./regex.js\";\nimport { i as isIconConfigurationString, a as isIconConfigurationRegex } from \"../types.js\";\n\nconst isMatchConfiguration = (iconName, iconConfiguration) => {\n  if (isIconConfigurationString(iconConfiguration)) {\n    return isMatchDynamicSegments(iconName, iconConfiguration.name);\n  }\n\n  if (isIconConfigurationRegex(iconConfiguration)) {\n    return isMatchRegex(iconName, iconConfiguration.name);\n  }\n\n  return false;\n};\n\nconst resolveIconConfigurationString = (iconName, iconConfiguration) => {\n  const args = dynamicSegments(iconName, iconConfiguration.name);\n  return iconConfiguration.resolve && iconConfiguration.resolve(args);\n};\n\nconst resolveIconConfigurationRegex = (iconName, iconConfig) => {\n  if (iconConfig.name.global) {\n    throw new Error(`Bad icon config with name ${iconConfig.name}. Please, don't use global regex as name.`);\n  }\n\n  const args = regexGroupsValues(iconName, iconConfig.name);\n  return iconConfig.resolveFromRegex && iconConfig.resolveFromRegex(...args);\n};\n\nconst resolveIconConfiguration = (iconName, iconConfiguration) => {\n  if (isIconConfigurationString(iconConfiguration)) {\n    return resolveIconConfigurationString(iconName, iconConfiguration);\n  }\n\n  if (isIconConfigurationRegex(iconConfiguration)) {\n    return resolveIconConfigurationRegex(iconName, iconConfiguration);\n  }\n\n  throw Error(\"Unknown icon config\");\n};\n\nconst findMatchedIconConfiguration = (iconName, globalIconConfig, namesToIgnore = []) => {\n  const matchedConfig = globalIconConfig.find(config => {\n    if (namesToIgnore.includes(config.name.toString())) {\n      return false;\n    }\n\n    return isMatchConfiguration(iconName, config);\n  });\n\n  if (!matchedConfig) {\n    throw new Error(`Can not find icon config from ${iconName}. Please provide default config.`);\n  }\n\n  return matchedConfig;\n};\n\nconst findIconConfiguration = (iconName, globalIconConfig, namesToIgnore = []) => {\n  if (!iconName) {\n    return;\n  }\n\n  const matchedIconConfiguration = findMatchedIconConfiguration(iconName, globalIconConfig, namesToIgnore);\n  const resolvedIconConfiguration = merge_1(resolveIconConfiguration(iconName, matchedIconConfiguration), matchedIconConfiguration);\n  namesToIgnore = [...namesToIgnore, matchedIconConfiguration.name.toString()];\n  return merge_1(findIconConfiguration(resolvedIconConfiguration.to, globalIconConfig, namesToIgnore), resolvedIconConfiguration);\n};\n\nconst iconPropsFromIconConfiguration = iconConfiguration => {\n  const junkKeys = [\"name\", \"to\", \"resolve\", \"resolveFromRegex\"];\n  const configuration = iconConfiguration;\n  junkKeys.forEach(key => {\n    delete configuration[key];\n  });\n  return configuration;\n};\n\nconst getIconConfiguration = (name, iconConfig) => {\n  const configuration = findIconConfiguration(name, iconConfig);\n\n  if (configuration === void 0) {\n    return {};\n  }\n\n  return iconPropsFromIconConfiguration(configuration);\n};\n\nexport { getIconConfiguration as g };","map":{"version":3,"mappings":"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","names":["isMatchConfiguration","iconName","iconConfiguration","name","resolveIconConfigurationString","args","dynamicSegments","resolve","resolveIconConfigurationRegex","iconConfig","global","Error","regexGroupsValues","resolveFromRegex","resolveIconConfiguration","findMatchedIconConfiguration","globalIconConfig","namesToIgnore","matchedConfig","find","config","includes","toString","findIconConfiguration","matchedIconConfiguration","resolvedIconConfiguration","merge","to","iconPropsFromIconConfiguration","junkKeys","configuration","key"],"sources":["../../../../../../src/services/icon/utils/get-icon-configuration.ts"],"sourcesContent":["import merge from 'lodash/merge.js'\nimport { isMatchDynamicSegments, dynamicSegments } from './dynamic-segment'\nimport { isMatchRegex, regexGroupsValues } from './regex'\nimport {\n  IconConfig,\n  IconConfiguration,\n  IconConfigurationString,\n  IconConfigurationRegex,\n  isIconConfigurationString,\n  isIconConfigurationRegex,\n  IconProps,\n} from '../types'\n\nconst isMatchConfiguration = (iconName: string, iconConfiguration: IconConfiguration) => {\n  if (isIconConfigurationString(iconConfiguration)) {\n    return isMatchDynamicSegments(iconName, iconConfiguration.name)\n  }\n  if (isIconConfigurationRegex(iconConfiguration)) {\n    return isMatchRegex(iconName, iconConfiguration.name)\n  }\n\n  return false\n}\n\nconst resolveIconConfigurationString = (iconName: string, iconConfiguration: IconConfigurationString) => {\n  const args = dynamicSegments(iconName, iconConfiguration.name)\n  return iconConfiguration.resolve && iconConfiguration.resolve(args)\n}\n\nconst resolveIconConfigurationRegex = (iconName: string, iconConfig: IconConfigurationRegex) => {\n  if (iconConfig.name.global) {\n    throw new Error(`Bad icon config with name ${iconConfig.name}. Please, don't use global regex as name.`)\n  }\n  const args = regexGroupsValues(iconName, iconConfig.name) as string[]\n  return iconConfig.resolveFromRegex && iconConfig.resolveFromRegex(...args)\n}\n\nconst resolveIconConfiguration = (iconName: string, iconConfiguration: IconConfiguration): IconProps | undefined => {\n  if (isIconConfigurationString(iconConfiguration)) {\n    return resolveIconConfigurationString(iconName, iconConfiguration)\n  }\n  if (isIconConfigurationRegex(iconConfiguration)) {\n    return resolveIconConfigurationRegex(iconName, iconConfiguration)\n  }\n\n  throw Error('Unknown icon config')\n}\n\nconst findMatchedIconConfiguration = (iconName: string, globalIconConfig: IconConfig, namesToIgnore: string[] = []): IconConfiguration => {\n  const matchedConfig = globalIconConfig.find((config) => {\n    if (namesToIgnore.includes(config.name.toString())) { return false }\n\n    return isMatchConfiguration(iconName, config)\n  })\n\n  if (!matchedConfig) { throw new Error(`Can not find icon config from ${iconName}. Please provide default config.`) }\n\n  return matchedConfig\n}\n\nconst findIconConfiguration = (iconName: string | undefined, globalIconConfig: IconConfig, namesToIgnore: string[] = []): IconConfiguration | undefined => {\n  if (!iconName) { return }\n\n  const matchedIconConfiguration = findMatchedIconConfiguration(iconName, globalIconConfig, namesToIgnore)\n  const resolvedIconConfiguration = merge(resolveIconConfiguration(iconName, matchedIconConfiguration), matchedIconConfiguration)\n\n  namesToIgnore = [...namesToIgnore, matchedIconConfiguration.name.toString()]\n\n  return merge(\n    findIconConfiguration(resolvedIconConfiguration.to, globalIconConfig, namesToIgnore),\n    resolvedIconConfiguration,\n  )\n}\n\n/** Removes name, to, resolveFromRegex and resolve from IconConfiguration */\nconst iconPropsFromIconConfiguration = (iconConfiguration: IconConfiguration): IconProps => {\n  const junkKeys = ['name', 'to', 'resolve', 'resolveFromRegex']\n\n  const configuration: Record<string, string> = iconConfiguration as any\n  junkKeys.forEach((key) => { delete configuration[key] })\n  return configuration\n}\n\nexport const getIconConfiguration = (name: string, iconConfig: IconConfig): IconProps => {\n  const configuration = findIconConfiguration(name, iconConfig)\n\n  if (configuration === undefined) { return {} }\n\n  return iconPropsFromIconConfiguration(configuration)\n}\n"]},"metadata":{},"sourceType":"module"}