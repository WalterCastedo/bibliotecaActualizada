{"ast":null,"code":"import { getCurrentInstance, computed, unref } from \"vue\";\nimport { u as useColors } from \"./useColors.js\";\n\nconst useTextColor = (componentColor, isTransparent = false) => {\n  const {\n    props\n  } = getCurrentInstance();\n  const {\n    getColor,\n    getTextColor\n  } = useColors();\n  const textColorComputed = computed(() => {\n    if (props.textColor) {\n      return getColor(props.textColor);\n    }\n\n    const componentColorHex = getColor(unref(componentColor) || props.color);\n    return unref(isTransparent) ? componentColorHex : getColor(getTextColor(componentColorHex));\n  });\n  return {\n    textColorComputed\n  };\n};\n\nexport { useTextColor as u };","map":{"version":3,"mappings":";;;AAcO,MAAMA,eAAe,CAACC,cAAD,EAAoDC,gBAAwC,KAA5F,KAAsG;EAC1H;IAAEC;EAAF,IAAYC,oBAAZ;EACA;IAAEC,QAAF;IAAYC;EAAZ,IAA6BC,WAA7B;EAEA,0BAAoBC,SAAS,MAAM;IACvC,IAAIL,MAAMM,SAAV,EAAqB;MAAS,gBAASN,MAAMM,SAAf;IAA0B;;IAExD,MAAMC,oBAAoBL,SAASM,MAAMV,cAAN,KAAyBE,MAAMS,KAAxC,CAA1B;IACA,OAAOD,MAAMT,aAAN,IAAuBQ,iBAAvB,GAA2CL,SAASC,aAAaI,iBAAb,CAAT,CAAlD;EACD,CALyB,CAApB;EAON,OAAO;IAAEG;EAAF,CAAP;AACF,CAZO","names":["useTextColor","componentColor","isTransparent","props","getCurrentInstance","getColor","getTextColor","useColors","computed","textColor","componentColorHex","unref","color","textColorComputed"],"sources":["../../../../src/composables/useTextColor.ts"],"sourcesContent":["import { computed, getCurrentInstance, Ref, unref } from 'vue'\n\nimport { useColors } from './useColors'\n\ntype PropsType = {\n  textColor: string,\n  color?: string\n}\n\n/**\n * @param componentColor component color. By default `props.color`.\n * @param isTransparent if transparent will return component color as text color.\n * @returns Computed text color based on component's color if `props.textColor` if provided.\n */\nexport const useTextColor = (componentColor?: Ref<string> | string | undefined, isTransparent: boolean | Ref<boolean> = false) => {\n  const { props } = getCurrentInstance() as unknown as { props: PropsType }\n  const { getColor, getTextColor } = useColors()\n\n  const textColorComputed = computed(() => {\n    if (props.textColor) { return getColor(props.textColor) }\n\n    const componentColorHex = getColor(unref(componentColor) || props.color)\n    return unref(isTransparent) ? componentColorHex : getColor(getTextColor(componentColorHex))\n  })\n\n  return { textColorComputed }\n}\n"]},"metadata":{},"sourceType":"module"}