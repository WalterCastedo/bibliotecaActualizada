{"ast":null,"code":"import { g as getWindow } from \"../../utils/ssr.js\";\nimport { l as isCSSVariable } from \"../../services/color/utils.js\";\nconst window = getWindow();\n\nconst getCSSVariableNameFromDeclaration = color => color.slice(4, -1);\n\nconst getElementBackgroundFromCSS = el => {\n  const color = [...el.ownerDocument.styleSheets].filter(s => {\n    try {\n      return s.cssRules;\n    } catch {\n      return false;\n    }\n  }).map(s => [...(s.cssRules || [])]).flat().reduce((bg, cssRule) => {\n    if (!el.matches(cssRule.selectorText)) {\n      return bg;\n    }\n\n    if (cssRule instanceof CSSStyleRule) {\n      return cssRule.style.background || cssRule.style.backgroundColor || bg;\n    }\n\n    return bg;\n  }, \"\").trim();\n\n  if (isCSSVariable(color)) {\n    return window == null ? void 0 : window.getComputedStyle(el).getPropertyValue(getCSSVariableNameFromDeclaration(color)).trim();\n  }\n\n  return color;\n};\n\nconst EMPTY_TRANSITION = \"all 0s ease 0s\";\n\nconst getElementBackground = element => {\n  const computedStyle = window == null ? void 0 : window.getComputedStyle(element);\n\n  if (!computedStyle) {\n    return;\n  }\n\n  if (computedStyle.transition.trim() !== EMPTY_TRANSITION) {\n    return getElementBackgroundFromCSS(element);\n  }\n\n  return computedStyle.backgroundColor;\n};\n\nexport { getElementBackground as g };","map":{"version":3,"mappings":";;AAUA,MAAMA,SAASC,WAAf;;AAGA,MAAMC,oCAAqCC,KAAD,IAAmBA,MAAMC,KAAN,CAAY,CAAZ,EAAe,EAAf,CAA7D;;AAOa,oCAA+BC,EAAD,IAAqB;EACxD,cAAQ,CAAC,GAAGA,GAAGC,aAAH,CAAiBC,WAArB,EACXC,MADW,CACHC,CAAD,IAAO;IACT;MAEF,OAAQA,EAAoBC,QAA5B;IAA4B,CAF1B,CAE0B,MAC5B;MACO;IACT;EACD,CARW,EASXC,GATW,CASFF,CAAL,IAAK,CAAC,IAAGA,EAAEC,QAAF,IAAc,EAAjB,CAAD,CATE,EAUXE,IAVW,GAWXC,MAXW,CAWJ,CAACC,EAAD,EAAKC,OAAL,KAAiB;IACvB,IAAI,CAACV,GAAGW,OAAH,CAAYD,QAAwBE,YAApC,CAAL,EAAwD;MAAS;IAAG;;IAEpE,IAAIF,mBAAmBG,YAAvB,EAAqC;MACnC,OAAOH,QAAQI,KAAR,CAAcC,UAAd,IAA4BL,QAAQI,KAAR,CAAcE,eAA1C,IAA6DP,EAApE;IACF;;IACO;EAAA,CAjBG,EAkBT,EAlBS,EAmBXQ,IAnBW,EAAR;;EAqBF,kBAAcnB,KAAd,GAAsB;IACjB,wCAAQoB,gBAAR,CAAyBlB,EAAzB,EACJmB,gBADI,CACatB,kCAAkCC,KAAlC,CADb,EACuDmB,IADvD;EAET;;EAEO;AACT,CA5Ba;;AA8Bb,MAAMG,mBAAmB,gBAAzB;;AAEa,6BAAwBC,OAAD,IAA0B;EACtD,sBAAgB1B,iCAAQuB,gBAAR,CAAyBG,OAAzB,CAAhB;;EAEN,IAAI,CAACC,aAAL,EAAoB;IAAE;EAAO;;EAE7B,IAAIA,cAAcC,UAAd,CAAyBN,IAAzB,OAAoCG,gBAAxC,EAA0D;IACxD,OAAOI,4BAA4BH,OAA5B,CAAP;EACF;;EAEA,OAAOC,cAAcN,eAArB;AACF,CAVa","names":["window","getWindow","getCSSVariableNameFromDeclaration","color","slice","el","ownerDocument","styleSheets","filter","s","cssRules","map","flat","reduce","bg","cssRule","matches","selectorText","CSSStyleRule","style","background","backgroundColor","trim","getComputedStyle","getPropertyValue","EMPTY_TRANSITION","element","computedStyle","transition","getElementBackgroundFromCSS"],"sources":["../../../../../src/composables/useElementBackground/utils.ts"],"sourcesContent":["import { getWindow } from '../../utils/ssr'\nimport { isCSSVariable } from '../useColors'\n\nexport type ColorArray = [number, number, number, number]\n\nconst FLOAT_NUMBERS_REGEX = /\\d+(\\.\\d+)?/g\n\nexport const parseRGBA = (color: string): ColorArray | undefined => color\n  .match(FLOAT_NUMBERS_REGEX)?.map((n) => parseFloat(n ?? 1)) as ColorArray\n\nconst window = getWindow()\n\n/** Remove `var()` from css variable declaration */\nconst getCSSVariableNameFromDeclaration = (color: string) => color.slice(4, -1)\n\n/**\n * Super slow function. Must be covered with cache as much as possible.\n * It actually goes trough all CSS and search for value.\n * This is needed to prevent transition delay when changing background color.\n */\nexport const getElementBackgroundFromCSS = (el: HTMLElement) => {\n  const color = [...el.ownerDocument.styleSheets]\n    .filter((s) => {\n      try {\n        // Might be a cross-origin stylesheet\n        return (s as CSSStyleSheet).cssRules\n      } catch {\n        return false\n      }\n    })\n    .map(s => [...s.cssRules || []])\n    .flat()\n    .reduce((bg, cssRule) => {\n      if (!el.matches((cssRule as CSSPageRule).selectorText)) { return bg }\n\n      if (cssRule instanceof CSSStyleRule) {\n        return cssRule.style.background || cssRule.style.backgroundColor || bg\n      }\n      return bg\n    }, '')\n    .trim()\n\n  if (isCSSVariable(color)) {\n    return window?.getComputedStyle(el)\n      .getPropertyValue(getCSSVariableNameFromDeclaration(color)).trim()\n  }\n\n  return color\n}\n\nconst EMPTY_TRANSITION = 'all 0s ease 0s'\n\nexport const getElementBackground = (element: HTMLElement) => {\n  const computedStyle = window?.getComputedStyle(element)\n\n  if (!computedStyle) { return }\n\n  if (computedStyle.transition.trim() !== EMPTY_TRANSITION) {\n    return getElementBackgroundFromCSS(element)\n  }\n\n  return computedStyle.backgroundColor\n}\n"]},"metadata":{},"sourceType":"module"}