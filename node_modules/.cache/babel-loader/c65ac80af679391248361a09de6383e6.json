{"ast":null,"code":"import { computed } from \"vue\";\nimport { a as useGlobalConfig } from \"../services/global-config/global-config.js\";\n\nconst applyI18nTemplate = (key, values) => {\n  if (!values) {\n    return key;\n  }\n\n  Object.keys(values).forEach(valueKey => {\n    key = key.replace(`{${valueKey}}`, String(values[valueKey]));\n  });\n  return key;\n};\n\nconst useTranslation = () => {\n  const {\n    globalConfig\n  } = useGlobalConfig();\n  const config = computed(() => globalConfig.value.i18n);\n  return {\n    tp: key => {\n      if (!key) {\n        return void 0;\n      }\n\n      if (key.startsWith(\"$t:\")) {\n        return config.value[key.slice(3)] || key;\n      }\n\n      return key;\n    },\n\n    t(key, values) {\n      const translated = config.value[key];\n\n      if (!translated) {\n        return key;\n      }\n\n      return applyI18nTemplate(translated, values) || key;\n    }\n\n  };\n};\n\nexport { useTranslation as u };","map":{"version":3,"mappings":";;;AAOA,MAAMA,oBAAoB,CAACC,GAAD,EAAcC,MAAd,KAAsD;EAC9E,IAAI,CAACA,MAAL,EAAa;IAAS;EAAI;;EAE1BC,OAAOC,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA6BC,QAAD,IAAc;IACxCL,MAAMA,IAAIM,OAAJ,CAAY,IAAID,WAAhB,EAA6BE,OAAON,OAAOI,QAAP,CAAP,CAA7B,CAAN;EACD,CAFD;EAGO;AACT,CAPA;;AASO,MAAMG,iBAAiB,MAAM;EAC5B;IAAEC;EAAF,IAAmBC,iBAAnB;EAEN,MAAMC,SAASC,SAAS,MAAMH,aAAaI,KAAb,CAAmBC,IAAlC,CAAf;EAEO;IAELC,IAAqCf,GAAjC,IAAmD;MACrD,IAAI,CAACA,GAAL,EAAU;QAAS;MAAiB;;MAEhC,QAAIgB,UAAJ,CAAe,KAAf,GAAuB;QACzB,OAAQL,OAAOE,KAAP,CAAab,IAAIiB,KAAJ,CAAU,CAAV,CAAb,KAAkDjB,GAA1D;MACF;;MAEO;IACT,CAVK;;IAWLkB,EAAGlB,GAAH,EAAgBC,MAAhB,EAAqD;MAC7C,mBAAaU,OAAOE,KAAP,CAAab,GAAb,CAAb;;MACN,IAAI,CAACmB,UAAL,EAAiB;QAER;MACT;;MACQ,yBAAkBA,UAAlB,EAA8BlB,MAA9B,KAAyCD,GAAzC;IACV;;EAlBK;AAoBT,CAzBO","names":["applyI18nTemplate","key","values","Object","keys","forEach","valueKey","replace","String","useTranslation","globalConfig","useGlobalConfig","config","computed","value","i18n","tp","startsWith","slice","t","translated"],"sources":["../../../../src/composables/useTranslation.ts"],"sourcesContent":["import { computed } from 'vue'\nimport { useGlobalConfig } from '../composables'\nimport { I18nConfig } from '../services/i18n'\nimport { warn } from '../utils/console'\n\ntype Stringable = number | string | boolean | undefined\n\nconst applyI18nTemplate = (key: string, values?: Record<string, Stringable>) => {\n  if (!values) { return key }\n\n  Object.keys(values).forEach((valueKey) => {\n    key = key.replace(`{${valueKey}}`, String(values[valueKey]))\n  })\n  return key\n}\n\nexport const useTranslation = () => {\n  const { globalConfig } = useGlobalConfig()\n\n  const config = computed(() => globalConfig.value.i18n)\n\n  return {\n    /** Translate prop. Translate only if key has `$t:` prefix */\n    tp: <Key extends string | undefined>(key: Key): Key => {\n      if (!key) { return undefined as Key }\n\n      if (key.startsWith('$t:')) {\n        return (config.value[key.slice(3) as keyof I18nConfig] || key) as Key\n      }\n\n      return key\n    },\n    t (key: string, values?: Record<string, Stringable>) {\n      const translated = config.value[key as keyof I18nConfig]\n      if (!translated) {\n        warn(`${key} not found in VuesticUI i18n config`)\n        return key\n      }\n      return (applyI18nTemplate(translated, values) || key)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}