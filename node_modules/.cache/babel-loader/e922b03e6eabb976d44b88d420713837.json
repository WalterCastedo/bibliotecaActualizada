{"ast":null,"code":"import { f as isFunction_1 } from \"../../vendor.js\";\nimport { w as warn } from \"../utils/console.js\";\nconst useTrackByProps = {\n  trackBy: {\n    type: [String, Number, Function],\n    default: \"\"\n  }\n};\n\nconst useTrackBy = props => {\n  const getKey = (item, index, defaultValue) => {\n    if (props.trackBy && item && typeof item === \"object\" && !isFunction_1(props.trackBy)) {\n      const isArrayItem = Array.isArray(item);\n      let key;\n\n      if (isArrayItem && !isNaN(+props.trackBy)) {\n        key = item[+props.trackBy];\n      }\n\n      if (!isArrayItem) {\n        key = item[props.trackBy];\n      }\n\n      if (key || key === 0) {\n        return key;\n      }\n\n      warn(`${isArrayItem ? \"Index\" : \"Key\"} '${props.trackBy}' wasn't found in provided ${isArrayItem ? \"array\" : \"object\"}: `, item);\n    }\n\n    if (isFunction_1(props.trackBy)) {\n      return props.trackBy(item);\n    }\n\n    return defaultValue;\n  };\n\n  return {\n    getKey\n  };\n};\n\nexport { useTrackBy as a, useTrackByProps as u };","map":{"version":3,"mappings":";;AAOO,MAAMA,kBAAkB;EAC7BC,SAAS;IACPC,MAAM,CAACC,MAAD,EAASC,MAAT,EAAiBC,QAAjB,CADC;IAEPC,SAAS;EAFF;AADoB,CAAxB;;AAOM,mBAAcC,KAAD,IAAqD;EAC7E,MAAMC,SAAS,CACbC,IADa,EAEbC,KAFa,EAGbC,YAHa,KAIV;IACC,UAAMV,OAAN,IAAiBQ,IAAjB,IAAyB,OAAOA,IAAP,KAAgB,QAAzC,IAAqD,CAACG,aAAWL,MAAMN,OAAjBW,CAAtD,EAAiF;MAC7E,oBAAcC,MAAMC,OAAN,CAAcL,IAAd,CAAd;MAEF;;MACJ,IAAIM,eAAe,CAACC,MAAM,CAACT,MAAMN,OAAb,CAApB,EAA2C;QAASgB,WAAe,CAACV,MAAMN,OAAtB;MAA+B;;MACnF,IAAI,CAACc,WAAL,EAAkB;QAAEE,MAAOR,KAA6BF,MAAMN,OAAnC,CAAP;MAAmD;;MAEnE,WAAOgB,QAAQ,CAAf,EAAkB;QAAS;MAAI;;MAE9BC,QAAGH,cAAc,OAAd,GAAwB,UAAUR,MAAMN,qCAAqCc,cAAc,OAAd,GAAwB,YAAxG,EAAsHN,IAAtH;IACP;;IAEI,iBAAWF,MAAMN,OAAjBW,GAA2B;MACtB,aAAMX,OAAN,CAAcQ,IAAd;IACT;;IAEO;EAAA,CArBT;;EAwBA,OAAO;IAAED;EAAF,CAAP;AACF,CA1Ba","names":["useTrackByProps","trackBy","type","String","Number","Function","default","props","getKey","item","index","defaultValue","isFunction","Array","isArray","isArrayItem","isNaN","key","warn"],"sources":["../../../../src/composables/useTrackBy.ts"],"sourcesContent":["import { PropType, ExtractPropTypes } from 'vue'\nimport isFunction from 'lodash/isFunction.js'\n\nimport { warn } from '../utils/console'\n\ntype AnyRecordOrArray = Array<any> | Record<string, any>\n\nexport const useTrackByProps = {\n  trackBy: {\n    type: [String, Number, Function] as PropType<string | number | ((item: AnyRecordOrArray) => string | number)>,\n    default: '',\n  },\n}\n\nexport const useTrackBy = (props: ExtractPropTypes<typeof useTrackByProps>) => {\n  const getKey = (\n    item: AnyRecordOrArray,\n    index: number,\n    defaultValue?: any,\n  ) => {\n    if (props.trackBy && item && typeof item === 'object' && !isFunction(props.trackBy)) {\n      const isArrayItem = Array.isArray(item)\n\n      let key: any\n      if (isArrayItem && !isNaN(+props.trackBy)) { key = (item as any[])[+props.trackBy] }\n      if (!isArrayItem) { key = (item as Record<string, any>)[props.trackBy] }\n\n      if (key || key === 0) { return key }\n\n      warn(`${isArrayItem ? 'Index' : 'Key'} '${props.trackBy}' wasn't found in provided ${isArrayItem ? 'array' : 'object'}: `, item)\n    }\n\n    if (isFunction(props.trackBy)) {\n      return props.trackBy(item)\n    }\n\n    return defaultValue\n  }\n\n  return { getKey }\n}\n"]},"metadata":{},"sourceType":"module"}