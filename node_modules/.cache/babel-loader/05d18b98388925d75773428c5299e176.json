{"ast":null,"code":"import { ref, watch } from \"vue\";\nimport { u as useRequestAnimationFrame } from \"./useRequestAnimationFrame.js\";\nconst keys = [\"x\", \"y\", \"width\", \"height\", \"top\", \"left\", \"right\", \"bottom\"];\n\nconst isDomRectEqual = (a, b) => {\n  for (let i = 0; i < keys.length; i++) {\n    if (a[keys[i]] !== b[keys[i]]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst useDomRect = target => {\n  const domRect = ref(null);\n  let prev = {};\n  useRequestAnimationFrame(() => {\n    if (!target.value) {\n      return;\n    }\n\n    const rect = target.value.getBoundingClientRect();\n\n    if (!isDomRectEqual(rect, prev)) {\n      domRect.value = rect;\n    }\n\n    prev = rect;\n  });\n  watch(target, newVal => {\n    if (newVal) {\n      domRect.value = newVal.getBoundingClientRect();\n    } else {\n      domRect.value = null;\n    }\n  });\n  return {\n    domRect\n  };\n};\n\nexport { useDomRect as u };","map":{"version":3,"mappings":";;AAGA,MAAMA,OAAO,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,EAAoB,QAApB,EAA8B,KAA9B,EAAqC,MAArC,EAA6C,OAA7C,EAAsD,QAAtD,CAAb;;AACA,MAAMC,iBAAiB,CAACC,CAAD,EAASC,CAAT,KAAoB;EACzC,SAASC,IAAI,CAAb,EAAgBA,IAAIJ,KAAKK,MAAzB,EAAiCD,GAAjC,EAAsC;IACpC,IAAIF,EAAEF,KAAKI,CAAL,CAAF,MAAeD,EAAEH,KAAKI,CAAL,CAAF,CAAnB,EAA+B;MACtB;IACT;EACF;;EACO;AACT,CAPA;;AASa,mBAAcE,MAAD,IAA0C;EAC5D,gBAAUC,IAAoB,IAApB,CAAV;EAEN,IAAIC,OAAO,EAAX;EACAC,yBAAyB,MAAM;IACzB,KAACH,OAAOI,KAAR,EAAe;MAAE;IAAO;;IACtB,aAAOJ,OAAOI,KAAP,CAAaC,qBAAb,EAAP;;IACN,IAAI,CAACV,eAAeW,IAAf,EAAqBJ,IAArB,CAAL,EAAiC;MAC/BK,QAAQH,KAAR,GAAgBE,IAAhB;IACF;;IACOJ;EACR,CAPD;EASMM,cAASC,MAAD,IAAY;IACxB,IAAIA,MAAJ,EAAY;MACFF,gBAAQE,OAAOJ,qBAAP,EAAR;IAAqC,CAD/C,MAEO;MACLE,QAAQH,KAAR,GAAgB,IAAhB;IACF;EACD,CANK;EAQC;IACLG;EADK;AAGT,CAxBa","names":["keys","isDomRectEqual","a","b","i","length","target","ref","prev","useRequestAnimationFrame","value","getBoundingClientRect","rect","domRect","watch","newVal"],"sources":["../../../../src/composables/useDomRect.ts"],"sourcesContent":["import { Ref, ref, watch } from 'vue'\nimport { useRequestAnimationFrame } from './useRequestAnimationFrame'\n\nconst keys = ['x', 'y', 'width', 'height', 'top', 'left', 'right', 'bottom']\nconst isDomRectEqual = (a: any, b: any) => {\n  for (let i = 0; i < keys.length; i++) {\n    if (a[keys[i]] !== b[keys[i]]) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const useDomRect = (target: Ref<HTMLElement | undefined>) => {\n  const domRect = ref<DOMRect | null>(null)\n\n  let prev = {}\n  useRequestAnimationFrame(() => {\n    if (!target.value) { return }\n    const rect = target.value.getBoundingClientRect()\n    if (!isDomRectEqual(rect, prev)) {\n      domRect.value = rect\n    }\n    prev = rect\n  })\n\n  watch(target, (newVal) => {\n    if (newVal) {\n      domRect.value = newVal.getBoundingClientRect()\n    } else {\n      domRect.value = null\n    }\n  })\n\n  return {\n    domRect,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}