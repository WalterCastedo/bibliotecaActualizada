{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { ref, computed, getCurrentInstance } from \"vue\";\nimport { c as clamp_1 } from \"../../../../vendor.js\";\nimport { u as useHover } from \"../../../composables/useHover.js\";\nimport { a as useStatefulProps, b as useStateful } from \"../../../composables/useStateful.js\";\nimport { R as RatingValue } from \"../types.js\";\n\nconst getContext = () => {\n  const instance = getCurrentInstance();\n\n  if (!instance) {\n    throw new Error(\"useRating hooks must be used on top of setup function\");\n  }\n\n  return {\n    props: instance.props,\n    emit: instance.emit\n  };\n};\n\nconst useRatingProps = { ...useStatefulProps,\n  modelValue: {\n    type: Number,\n    default: 0\n  },\n  clearable: {\n    type: Boolean,\n    default: false\n  },\n  hover: {\n    type: Boolean,\n    default: false\n  }\n};\n\nconst useRating = props => {\n  const {\n    emit\n  } = getContext();\n  const {\n    isHovered,\n    onMouseEnter,\n    onMouseLeave\n  } = useHover();\n  const {\n    valueComputed: modelValue\n  } = useStateful(props, emit);\n  const hoveredValue = ref(0);\n  const visibleValue = computed(() => !props.disabled && !props.readonly && props.hover && isHovered.value ? hoveredValue.value : modelValue.value);\n\n  const onItemValueUpdate = (itemIndex, newValue) => {\n    const newModelValue = itemIndex + newValue;\n\n    if (props.clearable) {\n      if (modelValue.value === newModelValue) {\n        modelValue.value = 0;\n        return;\n      }\n    }\n\n    modelValue.value = newModelValue;\n  };\n\n  const onItemHoveredValueUpdate = (itemIndex, newValue) => {\n    if (!props.hover) {\n      return;\n    }\n\n    hoveredValue.value = itemIndex + newValue;\n  };\n\n  const getItemValue = itemIndex => {\n    const itemValue = visibleValue.value - itemIndex;\n    return clamp_1(itemValue, RatingValue.EMPTY, RatingValue.FULL);\n  };\n\n  return {\n    visibleValue,\n    modelValue,\n    hoveredValue,\n    isHovered,\n    onMouseEnter,\n    onMouseLeave,\n    onItemValueUpdate,\n    onItemHoveredValueUpdate,\n    getItemValue\n  };\n};\n\nexport { useRating as a, useRatingProps as u };","map":{"version":3,"mappings":";;;;;;;AAOA,MAAMA,aAAa,MAAsF;EACvG,MAAMC,WAAWC,oBAAjB;;EACA,IAAI,CAACD,QAAL,EAAe;IAAQ,UAAIE,KAAJ,CAAU,uDAAV;EAAmE;;EACnF;IACLC,OAAOH,SAASG,KADX;IAELC,MAAMJ,SAASI;EAFV;AAOT,CAVA;;AAYO,MAAMC,iBAAiB,EAC5B,GAAGC,gBADyB;EAE5BC,YAAY;IAAEC,MAAMC,MAAR;IAAgBC,SAAS;EAAzB,CAFgB;EAG5BC,WAAW;IAAEH,MAAMI,OAAR;IAAiBF,SAAS;EAA1B,CAHiB;EAI5BG,OAAO;IAAEL,MAAMI,OAAR;IAAiBF,SAAS;EAA1B;AAJqB,CAAvB;;AAOM,kBAAaP,KAAD,IAA4F;EAC7G;IAAEC;EAAF,IAAWL,YAAX;EACN,MAAM;IAAEe,SAAF;IAAaC,YAAb;IAA2BC;EAA3B,IAA4CC,UAAlD;EACA,MAAM;IAAEC,eAAeX;EAAjB,IAAgCY,YAAYhB,KAAZ,EAAmBC,IAAnB,CAAtC;EAEM,qBAAegB,IAAI,CAAJ,CAAf;EACN,MAAMC,eAAeC,SAAS,MAAM,CAACnB,MAAMoB,QAAP,IAAmB,CAACpB,MAAMqB,QAA1B,IAAsCrB,MAAMU,KAA5C,IAAqDC,UAAUW,KAA/D,GAAuEC,aAAaD,KAApF,GAA4FlB,WAAWkB,KAAtH,CAArB;;EAEM,0BAAoB,CAACE,SAAD,EAAoBC,QAApB,KAAyC;IACjE,MAAMC,gBAAgBF,YAAYC,QAAlC;;IACA,IAAIzB,MAAMQ,SAAV,EAAqB;MACf,eAAWc,KAAX,KAAqBI,aAArB,EAAoC;QACtCtB,WAAWkB,KAAX,GAAmB,CAAnB;QACA;MACF;IACF;;IACAlB,WAAWkB,KAAX,GAAmBI,aAAnB;EAAmB,CARf;;EAWA,iCAA2B,CAACF,SAAD,EAAoBC,QAApB,KAAyC;IACpE,KAACzB,MAAMU,KAAP,EAAc;MAAE;IAAO;;IAC3Ba,aAAaD,KAAb,GAAqBE,YAAYC,QAAjC;EAAiC,CAF7B;;EAKA,qBAAgBD,SAAD,IAAuB;IACpC,kBAAYN,aAAaI,KAAb,GAAqBE,SAAjC;IACN,OAAOG,QAAMC,SAAND,EAAiBE,YAAYC,KAA7BH,EAAoCE,YAAYE,IAAhDJ,CAAP;EAA2D,CAFvD;;EAKC;IACLT,YADK;IAELd,UAFK;IAGLmB,YAHK;IAILZ,SAJK;IAKLC,YALK;IAMLC,YANK;IAOLmB,iBAPK;IAQLC,wBARK;IASLC;EATK;AAWT,CAxCa","names":["getContext","instance","getCurrentInstance","Error","props","emit","useRatingProps","useStatefulProps","modelValue","type","Number","default","clearable","Boolean","hover","isHovered","onMouseEnter","onMouseLeave","useHover","valueComputed","useStateful","ref","visibleValue","computed","disabled","readonly","value","hoveredValue","itemIndex","newValue","newModelValue","clamp","itemValue","RatingValue","EMPTY","FULL","onItemValueUpdate","onItemHoveredValueUpdate","getItemValue"],"sources":["../../../../../../src/components/va-rating/hooks/useRating.ts"],"sourcesContent":["import { ref, getCurrentInstance, computed, ExtractPropTypes } from 'vue'\nimport clamp from 'lodash/clamp.js'\n\nimport { useHover, useStateful, useStatefulProps, useFormProps } from '../../../composables'\n\nimport { RatingValue } from '../types'\n\nconst getContext = <P extends Record<string, any> = Record<string, any>, E extends string = string>() => {\n  const instance = getCurrentInstance()\n  if (!instance) { throw new Error('useRating hooks must be used on top of setup function') }\n  return {\n    props: instance.props,\n    emit: instance.emit,\n  } as {\n    props: P,\n    emit: (event: E, ...args: any[]) => void\n  }\n}\n\nexport const useRatingProps = {\n  ...useStatefulProps,\n  modelValue: { type: Number, default: 0 },\n  clearable: { type: Boolean, default: false },\n  hover: { type: Boolean, default: false },\n}\n\nexport const useRating = (props: ExtractPropTypes<typeof useRatingProps> & ExtractPropTypes<typeof useFormProps>) => {\n  const { emit } = getContext()\n  const { isHovered, onMouseEnter, onMouseLeave } = useHover()\n  const { valueComputed: modelValue } = useStateful(props, emit)\n\n  const hoveredValue = ref(0)\n  const visibleValue = computed(() => !props.disabled && !props.readonly && props.hover && isHovered.value ? hoveredValue.value : modelValue.value)\n\n  const onItemValueUpdate = (itemIndex: number, newValue: number) => {\n    const newModelValue = itemIndex + newValue\n    if (props.clearable) {\n      if (modelValue.value === newModelValue) {\n        modelValue.value = 0\n        return\n      }\n    }\n    modelValue.value = newModelValue\n  }\n\n  const onItemHoveredValueUpdate = (itemIndex: number, newValue: number) => {\n    if (!props.hover) { return }\n    hoveredValue.value = itemIndex + newValue\n  }\n\n  const getItemValue = (itemIndex: number) => {\n    const itemValue = visibleValue.value - itemIndex\n    return clamp(itemValue, RatingValue.EMPTY, RatingValue.FULL)\n  }\n\n  return {\n    visibleValue,\n    modelValue,\n    hoveredValue,\n    isHovered,\n    onMouseEnter,\n    onMouseLeave,\n    onItemValueUpdate,\n    onItemHoveredValueUpdate,\n    getItemValue,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}