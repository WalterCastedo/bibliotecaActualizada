{"ast":null,"code":"import { defineComponent, shallowRef, computed, nextTick, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createVNode, withModifiers, createSlots, createElementVNode, toHandlers, withKeys, createCommentVNode, renderList, renderSlot, normalizeProps, guardReactiveProps } from \"vue\";\nimport { o as omit_1 } from \"../../../vendor.js\";\nimport { e as extractComponentProps } from \"../../utils/component-options/extract-component-options.js\";\nimport { f as filterComponentProps } from \"../../utils/component-options/filter-props.js\";\nimport { a as useClearableEmits, u as useClearableProps, b as useClearable } from \"../../composables/useClearable.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { a as useFocusEmits, u as useFocus } from \"../../composables/useFocus.js\";\nimport { a as useValidationEmits, u as useValidationProps, b as useValidation } from \"../../composables/useValidation.js\";\nimport { u as useSyncProp } from \"../../composables/useSyncProp.js\";\nimport { u as useTranslation } from \"../../composables/useTranslation.js\";\nimport { u as useTimeParser } from \"./hooks/time-text-parser.js\";\nimport { u as useTimeFormatter } from \"./hooks/time-text-formatter.js\";\nimport { _ as _VaTimePicker } from \"../va-time-picker/VaTimePicker.js\";\nimport { V as VaIcon } from \"../va-icon/VaIcon.js\";\nimport { V as VaDropdown } from \"../va-dropdown/index.js\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper.js\";\nimport { V as VaDropdownContent } from \"../va-dropdown/components/VaDropdownContent/index.js\";\nimport { V as VaInputWrapper } from \"../va-input/components/VaInputWrapper/VaInputWrapper.js\";\n\nvar VaTimeInput_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \":root{--va-time-input-min-width: var(--va-form-element-min-width)}.va-time-input{min-width:var(--va-time-input-min-width)}.va-time-input__anchor{flex:1}\\n\")();\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper, [\"focused\", \"maxLength\", \"counterValue\", \"disabled\"]);\nconst VaDropdownProps = extractComponentProps(VaDropdown, [\"keyboardNavigation\", \"offset\", \"placement\", \"closeOnContentClick\", \"innerAnchorSelector\", \"modelValue\"]);\n\nconst _sfc_main = defineComponent({\n  name: \"VaTimeInput\",\n  components: {\n    VaDropdown,\n    VaDropdownContent,\n    VaTimePicker: _VaTimePicker,\n    VaIcon,\n    VaInputWrapper\n  },\n  emits: [...useFocusEmits, ...useValidationEmits, ...useClearableEmits, \"update:modelValue\", \"update:isOpen\"],\n  props: { ...VaDropdownProps,\n    ...useComponentPresetProp,\n    ...useClearableProps,\n    ...VaInputWrapperProps,\n    ...extractComponentProps(_VaTimePicker),\n    ...useValidationProps,\n    isOpen: {\n      type: Boolean,\n      default: void 0\n    },\n    modelValue: {\n      type: Date,\n      default: void 0\n    },\n    clearValue: {\n      type: Date,\n      default: void 0\n    },\n    format: {\n      type: Function\n    },\n    parse: {\n      type: Function\n    },\n    manualInput: {\n      type: Boolean,\n      default: false\n    },\n    leftIcon: {\n      type: Boolean,\n      default: false\n    },\n    icon: {\n      type: String,\n      default: \"schedule\"\n    }\n  },\n  inheritAttrs: false,\n\n  setup(props, {\n    emit,\n    slots,\n    attrs\n  }) {\n    const input = shallowRef();\n    const timePicker = shallowRef();\n    const [isOpenSync] = useSyncProp(\"isOpen\", props, emit, false);\n    const [modelValueSync] = useSyncProp(\"modelValue\", props, emit);\n    const {\n      parse,\n      isValid\n    } = useTimeParser(props);\n    const {\n      format\n    } = useTimeFormatter(props);\n    const valueText = computed(() => format(modelValueSync.value || props.clearValue));\n    const doShowDropdown = computed({\n      get() {\n        if (props.disabled || props.readonly) {\n          return false;\n        }\n\n        return isOpenSync.value;\n      },\n\n      set(v) {\n        isOpenSync.value = v;\n\n        if (v) {\n          nextTick(() => {\n            var _a;\n\n            return (_a = timePicker.value) == null ? void 0 : _a.focus();\n          });\n        } else {\n          nextTick(() => {\n            var _a;\n\n            return (_a = input.value) == null ? void 0 : _a.focus();\n          });\n        }\n      }\n\n    });\n    const {\n      isFocused,\n      focus,\n      blur,\n      onFocus: focusListener,\n      onBlur: blurListener\n    } = useFocus(input);\n\n    const onInputTextChanged = e => {\n      var _a;\n\n      if (props.disabled) {\n        return;\n      }\n\n      const val = (_a = e.target) == null ? void 0 : _a.value;\n\n      if (!val) {\n        return reset();\n      }\n\n      const v = parse(val);\n\n      if (isValid.value && v) {\n        modelValueSync.value = v;\n      } else {\n        modelValueSync.value = void 0;\n        isValid.value = true;\n      }\n    };\n\n    const reset = () => withoutValidation(() => {\n      emit(\"update:modelValue\", props.clearValue);\n      emit(\"clear\");\n      resetValidation();\n    });\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation\n    } = useValidation(props, emit, {\n      reset,\n      focus\n    });\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur\n    } = useClearable(props, valueText);\n    const canBeClearedComputed = computed(() => canBeCleared.value && valueText.value !== format(props.clearValue));\n    const computedInputWrapperProps = computed(() => ({ ...filterComponentProps(VaInputWrapperProps).value,\n      focused: isFocused.value,\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput\n    }));\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        if (props.disabled) {\n          return;\n        }\n\n        focusListener();\n\n        if (props.readonly) {\n          return;\n        }\n\n        onFocus();\n        listeners.onFocus();\n      },\n      blur: () => {\n        if (props.disabled) {\n          return;\n        }\n\n        blurListener();\n\n        if (props.readonly) {\n          return;\n        }\n\n        onBlur();\n        listeners.onBlur();\n      }\n    }));\n    const filteredSlots = computed(() => {\n      const slotsWithIcons = [props.leftIcon && \"prependInner\", (!props.leftIcon || props.clearable) && \"icon\"];\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot));\n    });\n\n    const hideDropdown = () => {\n      doShowDropdown.value = false;\n    };\n\n    const showDropdown = (event, cancel, prevent) => {\n      doShowDropdown.value = true;\n    };\n\n    const checkProhibitedDropdownOpening = e => {\n      if (isOpenSync.value) {\n        return false;\n      }\n\n      if (props.disabled || props.readonly) {\n        return true;\n      }\n\n      return props.manualInput && (e == null ? void 0 : e.code) !== \"Space\";\n    };\n\n    const toggleDropdown = event => {\n      if (checkProhibitedDropdownOpening(event instanceof KeyboardEvent ? event : void 0)) {\n        return;\n      }\n\n      doShowDropdown.value = !doShowDropdown.value;\n    };\n\n    const cursorStyleComputed = computed(() => {\n      if (props.disabled) {\n        return {};\n      }\n\n      if (props.manualInput) {\n        return {\n          cursor: \"text\"\n        };\n      }\n\n      return {\n        cursor: \"pointer\"\n      };\n    });\n    const iconTabindexComputed = computed(() => props.disabled || props.readonly ? -1 : 0);\n    const iconProps = computed(() => ({\n      role: \"button\",\n      ariaHidden: false,\n      size: \"small\",\n      name: props.icon,\n      color: props.color,\n      tabindex: iconTabindexComputed.value\n    }));\n    const {\n      t\n    } = useTranslation();\n    const inputAttributesComputed = computed(() => ({\n      readonly: props.readonly || !props.manualInput,\n      disabled: props.disabled,\n      tabindex: props.disabled ? -1 : 0,\n      value: valueText.value,\n      ariaLabel: props.label || t(\"selectedTime\"),\n      ariaRequired: props.requiredMark,\n      ariaDisabled: props.disabled,\n      ariaReadOnly: props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit_1(attrs, [\"class\", \"style\"])\n    }));\n    const dropdownPropsComputed = computed(() => ({ ...filterComponentProps(VaDropdownProps).value,\n      closeOnContentClick: false,\n      offset: [2, 0],\n      keyboardNavigation: true,\n      placement: \"bottom-start\",\n      innerAnchorSelector: \".va-input-wrapper__field\"\n    }));\n    return {\n      t,\n      input,\n      timePicker,\n      timePickerProps: filterComponentProps(extractComponentProps(_VaTimePicker)),\n      dropdownPropsComputed,\n      computedInputWrapperProps,\n      computedInputListeners,\n      isOpenSync,\n      doShowDropdown,\n      modelValueSync,\n      valueText,\n      onInputTextChanged,\n      canBeClearedComputed,\n      iconProps,\n      clearIconProps,\n      filteredSlots,\n      inputAttributesComputed,\n      cursorStyleComputed,\n      hideDropdown,\n      showDropdown,\n      toggleDropdown,\n      reset,\n      focus,\n      blur\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_icon = resolveComponent(\"va-icon\");\n\n  const _component_va_input_wrapper = resolveComponent(\"va-input-wrapper\");\n\n  const _component_va_time_picker = resolveComponent(\"va-time-picker\");\n\n  const _component_va_dropdown_content = resolveComponent(\"va-dropdown-content\");\n\n  const _component_va_dropdown = resolveComponent(\"va-dropdown\");\n\n  return openBlock(), createBlock(_component_va_dropdown, mergeProps({\n    modelValue: _ctx.doShowDropdown,\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.doShowDropdown = $event),\n    class: [\"va-time-input\", _ctx.$attrs.class],\n    style: _ctx.$attrs.style\n  }, _ctx.dropdownPropsComputed), {\n    anchor: withCtx(() => [createVNode(_component_va_input_wrapper, mergeProps({\n      class: \"va-time-input__anchor\",\n      style: _ctx.cursorStyleComputed\n    }, _ctx.computedInputWrapperProps, {\n      onClick: withModifiers(_ctx.toggleDropdown, [\"stop\"])\n    }), createSlots({\n      default: withCtx(() => [createElementVNode(\"input\", mergeProps({\n        ref: \"input\",\n        class: \"va-time-input__input\"\n      }, _ctx.inputAttributesComputed, toHandlers(_ctx.computedInputListeners), {\n        onChange: _cache[0] || (_cache[0] = (...args) => _ctx.onInputTextChanged && _ctx.onInputTextChanged(...args))\n      }), null, 16)]),\n      icon: withCtx(() => [_ctx.canBeClearedComputed ? (openBlock(), createBlock(_component_va_icon, mergeProps({\n        key: 0\n      }, { ..._ctx.iconProps,\n        ..._ctx.clearIconProps\n      }, {\n        \"aria-label\": _ctx.t(\"resetTime\"),\n        onClick: withModifiers(_ctx.reset, [\"stop\"]),\n        onKeydown: [withKeys(withModifiers(_ctx.reset, [\"stop\"]), [\"enter\"]), withKeys(withModifiers(_ctx.reset, [\"stop\"]), [\"space\"])]\n      }), null, 16, [\"aria-label\", \"onClick\", \"onKeydown\"])) : !_ctx.$props.leftIcon && _ctx.$props.icon ? (openBlock(), createBlock(_component_va_icon, mergeProps({\n        key: 1,\n        \"aria-label\": _ctx.t(\"toggleDropdown\"),\n        onClick: withModifiers(_ctx.showDropdown, [\"stop\"]),\n        onKeydown: [withKeys(withModifiers(_ctx.showDropdown, [\"stop\"]), [\"enter\"]), withKeys(withModifiers(_ctx.showDropdown, [\"stop\"]), [\"space\"])]\n      }, _ctx.iconProps), null, 16, [\"aria-label\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"\", true)]),\n      _: 2\n    }, [renderList(_ctx.filteredSlots, name => {\n      return {\n        name,\n        fn: withCtx(slotScope => [renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps({ ...slotScope,\n          toggleDropdown: _ctx.toggleDropdown,\n          showDropdown: _ctx.showDropdown,\n          hideDropdown: _ctx.hideDropdown,\n          isOpen: _ctx.isOpenSync,\n          focus: _ctx.focus\n        })))])\n      };\n    }), _ctx.$slots.prependInner || _ctx.$props.leftIcon ? {\n      name: \"prependInner\",\n      fn: withCtx(slotScope => [renderSlot(_ctx.$slots, \"prependInner\", normalizeProps(guardReactiveProps({ ...slotScope,\n        toggleDropdown: _ctx.toggleDropdown,\n        showDropdown: _ctx.showDropdown,\n        hideDropdown: _ctx.hideDropdown,\n        isOpen: _ctx.isOpenSync,\n        focus: _ctx.focus\n      }))), _ctx.$props.leftIcon ? (openBlock(), createBlock(_component_va_icon, mergeProps({\n        key: 0,\n        \"aria-label\": _ctx.t(\"toggleDropdown\")\n      }, _ctx.iconProps, {\n        onClick: withModifiers(_ctx.showDropdown, [\"stop\"]),\n        onKeydown: [withKeys(withModifiers(_ctx.showDropdown, [\"stop\"]), [\"enter\"]), withKeys(withModifiers(_ctx.showDropdown, [\"stop\"]), [\"space\"])]\n      }), null, 16, [\"aria-label\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"\", true)])\n    } : void 0]), 1040, [\"style\", \"onClick\"])]),\n    default: withCtx(() => [createVNode(_component_va_dropdown_content, {\n      \"no-padding\": \"\",\n      onKeydown: withKeys(withModifiers(_ctx.hideDropdown, [\"prevent\"]), [\"esc\"]),\n      onKeypress: withKeys(withModifiers(_ctx.hideDropdown, [\"prevent\"]), [\"enter\"])\n    }, {\n      default: withCtx(() => [createVNode(_component_va_time_picker, mergeProps({\n        ref: \"timePicker\"\n      }, _ctx.timePickerProps, {\n        modelValue: _ctx.modelValueSync,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.modelValueSync = $event)\n      }), null, 16, [\"modelValue\"])]),\n      _: 1\n    }, 8, [\"onKeydown\", \"onKeypress\"])]),\n    _: 3\n  }, 16, [\"modelValue\", \"class\", \"style\"]);\n}\n\nvar _VaTimeInput = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaTimeInput as _ };\nimport './VaTimeInput.css';","map":{"version":3,"mappings":"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","names":["VaInputWrapperProps","extractComponentProps","VaInputWrapper","VaDropdownProps","VaDropdown","_sfc_main","defineComponent","name","components","VaDropdownContent","VaTimePicker","VaIcon","emits","useFocusEmits","useValidationEmits","useClearableEmits","props","useComponentPresetProp","useClearableProps","useValidationProps","isOpen","type","Boolean","default","modelValue","Date","clearValue","format","Function","parse","manualInput","leftIcon","icon","String","inheritAttrs","setup","emit","slots","attrs","input","shallowRef","timePicker","isOpenSync","useSyncProp","modelValueSync","isValid","useTimeParser","useTimeFormatter","computed","value","doShowDropdown","get","disabled","readonly","set","v","nextTick","focus","isFocused","blur","onFocus","focusListener","onBlur","blurListener","useFocus","e","target","val","reset","withoutValidation","resetValidation","computedError","computedErrorMessages","listeners","validationAriaAttributes","useValidation","canBeCleared","clearIconProps","useClearable","valueText","filterComponentProps","focused","error","errorMessages","slotsWithIcons","clearable","keys","filter","slot","includes","hideDropdown","showDropdown","event","cancel","prevent","code","checkProhibitedDropdownOpening","KeyboardEvent","cursor","role","ariaHidden","size","color","tabindex","iconTabindexComputed","t","useTranslation","ariaLabel","label","ariaRequired","requiredMark","ariaDisabled","ariaReadOnly","omit","closeOnContentClick","offset","keyboardNavigation","placement","innerAnchorSelector","timePickerProps","dropdownPropsComputed","computedInputWrapperProps","computedInputListeners","onInputTextChanged","canBeClearedComputed","iconProps","filteredSlots","inputAttributesComputed","cursorStyleComputed","toggleDropdown","_component_va_dropdown","_createBlock","class","_ctx","style","$attrs","_mergeProps","anchor","_withCtx","_createVNode","_component_va_input_wrapper","onClick","_withModifiers","_createSlots","_createElementVNode","ref","_toHandlers","onChange","_cache","_component_va_icon","key","onKeydown","_withKeys","_openBlock","_createCommentVNode","_renderList","fn","slotScope","_renderSlot","_normalizeProps","prependInner","$props","createCommentVNode","_component_va_dropdown_content","onKeypress","_component_va_time_picker"],"sources":["../../../../../src/components/va-time-input/VaTimeInput.vue"],"sourcesContent":["<template>\n  <va-dropdown\n    v-model=\"doShowDropdown\"\n    class=\"va-time-input\"\n    :class=\"$attrs.class\"\n    :style=\"$attrs.style\"\n    v-bind=\"dropdownPropsComputed\"\n  >\n    <template #anchor>\n      <va-input-wrapper\n        class=\"va-time-input__anchor\"\n        :style=\"cursorStyleComputed\"\n        v-bind=\"computedInputWrapperProps\"\n        @click.stop=\"toggleDropdown\"\n      >\n        <template #default>\n          <input\n            ref=\"input\"\n            class=\"va-time-input__input\"\n            v-bind=\"inputAttributesComputed\"\n            v-on=\"computedInputListeners\"\n            @change=\"onInputTextChanged\"\n          />\n        </template>\n\n        <template\n          v-for=\"name in filteredSlots\"\n          :key=\"name\"\n          v-slot:[name]=\"slotScope\"\n        >\n          <slot\n            :name=\"name\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n        </template>\n\n        <template #prependInner=\"slotScope\" v-if=\"$slots.prependInner || $props.leftIcon\">\n          <slot\n            name=\"prependInner\"\n            v-bind=\"{ ...slotScope, toggleDropdown, showDropdown, hideDropdown, isOpen: isOpenSync, focus }\"\n          />\n          <va-icon\n            v-if=\"$props.leftIcon\"\n            :aria-label=\"t('toggleDropdown')\"\n            v-bind=\"iconProps\"\n            @click.stop=\"showDropdown\"\n            @keydown.enter.stop=\"showDropdown\"\n            @keydown.space.stop=\"showDropdown\"\n          />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"canBeClearedComputed\"\n            v-bind=\"{ ...iconProps, ...clearIconProps }\"\n            :aria-label=\"t('resetTime')\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @keydown.space.stop=\"reset\"\n          />\n          <va-icon\n            v-else-if=\"!$props.leftIcon && $props.icon\"\n            :aria-label=\"t('toggleDropdown')\"\n            @click.stop=\"showDropdown\"\n            @keydown.enter.stop=\"showDropdown\"\n            @keydown.space.stop=\"showDropdown\"\n            v-bind=\"iconProps\"\n          />\n        </template>\n      </va-input-wrapper>\n    </template>\n\n    <va-dropdown-content\n      no-padding\n      @keydown.esc.prevent=\"hideDropdown\"\n      @keypress.enter.prevent=\"hideDropdown\"\n    >\n      <va-time-picker\n        ref=\"timePicker\"\n        v-bind=\"timePickerProps\"\n        v-model=\"modelValueSync\"\n      />\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, shallowRef, nextTick } from 'vue'\nimport omit from 'lodash/omit'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\nimport {\n  useComponentPresetProp,\n  useSyncProp,\n  useValidation, useValidationEmits, useValidationProps, ValidationProps,\n  useClearable, useClearableEmits, useClearableProps,\n  useFocus, useFocusEmits,\n  Placement,\n  useTranslation,\n} from '../../composables'\nimport { useTimeParser } from './hooks/time-text-parser'\nimport { useTimeFormatter } from './hooks/time-text-formatter'\n\nimport VaTimePicker from '../va-time-picker/VaTimePicker.vue'\nimport { VaInputWrapper } from '../va-input'\nimport VaIcon from '../va-icon/VaIcon.vue'\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\nimport type { DropdownOffsetProp } from '../va-dropdown/types'\n\nconst VaInputWrapperProps = extractComponentProps(VaInputWrapper, ['focused', 'maxLength', 'counterValue', 'disabled'])\nconst VaDropdownProps = extractComponentProps(VaDropdown,\n  ['keyboardNavigation', 'offset', 'placement', 'closeOnContentClick', 'innerAnchorSelector', 'modelValue'],\n)\n\nexport default defineComponent({\n  name: 'VaTimeInput',\n\n  components: { VaDropdown, VaDropdownContent, VaTimePicker, VaIcon, VaInputWrapper },\n\n  emits: [\n    ...useFocusEmits,\n    ...useValidationEmits,\n    ...useClearableEmits,\n    'update:modelValue',\n    'update:isOpen',\n  ],\n\n  props: {\n    ...VaDropdownProps,\n    ...useComponentPresetProp,\n    ...useClearableProps,\n    ...VaInputWrapperProps,\n    ...extractComponentProps(VaTimePicker),\n    ...useValidationProps as ValidationProps<Date>,\n\n    isOpen: { type: Boolean, default: undefined },\n    modelValue: { type: Date, default: undefined },\n    clearValue: { type: Date, default: undefined },\n    format: { type: Function as PropType<(date?: Date) => string> },\n    parse: { type: Function as PropType<(input: string) => Date> },\n    manualInput: { type: Boolean, default: false },\n    leftIcon: { type: Boolean, default: false },\n    icon: { type: String, default: 'schedule' },\n  },\n\n  inheritAttrs: false,\n\n  setup (props, { emit, slots, attrs }) {\n    const input = shallowRef<HTMLInputElement>()\n    const timePicker = shallowRef<typeof VaTimePicker>()\n\n    const [isOpenSync] = useSyncProp('isOpen', props, emit, false)\n    const [modelValueSync] = useSyncProp('modelValue', props, emit)\n\n    const { parse, isValid } = useTimeParser(props)\n    const { format } = useTimeFormatter(props)\n\n    const valueText = computed<string>(() => format(modelValueSync.value || props.clearValue))\n\n    const doShowDropdown = computed({\n      get () {\n        if (props.disabled || props.readonly) { return false }\n\n        return isOpenSync.value\n      },\n      set (v: boolean) {\n        isOpenSync.value = v\n\n        if (v) {\n          nextTick(() => timePicker.value?.focus())\n        } else {\n          nextTick(() => input.value?.focus())\n        }\n      },\n    })\n\n    const { isFocused, focus, blur, onFocus: focusListener, onBlur: blurListener } = useFocus(input)\n\n    const onInputTextChanged = (e: Event) => {\n      if (props.disabled) { return }\n\n      const val = (e.target as HTMLInputElement)?.value\n      if (!val) {\n        return reset()\n      }\n\n      const v = parse(val)\n\n      if (isValid.value && v) {\n        modelValueSync.value = v\n      } else {\n        modelValueSync.value = undefined\n        isValid.value = true\n      }\n    }\n\n    // --- not used yet ---\n    // const changePeriod = (isPM: boolean) => {\n    //   if (!modelValueSync.value) { return }\n\n    //   const halfDayPeriod = 12\n    //   const h = modelValueSync.value.getHours()\n\n    //   if (isPM && h <= halfDayPeriod) {\n    //     modelValueSync.value = new Date(modelValueSync.value.setHours(h + halfDayPeriod))\n    //   } else if (!isPM && h >= halfDayPeriod) {\n    //     modelValueSync.value = new Date(modelValueSync.value.setHours(h - halfDayPeriod))\n    //   }\n    // }\n\n    // const changePeriodToPm = () => changePeriod(true)\n    // const changePeriodToAm = () => changePeriod(false)\n\n    const reset = () => withoutValidation(() => {\n      emit('update:modelValue', props.clearValue)\n      emit('clear')\n      resetValidation()\n    })\n\n    const {\n      computedError,\n      computedErrorMessages,\n      listeners,\n      validationAriaAttributes,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus })\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueText)\n\n    const canBeClearedComputed = computed(() => (\n      canBeCleared.value && valueText.value !== format(props.clearValue)\n    ))\n\n    const computedInputWrapperProps = computed(() => ({\n      ...filterComponentProps(VaInputWrapperProps).value,\n      focused: isFocused.value,\n      error: computedError.value,\n      errorMessages: computedErrorMessages.value,\n      readonly: props.readonly || !props.manualInput,\n    }))\n\n    const computedInputListeners = computed(() => ({\n      focus: () => {\n        if (props.disabled) { return }\n\n        focusListener()\n\n        if (props.readonly) { return }\n        onFocus()\n        listeners.onFocus()\n      },\n      blur: () => {\n        if (props.disabled) { return }\n\n        blurListener()\n\n        if (props.readonly) { return }\n        onBlur()\n        listeners.onBlur()\n      },\n    }))\n\n    const filteredSlots = computed(() => {\n      const slotsWithIcons = [\n        props.leftIcon && 'prependInner',\n        (!props.leftIcon || props.clearable) && 'icon',\n      ]\n      return Object.keys(slots).filter(slot => !slotsWithIcons.includes(slot))\n    })\n\n    const hideDropdown = () => {\n      doShowDropdown.value = false\n    }\n\n    const showDropdown = (event?: KeyboardEvent, cancel?: boolean, prevent?: boolean) => {\n      doShowDropdown.value = true\n    }\n\n    const checkProhibitedDropdownOpening = (e?: KeyboardEvent) => {\n      if (isOpenSync.value) { return false }\n      if (props.disabled || props.readonly) { return true }\n      return props.manualInput && e?.code !== 'Space'\n    }\n\n    const toggleDropdown = (event: Event | KeyboardEvent) => {\n      if (checkProhibitedDropdownOpening(event instanceof KeyboardEvent ? event : undefined)) { return }\n\n      doShowDropdown.value = !doShowDropdown.value\n    }\n\n    const cursorStyleComputed = computed(() => {\n      if (props.disabled) { return {} }\n      if (props.manualInput) { return { cursor: 'text' } }\n      return { cursor: 'pointer' }\n    })\n\n    const iconTabindexComputed = computed(() => props.disabled || props.readonly ? -1 : 0)\n\n    const iconProps = computed(() => ({\n      role: 'button',\n      ariaHidden: false,\n      size: 'small',\n      name: props.icon,\n      color: props.color,\n      tabindex: iconTabindexComputed.value,\n    }))\n\n    const { t } = useTranslation()\n\n    const inputAttributesComputed = computed(() => ({\n      readonly: props.readonly || !props.manualInput,\n      disabled: props.disabled,\n      tabindex: props.disabled ? -1 : 0,\n      value: valueText.value,\n      ariaLabel: props.label || t('selectedTime'),\n      ariaRequired: props.requiredMark,\n      ariaDisabled: props.disabled,\n      ariaReadOnly: props.readonly,\n      ...validationAriaAttributes.value,\n      ...omit(attrs, ['class', 'style']),\n    }))\n\n    const dropdownPropsComputed = computed(() => ({\n      ...filterComponentProps(VaDropdownProps).value,\n      closeOnContentClick: false,\n      offset: [2, 0] as DropdownOffsetProp,\n      keyboardNavigation: true,\n      placement: 'bottom-start' as Placement,\n      innerAnchorSelector: '.va-input-wrapper__field',\n    }))\n\n    return {\n      t,\n      input,\n      timePicker,\n\n      timePickerProps: filterComponentProps(extractComponentProps(VaTimePicker)),\n      dropdownPropsComputed,\n      computedInputWrapperProps,\n      computedInputListeners,\n      isOpenSync,\n      doShowDropdown,\n      modelValueSync,\n      valueText,\n      onInputTextChanged,\n      canBeClearedComputed,\n      iconProps,\n      clearIconProps,\n      filteredSlots,\n      inputAttributesComputed,\n      cursorStyleComputed,\n\n      hideDropdown,\n      showDropdown,\n      toggleDropdown,\n\n      reset,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-time-input {\n  min-width: var(--va-time-input-min-width);\n\n  &__anchor {\n    flex: 1;\n  }\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module"}