{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getCurrentInstance } from \"vue\";\nimport { c as createToastInstance, a as closeById, b as closeAllNotifications } from \"../toast.js\";\n\nconst useToast = () => {\n  var _a;\n\n  const appContext = (_a = getCurrentInstance()) == null ? void 0 : _a.appContext;\n  const createdInThisSetupContext = [];\n\n  const init = options => {\n    const id = createToastInstance(options, appContext);\n\n    if (id) {\n      createdInThisSetupContext.push(id);\n    }\n\n    return id;\n  };\n\n  const close = id => closeById(id);\n\n  const closeAll = (allApps = false) => closeAllNotifications(allApps ? void 0 : appContext);\n\n  const closeAllCreatedInThisHook = () => {\n    createdInThisSetupContext.forEach(id => closeById(id));\n  };\n\n  return {\n    init,\n    close,\n    closeAll,\n    closeAllCreatedInThisHook\n  };\n};\n\nexport { useToast as u };","map":{"version":3,"mappings":";;;;AAKO,MAAMA,WAAW,MAAM;;;EACtB,mBAAa,kDAAsBC,UAAnC;EAEN,MAAMC,4BAAsC,EAA5C;;EAKM,aAAQC,OAAD,IAA2C;IAChD,WAAKC,oBAAoBD,OAApB,EAA6BF,UAA7B,CAAL;;IAEN,IAAII,EAAJ,EAAQ;MAAEH,0BAA0BI,IAA1B,CAA+BD,EAA/B;IAAmC;;IAEtC;EAAA,CALH;;EAQN,MAAME,QAASF,EAAD,IAAgBG,UAAUH,EAAV,CAA9B;;EAMA,MAAMI,WAAW,CAACC,UAAU,KAAX,KAAqBC,sBAAsBD,UAAU,MAAV,GAAsBT,UAA5C,CAAtC;;EAGA,MAAMW,4BAA4B,MAAM;IACtCV,0BAA0BW,OAA1B,CAAmCR,EAAD,IAAQG,UAAUH,EAAV,CAA1C;EAAuD,CADzD;;EAIO;IACLS,IADK;IACCP,KADD;IACQE,QADR;IACkBG;EADlB;AAGT,CAhCO","names":["useToast","appContext","createdInThisSetupContext","options","createToastInstance","id","push","close","closeById","closeAll","allApps","closeAllNotifications","closeAllCreatedInThisHook","forEach","init"],"sources":["../../../../../../src/components/va-toast/hooks/useToast.ts"],"sourcesContent":["import { getCurrentInstance } from 'vue'\n\nimport { createToastInstance, closeById, closeAllNotifications, NotificationOptions } from '../toast'\n\n/** This hook can be used without plugin used */\nexport const useToast = () => {\n  const appContext = getCurrentInstance()?.appContext\n\n  const createdInThisSetupContext: string[] = []\n\n  /**\n   * @param options can be options object or message string\n   */\n  const init = (options: string | NotificationOptions) => {\n    const id = createToastInstance(options, appContext)\n\n    if (id) { createdInThisSetupContext.push(id) }\n\n    return id\n  }\n\n  const close = (id: string) => closeById(id)\n\n  /**\n   * Closes all VaToast instances in current App instance.\n   * @param allApps if you have multiple vue apps on page, set allApps to true to close it for all apps.\n   */\n  const closeAll = (allApps = false) => closeAllNotifications(allApps ? undefined : appContext)\n\n  /** Use this method if you need to close only toasts that created with this hook */\n  const closeAllCreatedInThisHook = () => {\n    createdInThisSetupContext.forEach((id) => closeById(id))\n  }\n\n  return {\n    init, close, closeAll, closeAllCreatedInThisHook,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}