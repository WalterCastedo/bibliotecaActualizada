{"ast":null,"code":"import { ref, computed, watch } from \"vue\";\nimport { a as isSingleDate, i as isDates, b as isRange, d as isDatesMonthEqual, e as isDatesDayEqual, f as isDatesYearEqual } from \"../utils/date-utils.js\";\nimport { u as useDatePickerModelValue } from \"./model-value-helper.js\";\n\nconst getDateEqualFunction = type => {\n  return {\n    month: isDatesMonthEqual,\n    day: isDatesDayEqual,\n    year: isDatesYearEqual\n  }[type];\n};\n\nconst useDatePicker = (type, dates, props, emit) => {\n  const datesEqual = getDateEqualFunction(type);\n  const isAllowedDate = props.allowedDays || props.allowedMonths || props.allowedYears;\n\n  const isDateDisabled = date => isAllowedDate === void 0 ? false : !isAllowedDate(date);\n\n  const hoveredIndex = ref(-1);\n  const hoveredValue = computed(() => dates.value[hoveredIndex.value]);\n  const {\n    updateModelValue\n  } = useDatePickerModelValue(props, emit, datesEqual);\n\n  const onClick = date => {\n    if (props.readonly || isDateDisabled(date)) {\n      return;\n    }\n\n    updateModelValue(date);\n    emit(`click:${type}`, date);\n  };\n\n  const isToday = date => {\n    const today = new Date();\n    return datesEqual(today, date);\n  };\n\n  const isSelected = date => {\n    if (!props.modelValue) {\n      return false;\n    }\n\n    if (isSingleDate(props.modelValue)) {\n      return datesEqual(props.modelValue, date);\n    } else if (isDates(props.modelValue)) {\n      return !!props.modelValue.find(d => datesEqual(d, date));\n    } else if (isRange(props.modelValue)) {\n      return datesEqual(props.modelValue.start, date) || datesEqual(props.modelValue.end, date);\n    }\n\n    return false;\n  };\n\n  const isInRange = date => {\n    if (!props.modelValue) {\n      return false;\n    }\n\n    if (!isRange(props.modelValue)) {\n      return false;\n    }\n\n    if (props.modelValue.start && props.modelValue.end) {\n      return props.modelValue.start < date && props.modelValue.end > date;\n    }\n\n    const selectedDate = props.modelValue.start || props.modelValue.end;\n\n    if (selectedDate) {\n      if (!hoveredValue.value) {\n        return false;\n      }\n\n      return selectedDate < date ? hoveredValue.value >= date : hoveredValue.value <= date;\n    }\n\n    return false;\n  };\n\n  watch(hoveredValue, date => {\n    emit(`hover:${type}`, date);\n  });\n  return {\n    hoveredIndex,\n    hoveredValue,\n    onClick,\n    isToday,\n    isSelected,\n    isInRange\n  };\n};\n\nexport { useDatePicker as u };","map":{"version":3,"mappings":";;;;AAMA,MAAMA,uBAAwBC,IAAD,IAA0B;EAC9C;IACLC,OAAOC,iBADF;IAELC,KAAKC,eAFA;IAGLC,MAAMC;EAHD,EAILN,IAJK;AAKT,CANA;;AAQO,MAAMO,gBAAgB,CAC3BP,IAD2B,EAE3BQ,KAF2B,EAG3BC,KAH2B,EAW3BC,IAX2B,KAYxB;EACG,mBAAaX,qBAAqBC,IAArB,CAAb;EACN,MAAMW,gBAAgBF,MAAMG,WAAN,IAAqBH,MAAMI,aAA3B,IAA4CJ,MAAMK,YAAxE;;EACM,uBAAkBC,IAAD,IAAgBJ,kBAAkB,MAAlB,GAA8B,KAA9B,GAAsC,CAACA,cAAcI,IAAd,CAAxE;;EAEA,qBAAeC,IAAI,EAAJ,CAAf;EACN,MAAMC,eAAeC,SAAS,MAAMV,MAAMW,KAAN,CAAYC,aAAaD,KAAzB,CAAf,CAArB;EAEA,MAAM;IAAEE;EAAF,IAAuBC,wBAC3Bb,KAD2B,EAE3BC,IAF2B,EAG3Ba,UAH2B,CAA7B;;EAMM,gBAAWR,IAAD,IAAgB;IAC9B,IAAIN,MAAMe,QAAN,IAAkBC,eAAeV,IAAf,CAAtB,EAA4C;MAAE;IAAO;;IAErDM,iBAAiBN,IAAjB;IACKL,cAASV,MAAT,EAAiBe,IAAjB;EAAqB,CAJtB;;EAOA,gBAAWA,IAAD,IAAyB;IACjC,cAAQ,IAAIW,IAAJ,EAAR;IACC,kBAAWC,KAAX,EAAkBZ,IAAlB;EAAsB,CAFzB;;EAKA,mBAAcA,IAAD,IAAyB;IACtC,KAACN,MAAMmB,UAAP,EAAmB;MAAS;IAAM;;IAElC,iBAAanB,MAAMmB,UAAnB,GAAgC;MAC3B,kBAAWnB,MAAMmB,UAAjB,EAA6Bb,IAA7B;IACE,CAFP,MAEO,YAAQN,MAAMmB,UAAd,GAA2B;MAC7B,QAAC,CAACnB,MAAMmB,UAAN,CAAiBC,IAAjB,CAAuBC,CAAD,IAAOP,WAAWO,CAAX,EAAcf,IAAd,CAA7B,CAAF;IACE,CAFA,MAEA,YAAQN,MAAMmB,UAAd,GAA2B;MAC7B,kBAAWnB,MAAMmB,UAAN,CAAiBG,KAA5B,EAAmChB,IAAnC,KAA4CQ,WAAWd,MAAMmB,UAAN,CAAiBI,GAA5B,EAAiCjB,IAAjC,CAA5C;IACT;;IAEO;EAAA,CAXH;;EAcA,kBAAaA,IAAD,IAAyB;IACrC,KAACN,MAAMmB,UAAP,EAAmB;MAAS;IAAM;;IAEtC,IAAI,CAACK,QAAQxB,MAAMmB,UAAd,CAAL,EAAgC;MAAS;IAAM;;IAE/C,IAAInB,MAAMmB,UAAN,CAAiBG,KAAjB,IAA0BtB,MAAMmB,UAAN,CAAiBI,GAA/C,EAAoD;MAClD,OAAOvB,MAAMmB,UAAN,CAAiBG,KAAjB,GAAyBhB,IAAzB,IAAiCN,MAAMmB,UAAN,CAAiBI,GAAjB,GAAuBjB,IAA/D;IACF;;IAEA,MAAMmB,eAAezB,MAAMmB,UAAN,CAAiBG,KAAjB,IAA0BtB,MAAMmB,UAAN,CAAiBI,GAAhE;;IAEA,IAAIE,YAAJ,EAAkB;MACZ,KAACjB,aAAaE,KAAd,EAAqB;QAAS;MAAM;;MAExC,OAAOe,eAAenB,IAAf,GACFE,aAAaE,KAAb,IAAsBJ,IADpB,GAEFE,aAAaE,KAAb,IAAsBJ,IAF3B;IAGF;;IAEO;EAAA,CAnBH;;EAsBAoB,oBAAepB,IAAD,IAAU;IAAOL,cAASV,MAAT,EAAiBe,IAAjB;EAAwB,CAAvD;EAEC;IACLK,YADK;IAELH,YAFK;IAGLmB,OAHK;IAILC,OAJK;IAKLC,UALK;IAMLC;EANK;AAQT,CApFO","names":["getDateEqualFunction","type","month","isDatesMonthEqual","day","isDatesDayEqual","year","isDatesYearEqual","useDatePicker","dates","props","emit","isAllowedDate","allowedDays","allowedMonths","allowedYears","date","ref","hoveredValue","computed","value","hoveredIndex","updateModelValue","useDatePickerModelValue","datesEqual","readonly","isDateDisabled","Date","today","modelValue","find","d","start","end","isRange","selectedDate","watch","onClick","isToday","isSelected","isInRange"],"sources":["../../../../../../src/components/va-date-picker/hooks/use-picker.ts"],"sourcesContent":["import { computed, ComputedRef, ref, watch } from 'vue'\n\nimport { isDatesMonthEqual, isDatesDayEqual, isDatesYearEqual, isDates, isRange, isSingleDate } from './../utils/date-utils'\nimport { useDatePickerModelValue } from './model-value-helper'\nimport { DatePickerMode, DatePickerModelValue, DatePickerType } from '../types'\n\nconst getDateEqualFunction = (type: DatePickerType) => {\n  return {\n    month: isDatesMonthEqual,\n    day: isDatesDayEqual,\n    year: isDatesYearEqual,\n  }[type]\n}\n\nexport const useDatePicker = (\n  type: DatePickerType,\n  dates: ComputedRef<Date[]>,\n  props: {\n    modelValue?: DatePickerModelValue,\n    mode: DatePickerMode,\n    readonly: boolean,\n    allowedDays?: (date: Date) => boolean,\n    allowedMonths?: (date: Date) => boolean,\n    allowedYears?: (date: Date) => boolean,\n  },\n  emit: (event: 'update:modelValue' | any, ...args: any[]) => void,\n) => {\n  const datesEqual = getDateEqualFunction(type)\n  const isAllowedDate = props.allowedDays || props.allowedMonths || props.allowedYears\n  const isDateDisabled = (date: Date) => isAllowedDate === undefined ? false : !isAllowedDate(date)\n\n  const hoveredIndex = ref(-1)\n  const hoveredValue = computed(() => dates.value[hoveredIndex.value])\n\n  const { updateModelValue } = useDatePickerModelValue(\n    props,\n    emit,\n    datesEqual,\n  )\n\n  const onClick = (date: Date) => {\n    if (props.readonly || isDateDisabled(date)) { return }\n\n    updateModelValue(date)\n    emit(`click:${type}`, date)\n  }\n\n  const isToday = (date: Date): boolean => {\n    const today = new Date()\n    return datesEqual(today, date)\n  }\n\n  const isSelected = (date: Date): boolean => {\n    if (!props.modelValue) { return false }\n\n    if (isSingleDate(props.modelValue)) {\n      return datesEqual(props.modelValue, date)\n    } else if (isDates(props.modelValue)) {\n      return !!props.modelValue.find((d) => datesEqual(d, date))\n    } else if (isRange(props.modelValue)) {\n      return datesEqual(props.modelValue.start, date) || datesEqual(props.modelValue.end, date)\n    }\n\n    return false\n  }\n\n  const isInRange = (date: Date): boolean => {\n    if (!props.modelValue) { return false }\n\n    if (!isRange(props.modelValue)) { return false }\n\n    if (props.modelValue.start && props.modelValue.end) {\n      return props.modelValue.start < date && props.modelValue.end > date\n    }\n\n    const selectedDate = props.modelValue.start || props.modelValue.end\n\n    if (selectedDate) {\n      if (!hoveredValue.value) { return false }\n\n      return selectedDate < date\n        ? (hoveredValue.value >= date)\n        : (hoveredValue.value <= date)\n    }\n\n    return false\n  }\n\n  watch(hoveredValue, (date) => { emit(`hover:${type}`, date) })\n\n  return {\n    hoveredIndex,\n    hoveredValue,\n    onClick,\n    isToday,\n    isSelected,\n    isInRange,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}