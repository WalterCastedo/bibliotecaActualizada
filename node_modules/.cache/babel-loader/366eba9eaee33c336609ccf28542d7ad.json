{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, shallowRef, computed, ref, watch, resolveComponent, openBlock, createElementBlock, withKeys, withModifiers, Fragment, renderList, toDisplayString, createCommentVNode, createBlock, withCtx, mergeProps, renderSlot, normalizeProps } from \"vue\";\nimport { p as pick_1 } from \"../../../../../vendor.js\";\nimport { a as useColorProps } from \"../../../../composables/useColors.js\";\nimport { u as useComponentPresetProp } from \"../../../../composables/useComponentPreset.js\";\nimport { e as extractHTMLElement } from \"../../../../composables/useHTMLElement.js\";\nimport { u as useObjectRefs } from \"../../../../composables/useObjectRefs.js\";\nimport { u as useSelectableListProps, a as useSelectableList } from \"../../../../composables/useSelectableList.js\";\nimport { u as useSlotPassed } from \"../../../../composables/useSlotPassed.js\";\nimport { s as scrollToElement } from \"../../../../utils/scroll-to-element.js\";\nimport { V as VaVirtualScroller } from \"../../../va-virtual-scroller/index.js\";\nimport { V as VaSelectOption } from \"../VaSelectOption/index.js\";\nimport { _ as _export_sfc } from \"../../../../../plugin-vue_export-helper.js\";\n\nvar VaSelectOptionList_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => ':root{--va-select-option-list-width: 100%;--va-select-option-list-max-height: 12.5rem;--va-select-option-list-group-name-padding: 1rem .75rem .375rem;--va-select-option-list-group-name-font-size: .6rem;--va-select-option-list-group-name-color: var(--va-primary);--va-select-option-list-group-name-font-weight: 700;--va-select-option-list-group-name-text-transform: \"uppercase\";--va-select-option-list-empty-padding: .5rem}.va-select-option-list{overflow:auto;width:var(--va-select-option-list-width);max-height:var(--va-select-option-list-max-height);display:flex;flex-direction:column;font-family:var(--va-font-family);scrollbar-color:var(--va-primary) transparent;scrollbar-width:thin}.va-select-option-list--empty{padding:var(--va-select-option-list-empty-block-padding)}.va-select-option-list::-webkit-scrollbar{width:4px;height:4px}.va-select-option-list::-webkit-scrollbar-track{box-shadow:none;border-radius:10px}.va-select-option-list::-webkit-scrollbar-thumb{background:var(--va-primary);opacity:.3;border-radius:2px}.va-select-option-list__group-name{padding:var(--va-select-option-list-group-name-padding);font-size:var(--va-select-option-list-group-name-font-size);color:var(--va-select-option-list-group-name-color);font-weight:var(--va-select-option-list-group-name-font-weight);text-transform:var(--va-select-option-list-group-name-text-transform)}\\n')();\n\nconst _sfc_main = defineComponent({\n  name: \"VaSelectOptionList\",\n  components: {\n    VaVirtualScroller,\n    VaSelectOption\n  },\n  emits: [\"select-option\", \"update:hoveredOption\", \"no-previous-option-to-hover\", \"scroll-bottom\"],\n  props: { ...useColorProps,\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    noOptionsText: {\n      type: String,\n      default: \"Items not found\"\n    },\n    getSelectedState: {\n      type: Function,\n      required: true\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    search: {\n      type: String,\n      default: \"\"\n    },\n    tabindex: {\n      type: Number,\n      default: 0\n    },\n    hoveredOption: {\n      type: [String, Number, Object],\n      default: null\n    },\n    virtualScroller: {\n      type: Boolean,\n      default: true\n    }\n  },\n\n  setup(props, {\n    emit\n  }) {\n    const root = shallowRef();\n\n    const focus = () => {\n      var _a;\n\n      (_a = root.value) == null ? void 0 : _a.focus({\n        preventScroll: true\n      });\n    };\n\n    const rootHeight = computed(() => {\n      var _a, _b;\n\n      return (_b = (_a = root.value) == null ? void 0 : _a.clientHeight) != null ? _b : 200;\n    });\n\n    const handleScrollToBottom = () => emit(\"scroll-bottom\");\n\n    const onScroll = event => {\n      const target = event.target;\n\n      if (!target) {\n        return;\n      }\n\n      if (target.scrollTop + target.clientHeight === target.scrollHeight) {\n        handleScrollToBottom();\n      }\n    };\n\n    const lastInteractionSource = ref(\"\");\n    const currentOptionComputed = computed(() => {\n      var _a;\n\n      return (_a = props.hoveredOption) != null ? _a : null;\n    });\n\n    const updateCurrentOption = (option, source) => {\n      emit(\"update:hoveredOption\", option);\n      lastInteractionSource.value = source;\n    };\n\n    const {\n      getText,\n      getGroupBy,\n      getTrackBy,\n      getDisabled\n    } = useSelectableList(props);\n    const filteredOptions = computed(() => {\n      if (!props.search) {\n        return props.options;\n      }\n\n      return props.options.filter(option => {\n        const optionText = getText(option).toString().toUpperCase();\n        const search = props.search.toUpperCase();\n        return optionText.includes(search);\n      });\n    });\n    const optionGroups = computed(() => filteredOptions.value.reduce((groups, option) => {\n      if (typeof option !== \"object\" || !getGroupBy(option)) {\n        groups._noGroup.push(option);\n      } else {\n        const groupBy = getGroupBy(option);\n\n        if (!groups[groupBy]) {\n          groups[groupBy] = [];\n        }\n\n        groups[groupBy].push(option);\n      }\n\n      return groups;\n    }, {\n      _noGroup: []\n    }));\n\n    const isValueExists = value => !!value || value === 0;\n\n    const updateHoveredOption = option => {\n      if (option === currentOptionComputed.value || isValueExists(option) && getDisabled(option)) {\n        return;\n      }\n\n      updateCurrentOption(option != null ? option : null, \"mouse\");\n    };\n\n    const updateFocusedOption = option => {\n      updateCurrentOption(option != null ? option : null, \"keyboard\");\n    };\n\n    const selectOption = option => !getDisabled(option) && emit(\"select-option\", option);\n\n    const groupedOptions = computed(() => Object.values(optionGroups.value).flat());\n    const currentOptions = computed(() => filteredOptions.value.some(el => getGroupBy(el)) ? groupedOptions.value : filteredOptions.value);\n    const currentOptionIndex = computed(() => currentOptions.value.findIndex(option => {\n      return isValueExists(currentOptionComputed.value) && getTrackBy(option) === getTrackBy(currentOptionComputed.value);\n    }));\n    const selectOptionProps = computed(() => ({ ...pick_1(props, [\"getSelectedState\", \"color\"]),\n      getText,\n      getTrackBy\n    }));\n    const isSlotContentPassed = useSlotPassed();\n\n    const findNextActiveOption = (startSearchIndex, reversedSearch = false) => {\n      const searchBase = [...(currentOptions.value || [])];\n      const searchBaseOrdered = reversedSearch ? searchBase.reverse() : searchBase;\n      const startIndex = reversedSearch ? startSearchIndex * -1 - 1 : startSearchIndex;\n      return searchBaseOrdered.slice(startIndex).find(option => !getDisabled(option));\n    };\n\n    const focusPreviousOption = () => {\n      if (!isValueExists(currentOptionComputed.value)) {\n        updateFocusedOption(findNextActiveOption(0, true));\n        return;\n      }\n\n      const previousOptionIndex = currentOptionIndex.value - 1;\n      const previousOption = currentOptions.value[previousOptionIndex];\n      const previousOptionCheck = isValueExists(previousOption) && !(previousOptionIndex === 0 && getDisabled(previousOption));\n\n      if (previousOptionCheck) {\n        updateFocusedOption(findNextActiveOption(currentOptionIndex.value - 1, true));\n      } else {\n        emit(\"no-previous-option-to-hover\");\n      }\n    };\n\n    const focusNextOption = () => {\n      if (!isValueExists(currentOptionComputed.value)) {\n        focusFirstOption();\n        return;\n      }\n\n      const nextOptionIndex = currentOptionIndex.value + 1;\n      const nextOption = currentOptions.value[nextOptionIndex];\n      const nextOptionCheck = isValueExists(nextOption) && !(nextOptionIndex === currentOptions.value.length - 1 && getDisabled(nextOption));\n\n      if (nextOptionCheck) {\n        updateFocusedOption(findNextActiveOption(currentOptionIndex.value + 1));\n      }\n    };\n\n    const focusFirstOption = () => updateFocusedOption(findNextActiveOption(0));\n\n    const {\n      itemRefs,\n      setItemRef\n    } = useObjectRefs();\n    const virtualScrollerRef = shallowRef();\n\n    const scrollToOption = option => {\n      var _a;\n\n      if (!isValueExists(option)) {\n        return;\n      }\n\n      const element = itemRefs.value[getTrackBy(option)];\n\n      if (element) {\n        scrollToElement(extractHTMLElement(element));\n      }\n\n      if (props.virtualScroller) {\n        (_a = virtualScrollerRef.value) == null ? void 0 : _a[0].virtualScrollTo(currentOptionIndex.value);\n      }\n    };\n\n    const publicMethods = {\n      focusPreviousOption,\n      focusNextOption,\n      focusFirstOption,\n      scrollToOption,\n      focus\n    };\n    watch(() => props.hoveredOption, newOption => {\n      (!lastInteractionSource.value || lastInteractionSource.value === \"keyboard\") && isValueExists(newOption) && scrollToOption(newOption);\n    });\n    return {\n      root,\n      virtualScrollerRef,\n      rootHeight,\n      optionGroups,\n      filteredOptions,\n      selectOptionProps,\n      isSlotContentPassed,\n      currentOptionComputed,\n      onScroll,\n      getTrackBy,\n      setItemRef,\n      getDisabled,\n      selectOption,\n      updateHoveredOption,\n      handleScrollToBottom,\n      ...publicMethods\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"tabindex\"];\nconst _hoisted_2 = {\n  key: 0,\n  class: \"va-select-option-list__group-name\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"va-select-option-list--empty\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_select_option = resolveComponent(\"va-select-option\");\n\n  const _component_va_virtual_scroller = resolveComponent(\"va-virtual-scroller\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"root\",\n    class: \"va-select-option-list\",\n    tabindex: _ctx.tabindex,\n    onKeydown: [_cache[0] || (_cache[0] = withKeys(withModifiers((...args) => _ctx.focusPreviousOption && _ctx.focusPreviousOption(...args), [\"stop\", \"prevent\"]), [\"up\"])), _cache[1] || (_cache[1] = withKeys(withModifiers((...args) => _ctx.focusPreviousOption && _ctx.focusPreviousOption(...args), [\"stop\", \"prevent\"]), [\"left\"])), _cache[2] || (_cache[2] = withKeys(withModifiers((...args) => _ctx.focusNextOption && _ctx.focusNextOption(...args), [\"stop\", \"prevent\"]), [\"down\"])), _cache[3] || (_cache[3] = withKeys(withModifiers((...args) => _ctx.focusNextOption && _ctx.focusNextOption(...args), [\"stop\", \"prevent\"]), [\"right\"]))],\n    onScrollPassive: _cache[4] || (_cache[4] = (...args) => _ctx.onScroll && _ctx.onScroll(...args))\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.optionGroups, (options, groupName) => {\n    return openBlock(), createElementBlock(Fragment, {\n      key: groupName\n    }, [groupName !== \"_noGroup\" ? (openBlock(), createElementBlock(\"span\", _hoisted_2, toDisplayString(groupName), 1)) : createCommentVNode(\"\", true), _ctx.$props.virtualScroller ? (openBlock(), createBlock(_component_va_virtual_scroller, {\n      key: 1,\n      ref_for: true,\n      ref: \"virtualScrollerRef\",\n      items: options,\n      \"track-by\": _ctx.getTrackBy,\n      \"wrapper-size\": _ctx.rootHeight,\n      \"onScroll:bottom\": _ctx.handleScrollToBottom\n    }, {\n      default: withCtx(({\n        item: option,\n        index\n      }) => [!_ctx.isSlotContentPassed ? (openBlock(), createBlock(_component_va_select_option, mergeProps({\n        key: 0,\n        option,\n        \"current-option\": _ctx.currentOptionComputed,\n        disabled: _ctx.getDisabled(option)\n      }, _ctx.selectOptionProps, {\n        onClick: $event => _ctx.selectOption(option),\n        onMousemove: $event => _ctx.updateHoveredOption(option)\n      }), null, 16, [\"option\", \"current-option\", \"disabled\", \"onClick\", \"onMousemove\"])) : renderSlot(_ctx.$slots, \"default\", normalizeProps(mergeProps({\n        key: 1\n      }, {\n        option,\n        index,\n        selectOption: _ctx.selectOption\n      })))]),\n      _: 2\n    }, 1032, [\"items\", \"track-by\", \"wrapper-size\", \"onScroll:bottom\"])) : (openBlock(true), createElementBlock(Fragment, {\n      key: 2\n    }, renderList(options, (option, index) => {\n      return openBlock(), createElementBlock(Fragment, {\n        key: _ctx.getTrackBy(option)\n      }, [!_ctx.isSlotContentPassed ? (openBlock(), createBlock(_component_va_select_option, mergeProps({\n        key: 0,\n        ref_for: true,\n        ref: _ctx.setItemRef(_ctx.getTrackBy(option)),\n        \"current-option\": _ctx.currentOptionComputed,\n        option,\n        disabled: _ctx.getDisabled(option)\n      }, _ctx.selectOptionProps, {\n        onClick: $event => _ctx.selectOption(option),\n        onMousemove: $event => _ctx.updateHoveredOption(option)\n      }), null, 16, [\"current-option\", \"option\", \"disabled\", \"onClick\", \"onMousemove\"])) : renderSlot(_ctx.$slots, \"default\", normalizeProps(mergeProps({\n        key: 1\n      }, {\n        option,\n        index,\n        selectOption: _ctx.selectOption\n      })))], 64);\n    }), 128))], 64);\n  }), 128)), !_ctx.filteredOptions.length ? (openBlock(), createElementBlock(\"div\", _hoisted_3, toDisplayString(_ctx.noOptionsText), 1)) : createCommentVNode(\"\", true)], 40, _hoisted_1);\n}\n\nvar _VaSelectOptionList = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaSelectOptionList as _ };\nimport './VaSelectOptionList.css';","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","VaVirtualScroller","VaSelectOption","emits","props","useColorProps","useComponentPresetProp","useSelectableListProps","noOptionsText","type","String","default","getSelectedState","Function","required","multiple","Boolean","search","tabindex","Number","hoveredOption","Object","virtualScroller","setup","emit","root","shallowRef","focus","value","preventScroll","rootHeight","computed","clientHeight","event","target","scrollTop","scrollHeight","handleScrollToBottom","ref","currentOptionComputed","option","source","lastInteractionSource","getText","getGroupBy","getTrackBy","getDisabled","useSelectableList","options","filter","optionText","toString","toUpperCase","includes","filteredOptions","reduce","groups","push","groupBy","_noGroup","isValueExists","updateCurrentOption","values","optionGroups","flat","currentOptions","some","el","groupedOptions","currentOptionIndex","findIndex","pick","isSlotContentPassed","useSlotPassed","findNextActiveOption","startSearchIndex","reversedSearch","searchBase","searchBaseOrdered","reverse","startIndex","slice","find","focusPreviousOption","updateFocusedOption","previousOptionIndex","previousOption","previousOptionCheck","focusNextOption","focusFirstOption","nextOptionIndex","nextOption","length","nextOptionCheck","itemRefs","setItemRef","useObjectRefs","virtualScrollerRef","element","scrollToElement","virtualScrollTo","publicMethods","scrollToOption","watch","newOption","selectOptionProps","onScroll","selectOption","updateHoveredOption","class","_createElementBlock","_ctx","onKeydown","_withModifiers","_withKeys","_cache","onScrollPassive","_openBlock","_Fragment","_renderList","groupName","_toDisplayString","_createCommentVNode","openBlock","_createBlock","_component_va_virtual_scroller","key","ref_for","items","item","index","_component_va_select_option","disabled","_mergeProps","onClick","$event","onMousemove","_renderSlot","_normalizeProps","_","_hoisted_1"],"sources":["../../../../../../../src/components/va-select/components/VaSelectOptionList/VaSelectOptionList.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"root\"\n    class=\"va-select-option-list\"\n    :tabindex=\"tabindex\"\n    @keydown.up.stop.prevent=\"focusPreviousOption\"\n    @keydown.left.stop.prevent=\"focusPreviousOption\"\n    @keydown.down.stop.prevent=\"focusNextOption\"\n    @keydown.right.stop.prevent=\"focusNextOption\"\n    @scroll.passive=\"onScroll\"\n  >\n    <template\n      v-for=\"(options, groupName) in optionGroups\"\n      :key=\"groupName\"\n    >\n      <span\n        v-if=\"groupName !== '_noGroup'\"\n        class=\"va-select-option-list__group-name\"\n      >\n        {{ groupName }}\n      </span>\n      <va-virtual-scroller\n        v-if=\"$props.virtualScroller\"\n        ref=\"virtualScrollerRef\"\n        :items=\"options\"\n        :track-by=\"getTrackBy\"\n        :wrapper-size=\"rootHeight\"\n        @scroll:bottom=\"handleScrollToBottom\"\n        v-slot=\"{ item: option, index }\"\n      >\n        <va-select-option\n          v-if=\"!isSlotContentPassed\"\n          :option=\"option\"\n          :current-option=\"currentOptionComputed\"\n          :disabled=\"getDisabled(option)\"\n          v-bind=\"selectOptionProps\"\n          @click=\"selectOption(option)\"\n          @mousemove=\"updateHoveredOption(option)\"\n        />\n        <template v-else>\n          <slot v-bind=\"{ option, index, selectOption }\" />\n        </template>\n      </va-virtual-scroller>\n\n      <template v-else>\n        <template v-for=\"(option, index) in options\" :key=\"getTrackBy(option)\">\n          <va-select-option\n            v-if=\"!isSlotContentPassed\"\n            :ref=\"setItemRef(getTrackBy(option))\"\n            :current-option=\"currentOptionComputed\"\n            :option=\"option\"\n            :disabled=\"getDisabled(option)\"\n            v-bind=\"selectOptionProps\"\n            @click=\"selectOption(option)\"\n            @mousemove=\"updateHoveredOption(option)\"\n          />\n          <template v-else>\n            <slot v-bind=\"{ option, index, selectOption }\" />\n          </template>\n        </template>\n      </template>\n    </template>\n    <div\n      v-if=\"!filteredOptions.length\"\n      class=\"va-select-option-list--empty\"\n    >\n      {{ noOptionsText }}\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, shallowRef, watch, computed } from 'vue'\nimport pick from 'lodash/pick.js'\n\nimport {\n  useComponentPresetProp,\n  useColorProps,\n  extractHTMLElement,\n  useObjectRefs,\n  useSlotPassed,\n  useSelectableList, useSelectableListProps,\n} from '../../../../composables'\n\nimport { scrollToElement } from '../../../../utils/scroll-to-element'\n\nimport { VaVirtualScroller } from '../../../va-virtual-scroller'\nimport { VaSelectOption } from '../VaSelectOption'\n\nimport type { SelectOption, EventSource } from '../../types'\n\nexport default defineComponent({\n  name: 'VaSelectOptionList',\n  components: { VaVirtualScroller, VaSelectOption },\n  emits: [\n    'select-option',\n    'update:hoveredOption',\n    'no-previous-option-to-hover',\n    'scroll-bottom',\n  ],\n  props: {\n    ...useColorProps,\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    noOptionsText: { type: String, default: 'Items not found' },\n    getSelectedState: { type: Function as PropType<(option: SelectOption) => boolean>, required: true },\n    multiple: { type: Boolean, default: false },\n    search: { type: String, default: '' },\n    tabindex: { type: Number, default: 0 },\n    hoveredOption: { type: [String, Number, Object] as PropType<SelectOption | null>, default: null },\n    virtualScroller: { type: Boolean, default: true },\n  },\n\n  setup (props, { emit }) {\n    const root = shallowRef<HTMLElement>()\n    const focus = () => {\n      // Prevent scroll since element in dropdown and it causes scrolling to page end.\n      root.value?.focus({ preventScroll: true })\n    }\n    const rootHeight = computed(() => root.value?.clientHeight ?? 200)\n\n    const handleScrollToBottom = () => emit('scroll-bottom')\n    const onScroll = (event: UIEvent) => {\n      const target = event.target as Element\n      if (!target) { return }\n\n      if (target.scrollTop + target.clientHeight === target.scrollHeight) {\n        handleScrollToBottom()\n      }\n    }\n\n    const lastInteractionSource = ref<EventSource>('')\n    const currentOptionComputed = computed(() => props.hoveredOption ?? null)\n    const updateCurrentOption = (option: SelectOption | null, source: EventSource) => {\n      emit('update:hoveredOption', option)\n      lastInteractionSource.value = source\n    }\n\n    const { getText, getGroupBy, getTrackBy, getDisabled } = useSelectableList(props)\n\n    const filteredOptions = computed(() => {\n      if (!props.search) { return props.options }\n\n      return props.options.filter((option: SelectOption) => {\n        const optionText = getText(option).toString().toUpperCase()\n        const search = props.search.toUpperCase()\n        return optionText.includes(search)\n      })\n    })\n\n    const optionGroups = computed(() => filteredOptions.value\n      .reduce((groups: Record<string, SelectOption[]>, option) => {\n        if (typeof option !== 'object' || !getGroupBy(option)) {\n          groups._noGroup.push(option)\n        } else {\n          const groupBy = getGroupBy(option)\n\n          if (!groups[groupBy]) { groups[groupBy] = [] }\n\n          groups[groupBy].push(option)\n        }\n\n        return groups\n      }, { _noGroup: [] }))\n\n    const isValueExists = (value: SelectOption | null | undefined) => !!value || value === 0\n\n    const updateHoveredOption = (option?: SelectOption) => {\n      if (option === currentOptionComputed.value || (isValueExists(option) && getDisabled(option!))) { return }\n\n      updateCurrentOption(option ?? null, 'mouse')\n    }\n    const updateFocusedOption = (option?: SelectOption) => { updateCurrentOption(option ?? null, 'keyboard') }\n\n    const selectOption = (option: SelectOption) => !getDisabled(option) && emit('select-option', option)\n\n    const groupedOptions = computed(() => Object.values(optionGroups.value).flat())\n    const currentOptions = computed(() =>\n      filteredOptions.value.some((el) => getGroupBy(el)) ? groupedOptions.value : filteredOptions.value)\n\n    const currentOptionIndex = computed(() => currentOptions.value.findIndex((option) => {\n      return isValueExists(currentOptionComputed.value) && getTrackBy(option) === getTrackBy(currentOptionComputed.value!)\n    }))\n\n    const selectOptionProps = computed(() => ({\n      ...pick(props, ['getSelectedState', 'color']),\n      getText,\n      getTrackBy,\n    }))\n\n    const isSlotContentPassed = useSlotPassed()\n\n    const findNextActiveOption = (startSearchIndex: number, reversedSearch = false) => {\n      const searchBase = [...(currentOptions.value || [])]\n      const searchBaseOrdered = reversedSearch ? searchBase.reverse() : searchBase\n      const startIndex = reversedSearch ? (startSearchIndex * -1) - 1 : startSearchIndex\n\n      return searchBaseOrdered.slice(startIndex).find((option) => !getDisabled(option))\n    }\n\n    // public\n    const focusPreviousOption = () => {\n      if (!isValueExists(currentOptionComputed.value)) {\n        updateFocusedOption(findNextActiveOption(0, true))\n        return\n      }\n\n      const previousOptionIndex = currentOptionIndex.value - 1\n      const previousOption = currentOptions.value[previousOptionIndex]\n      const previousOptionCheck = isValueExists(previousOption) && !(previousOptionIndex === 0 && getDisabled(previousOption))\n      if (previousOptionCheck) {\n        updateFocusedOption(findNextActiveOption(currentOptionIndex.value - 1, true))\n      } else {\n        emit('no-previous-option-to-hover')\n      }\n    }\n\n    const focusNextOption = () => {\n      if (!isValueExists(currentOptionComputed.value)) {\n        focusFirstOption()\n        return\n      }\n\n      const nextOptionIndex = currentOptionIndex.value + 1\n      const nextOption = currentOptions.value[nextOptionIndex]\n      const nextOptionCheck = isValueExists(nextOption) && !(nextOptionIndex === currentOptions.value.length - 1 && getDisabled(nextOption))\n      if (nextOptionCheck) {\n        updateFocusedOption(findNextActiveOption(currentOptionIndex.value + 1))\n      }\n    }\n\n    const focusFirstOption = () => updateFocusedOption(findNextActiveOption(0))\n\n    const { itemRefs, setItemRef } = useObjectRefs()\n    const virtualScrollerRef = shallowRef<Array<InstanceType<typeof VaVirtualScroller>>>()\n    const scrollToOption = (option: SelectOption) => {\n      if (!isValueExists(option)) { return }\n\n      const element = itemRefs.value[getTrackBy(option)]\n      if (element) { scrollToElement(extractHTMLElement(element)) }\n\n      if (props.virtualScroller) { virtualScrollerRef.value?.[0].virtualScrollTo(currentOptionIndex.value) }\n    }\n\n    const publicMethods = {\n      focusPreviousOption,\n      focusNextOption,\n      focusFirstOption,\n      scrollToOption,\n      focus,\n    }\n\n    watch(() => props.hoveredOption, (newOption: SelectOption | null) => {\n      (!lastInteractionSource.value || lastInteractionSource.value === 'keyboard') && (isValueExists(newOption)) && scrollToOption(newOption!)\n    })\n\n    return {\n      root,\n      virtualScrollerRef,\n\n      rootHeight,\n      optionGroups,\n      filteredOptions,\n      selectOptionProps,\n      isSlotContentPassed,\n      currentOptionComputed,\n\n      onScroll,\n      getTrackBy,\n      setItemRef,\n      getDisabled,\n      selectOption,\n      updateHoveredOption,\n      handleScrollToBottom,\n\n      ...publicMethods,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../../styles/resources\";\n@import \"variables\";\n\n.va-select-option-list {\n  overflow: auto;\n  width: var(--va-select-option-list-width);\n  max-height: var(--va-select-option-list-max-height);\n  display: flex;\n  flex-direction: column;\n  font-family: var(--va-font-family);\n\n  &--empty {\n    padding: var(--va-select-option-list-empty-block-padding);\n  }\n\n  @include va-scroll(var(--va-primary));\n\n  &__group-name {\n    padding: var(--va-select-option-list-group-name-padding);\n    font-size: var(--va-select-option-list-group-name-font-size);\n    color: var(--va-select-option-list-group-name-color);\n    font-weight: var(--va-select-option-list-group-name-font-weight);\n    text-transform: var(--va-select-option-list-group-name-text-transform);\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}