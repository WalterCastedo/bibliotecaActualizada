{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { j as cloneDeep_1 } from \"../../../vendor.js\";\nimport { getCurrentInstance, ref } from \"vue\";\nimport { g as getComponentsDefaultConfig } from \"../component-config/config/default.js\";\nimport { g as getIconDefaultConfig } from \"../icon/config/default.js\";\nimport { g as getColorDefaultConfig } from \"../color/config/default.js\";\nimport { g as getI18nConfigDefaults } from \"../i18n/config/default.js\";\nimport { g as getBreakpointDefaultConfig } from \"../breakpoint/index.js\";\nimport { g as getGlobalProperty } from \"../vue-plugin/utils/global-properties.js\";\nimport { i as inject } from \"../current-app.js\";\nimport { m as mergeDeep } from \"../../utils/merge-deep.js\";\nconst GLOBAL_CONFIG = Symbol(\"GLOBAL_CONFIG\");\n\nconst createGlobalConfig = () => {\n  const globalConfig = ref({\n    colors: getColorDefaultConfig(),\n    icons: getIconDefaultConfig(),\n    components: getComponentsDefaultConfig(),\n    breakpoint: getBreakpointDefaultConfig(),\n    i18n: getI18nConfigDefaults()\n  });\n\n  const getGlobalConfig = () => globalConfig.value;\n\n  const setGlobalConfig = updater => {\n    const config = typeof updater === \"function\" ? updater(globalConfig.value) : updater;\n    globalConfig.value = cloneDeep_1(config);\n  };\n\n  const mergeGlobalConfig = updater => {\n    const config = typeof updater === \"function\" ? updater(globalConfig.value) : updater;\n    globalConfig.value = mergeDeep(cloneDeep_1(globalConfig.value), config);\n  };\n\n  return {\n    getGlobalConfig,\n    setGlobalConfig,\n    mergeGlobalConfig,\n    globalConfig\n  };\n};\n\nfunction useGlobalConfigSafe() {\n  return inject(GLOBAL_CONFIG);\n}\n\nfunction useGlobalConfig() {\n  const injected = inject(GLOBAL_CONFIG);\n\n  if (!injected) {\n    const vm = getCurrentInstance();\n\n    if (!vm) {\n      throw new Error(\"useGlobalConfig must be called in setup function\");\n    }\n\n    const config = getGlobalProperty(vm.appContext, \"$vaConfig\");\n\n    if (!config) {\n      throw new Error(\"Vuestic GlobalConfigPlugin is not registered\");\n    }\n\n    return config;\n  }\n\n  return injected;\n}\n\nexport { GLOBAL_CONFIG as G, useGlobalConfig as a, createGlobalConfig as c, useGlobalConfigSafe as u };","map":{"version":3,"mappings":";;;;;;;;;;;AAYa,sBAAgBA,OAAO,eAAP,CAAhB;;AAEN,MAAMC,qBAAqB,MAAM;EACtC,MAAMC,eAAeC,IAAkB;IACrCC,QAAQC,uBAD6B;IAErCC,OAAOC,sBAF8B;IAGrCC,YAAYC,4BAHyB;IAIrCC,YAAYC,4BAJyB;IAKrCC,MAAMC;EAL+B,CAAlB,CAArB;;EAQM,wBAAkB,MAAoBX,aAAaY,KAAnD;;EACA,wBAAmBC,OAAD,IAA+D;IACrF,MAAMC,SAAS,OAAOD,OAAP,KAAmB,UAAnB,GAAgCA,QAAQb,aAAaY,KAArB,CAAhC,GAA8DC,OAA7E;IACab,qBAAQe,YAAUD,MAAVC,CAAR;EAAwB,CAFjC;;EAKA,0BAAqBF,OAAD,IAA6E;IACrG,MAAMC,SAAS,OAAOD,OAAP,KAAmB,UAAnB,GAAgCA,QAAQb,aAAaY,KAArB,CAAhC,GAA8DC,OAA7E;IACAb,aAAaY,KAAb,GAAqBI,UAAUD,YAAUf,aAAaY,KAAvBG,CAAV,EAAyCD,MAAzC,CAArB;EAAoE,CAFhE;;EAKC;IACLG,eADK;IAELC,eAFK;IAGLC,iBAHK;IAILnB;EAJK;AAMT,CA1BO;;AA6BgC;EACrC,OAAOoB,OAA6BC,aAA7B,CAAP;AACF;;AAEyD;EACjD,iBAAWD,OAA6BC,aAA7B,CAAX;;EAEN,IAAI,CAACC,QAAL,EAAe;IAEb,MAAMC,KAAKC,oBAAX;;IACA,IAAI,CAACD,EAAL,EAAS;MAAQ,UAAIE,KAAJ,CAAU,kDAAV;IAA8D;;IAE/E,MAAMX,SAASY,kBAAkBH,GAAGI,UAArB,EAAiC,WAAjC,CAAf;;IAEA,IAAI,CAACb,MAAL,EAAa;MACL,UAAIW,KAAJ,CAAU,8CAAV;IACR;;IAEO;EACT;;EAEO;AACT","names":["Symbol","createGlobalConfig","globalConfig","ref","colors","getColorDefaultConfig","icons","getIconDefaultConfig","components","getComponentsDefaultConfig","breakpoint","getBreakpointDefaultConfig","i18n","getI18nConfigDefaults","value","updater","config","cloneDeep","mergeDeep","getGlobalConfig","setGlobalConfig","mergeGlobalConfig","inject","GLOBAL_CONFIG","injected","vm","getCurrentInstance","Error","getGlobalProperty","appContext"],"sources":["../../../../../src/services/global-config/global-config.ts"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep.js'\nimport { ref, getCurrentInstance } from 'vue'\nimport { GlobalConfig, GlobalConfigUpdater, PartialGlobalConfig, ProvidedGlobalConfig } from './types'\nimport { getComponentsDefaultConfig } from '../component-config'\nimport { getIconDefaultConfig } from '../icon'\nimport { getColorDefaultConfig } from '../color'\nimport { getI18nConfigDefaults } from '../i18n'\nimport { getBreakpointDefaultConfig } from '../breakpoint'\nimport { getGlobalProperty } from '../vue-plugin/utils'\nimport { inject } from '../current-app'\nimport { mergeDeep } from '../../utils/merge-deep'\n\nexport const GLOBAL_CONFIG = Symbol('GLOBAL_CONFIG')\n\nexport const createGlobalConfig = () => {\n  const globalConfig = ref<GlobalConfig>({\n    colors: getColorDefaultConfig(),\n    icons: getIconDefaultConfig(),\n    components: getComponentsDefaultConfig(),\n    breakpoint: getBreakpointDefaultConfig(),\n    i18n: getI18nConfigDefaults(),\n  })\n\n  const getGlobalConfig = (): GlobalConfig => globalConfig.value\n  const setGlobalConfig = (updater: GlobalConfig | GlobalConfigUpdater<GlobalConfig>) => {\n    const config = typeof updater === 'function' ? updater(globalConfig.value) : updater\n    globalConfig.value = cloneDeep(config)\n  }\n\n  const mergeGlobalConfig = (updater: PartialGlobalConfig | GlobalConfigUpdater<PartialGlobalConfig>) => {\n    const config = typeof updater === 'function' ? updater(globalConfig.value) : updater\n    globalConfig.value = mergeDeep(cloneDeep(globalConfig.value), config)\n  }\n\n  return {\n    getGlobalConfig,\n    setGlobalConfig,\n    mergeGlobalConfig,\n    globalConfig,\n  }\n}\n\n/** Use this function if you don't want to throw error if hook used outside setup function by useGlobalConfig */\nexport function useGlobalConfigSafe () {\n  return inject<ProvidedGlobalConfig>(GLOBAL_CONFIG)\n}\n\nexport function useGlobalConfig (): ProvidedGlobalConfig {\n  const injected = inject<ProvidedGlobalConfig>(GLOBAL_CONFIG)\n\n  if (!injected) {\n    // TODO: Hotfix, maybe deal with inject\n    const vm = getCurrentInstance()\n    if (!vm) { throw new Error('useGlobalConfig must be called in setup function') }\n\n    const config = getGlobalProperty(vm.appContext, '$vaConfig')\n\n    if (!config) {\n      throw new Error('Vuestic GlobalConfigPlugin is not registered')\n    }\n\n    return config\n  }\n\n  return injected\n}\n\nexport * from './types'\n"]},"metadata":{},"sourceType":"module"}