{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createVNode, render } from \"vue\";\nimport { a as getGlobal } from \"../../utils/ssr.js\";\nimport { V as VaToast } from \"./index.js\";\nconst GAP = 5;\nlet seed = 1;\ngetGlobal().vaToastInstances = [];\n\nconst getTranslateValue = (item, position) => {\n  if (item.el) {\n    const direction = position.includes(\"bottom\") ? -1 : 1;\n    return (item.el.offsetHeight + GAP) * direction;\n  }\n\n  return 0;\n};\n\nconst getNewTranslateValue = (transformY, redundantHeight, position) => {\n  const direction = position.includes(\"bottom\") ? -1 : 1;\n  return parseInt(transformY, 10) - (redundantHeight + GAP) * direction;\n};\n\nconst getNodeProps = vNode => {\n  var _a;\n\n  return ((_a = vNode.component) == null ? void 0 : _a.props) || {};\n};\n\nconst closeNotification = (targetInstance, destroyElementFn) => {\n  var _a;\n\n  if (!targetInstance) {\n    return;\n  }\n\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1;\n    return;\n  }\n\n  const targetInstanceIndex = getGlobal().vaToastInstances.findIndex(instance => instance === targetInstance);\n\n  if (targetInstanceIndex < 0) {\n    return;\n  }\n\n  const nodeProps = getNodeProps(targetInstance);\n  const {\n    offsetX: targetOffsetX,\n    offsetY: targetOffsetY,\n    position: targetPosition\n  } = nodeProps;\n  const redundantHeight = (_a = targetInstance.el) == null ? void 0 : _a.offsetHeight;\n  destroyElementFn();\n  getGlobal().vaToastInstances = getGlobal().vaToastInstances.reduce((acc, instance, index) => {\n    if (instance === targetInstance) {\n      return acc;\n    }\n\n    if (instance.component) {\n      const {\n        offsetX,\n        offsetY,\n        position\n      } = getNodeProps(instance);\n      const isNextInstance = index > targetInstanceIndex && targetOffsetX === offsetX && targetOffsetY === offsetY && targetPosition === position;\n\n      if (isNextInstance && instance.el && redundantHeight) {\n        const [_, transformY] = instance.el.style.transform.match(/[\\d-]+(?=px)/g);\n        const transformYNew = getNewTranslateValue(transformY, redundantHeight, position);\n        instance.el.style.transform = `translate(0, ${transformYNew}px)`;\n      }\n    }\n\n    return [...acc, instance];\n  }, []);\n\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1;\n  }\n};\n\nconst destroy = (el, node) => {\n  if (el) {\n    render(null, el);\n    el.remove();\n  }\n\n  el = null;\n};\n\nconst mount = (component, {\n  props,\n  children,\n  element,\n  appContext\n} = {}) => {\n  let el = element;\n  let vNode;\n\n  const onClose = () => {\n    closeNotification(vNode, () => destroy(el));\n\n    if (props == null ? void 0 : props.onClose) {\n      props.onClose();\n    }\n  };\n\n  vNode = createVNode(component, { ...props,\n    onClose\n  }, children);\n\n  if (appContext) {\n    vNode.appContext = appContext;\n  }\n\n  if (el) {\n    render(vNode, el);\n  } else if (typeof document !== \"undefined\") {\n    render(vNode, el = document.createElement(\"div\"));\n  }\n\n  return {\n    vNode,\n    el\n  };\n};\n\nconst closeAllNotifications = appContext => {\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1;\n    return;\n  }\n\n  getGlobal().vaToastInstances.forEach(instance => {\n    if (appContext && instance.appContext !== appContext) {\n      return;\n    }\n\n    getNodeProps(instance).onClose();\n  });\n};\n\nconst closeById = id => {\n  const targetInstance = getGlobal().vaToastInstances.find(instance => {\n    var _a;\n\n    return ((_a = instance.el) == null ? void 0 : _a.id) === id;\n  });\n\n  if (targetInstance) {\n    const nodeProps = getNodeProps(targetInstance);\n    nodeProps.onClose();\n  }\n};\n\nconst getToastOptions = options => {\n  if (typeof options === \"string\") {\n    return {\n      message: options\n    };\n  }\n\n  return options;\n};\n\nconst createToastInstance = (customProps, appContext) => {\n  const {\n    vNode,\n    el\n  } = mount(VaToast, {\n    appContext,\n    props: getToastOptions(customProps)\n  });\n  const nodeProps = getNodeProps(vNode);\n\n  if (el && vNode.el && nodeProps) {\n    document.body.appendChild(el.childNodes[0]);\n    const {\n      offsetX,\n      offsetY,\n      position\n    } = nodeProps;\n    vNode.el.style.display = \"flex\";\n    vNode.el.id = \"notification_\" + seed;\n    let transformY = 0;\n    getGlobal().vaToastInstances.filter(item => {\n      const {\n        offsetX: itemOffsetX,\n        offsetY: itemOffsetY,\n        position: itemPosition\n      } = getNodeProps(item);\n      return itemOffsetX === offsetX && itemOffsetY === offsetY && position === itemPosition;\n    }).forEach(item => {\n      transformY += getTranslateValue(item, position);\n    });\n    vNode.el.style.transform = `translate(0, ${transformY}px)`;\n    seed += 1;\n    getGlobal().vaToastInstances.push(vNode);\n    return vNode.el.id;\n  }\n\n  return null;\n};\n\nexport { closeById as a, closeAllNotifications as b, createToastInstance as c };","map":{"version":3,"mappings":"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","names":["GAP","seed","getGlobal","vaToastInstances","getTranslateValue","item","position","el","direction","includes","offsetHeight","getNewTranslateValue","transformY","redundantHeight","parseInt","getNodeProps","vNode","component","props","closeNotification","targetInstance","destroyElementFn","length","findIndex","instance","targetInstanceIndex","offsetX","targetOffsetX","offsetY","targetOffsetY","targetPosition","nodeProps","reduce","acc","index","isNextInstance","_","style","transform","match","transformYNew","destroy","node","render","remove","mount","children","element","appContext","onClose","createVNode","document","createElement","forEach","id","find","getToastOptions","options","message","customProps","VaToast","body","appendChild","childNodes","display","filter","itemOffsetX","itemOffsetY","itemPosition","push"],"sources":["../../../../../src/components/va-toast/toast.ts"],"sourcesContent":["import { VNode, createVNode, render, AppContext } from 'vue'\n\nimport { getGlobal } from '../../utils/ssr'\nimport type { ToastOptions } from './types'\n\nimport { VaToast } from './index'\n\nconst GAP = 5\nlet seed = 1\n\ndeclare global {\n  interface Window {\n    vaToastInstances: VNode[]\n  }\n}\n\ngetGlobal().vaToastInstances = []\n\ntype OptionKeys = keyof ToastOptions;\n\nexport type VaToastId = string\n\nconst getTranslateValue = (item: VNode, position: string) => {\n  if (item.el) {\n    const direction = position.includes('bottom') ? -1 : 1\n    return (item.el.offsetHeight + GAP) * direction\n  }\n  return 0\n}\n\nconst getNewTranslateValue = (transformY: string, redundantHeight: number, position: string) => {\n  const direction = position.includes('bottom') ? -1 : 1\n  return parseInt(transformY, 10) - (redundantHeight + GAP) * direction\n}\n\nconst getNodeProps = (vNode: VNode): Record<OptionKeys, any> => {\n  return (vNode.component?.props as Record<OptionKeys, any>) || {}\n}\n\nconst closeNotification = (targetInstance: VNode | null, destroyElementFn: () => void) => {\n  if (!targetInstance) { return }\n\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1\n    return\n  }\n\n  const targetInstanceIndex = getGlobal().vaToastInstances.findIndex((instance) => instance === targetInstance)\n\n  if (targetInstanceIndex < 0) { return }\n\n  const nodeProps = getNodeProps(targetInstance)\n\n  const {\n    offsetX: targetOffsetX,\n    offsetY: targetOffsetY,\n    position: targetPosition,\n  } = nodeProps\n  const redundantHeight: number | null = targetInstance.el?.offsetHeight\n\n  destroyElementFn()\n\n  getGlobal().vaToastInstances = getGlobal().vaToastInstances.reduce((acc: any[], instance, index) => {\n    if (instance === targetInstance) {\n      return acc\n    }\n    if (instance.component) {\n      const { offsetX, offsetY, position } = getNodeProps(instance)\n      const isNextInstance = index > targetInstanceIndex && targetOffsetX === offsetX && targetOffsetY === offsetY && targetPosition === position\n      if (isNextInstance && instance.el && redundantHeight) {\n        const [_, transformY] = instance.el.style.transform.match(/[\\d-]+(?=px)/g)\n        const transformYNew = getNewTranslateValue(transformY, redundantHeight, position)\n        instance.el.style.transform = `translate(0, ${transformYNew}px)`\n      }\n    }\n    return [...acc, instance]\n  }, [])\n\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1\n  }\n}\n\nconst destroy = (el: HTMLElement | null | undefined, node: VNode | null) => {\n  if (el) {\n    render(null, el)\n    el.remove()\n  }\n  el = null\n  node = null\n}\n\nconst mount = (component: any, {\n  props,\n  children,\n  element,\n  appContext,\n}: { props?: { [key: string]: any }; children?: any; element?: HTMLElement; appContext?: AppContext } = {}): { vNode: VNode; el?: HTMLElement } => {\n  let el: HTMLElement | null | undefined = element\n\n  // eslint-disable-next-line prefer-const\n  let vNode: VNode | null\n\n  const onClose = () => {\n    closeNotification(vNode, () => destroy(el, vNode))\n\n    if (props?.onClose) {\n      props.onClose()\n    }\n  }\n\n  vNode = createVNode(component, { ...props, onClose }, children)\n\n  if (appContext) {\n    vNode.appContext = appContext\n  }\n\n  if (el) {\n    render(vNode, el)\n  } else if (typeof document !== 'undefined') {\n    render(vNode, el = document.createElement('div'))\n  }\n\n  return { vNode, el }\n}\n\nexport const closeAllNotifications = (appContext?: AppContext) => {\n  if (!getGlobal().vaToastInstances.length) {\n    seed = 1\n    return\n  }\n  getGlobal().vaToastInstances.forEach(instance => {\n    if (appContext && instance.appContext !== appContext) { return }\n    getNodeProps(instance).onClose()\n  })\n}\n\nexport const closeById = (id: string) => {\n  const targetInstance = getGlobal().vaToastInstances.find(instance => instance.el?.id === id)\n\n  if (targetInstance) {\n    const nodeProps = getNodeProps(targetInstance)\n    nodeProps.onClose()\n  }\n}\n\nconst getToastOptions = (options: string | ToastOptions): any => {\n  if (typeof options === 'string') {\n    return {\n      message: options,\n    }\n  }\n  return options\n}\n\nexport const createToastInstance = (customProps: ToastOptions | string, appContext?: AppContext): VaToastId | null => {\n  const { vNode, el } = mount(VaToast, { appContext, props: getToastOptions(customProps) })\n\n  const nodeProps = getNodeProps(vNode)\n\n  if (el && vNode.el && nodeProps) {\n    document.body.appendChild(el.childNodes[0])\n    const { offsetX, offsetY, position } = nodeProps\n\n    vNode.el.style.display = 'flex'\n    vNode.el.id = 'notification_' + seed\n\n    let transformY = 0\n    getGlobal().vaToastInstances.filter(item => {\n      const {\n        offsetX: itemOffsetX,\n        offsetY: itemOffsetY,\n        position: itemPosition,\n      } = getNodeProps(item)\n\n      return itemOffsetX === offsetX && itemOffsetY === offsetY && position === itemPosition\n    }).forEach((item) => {\n      transformY += getTranslateValue(item, position)\n    })\n    vNode.el.style.transform = `translate(0, ${transformY}px)`\n\n    seed += 1\n\n    getGlobal().vaToastInstances.push(vNode)\n\n    return vNode.el.id as VaToastId\n  }\n\n  return null\n}\n\nexport type { ToastOptions as NotificationOptions } from './types'\n"]},"metadata":{},"sourceType":"module"}