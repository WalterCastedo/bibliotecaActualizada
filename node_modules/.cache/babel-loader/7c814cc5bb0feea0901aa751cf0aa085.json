{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { getCurrentInstance, computed } from \"vue\";\nimport { u as useColors } from \"../../../composables/useColors.js\";\n\nconst useButtonTextColor = (textColorComputed, colorComputed, isPressed, isHovered) => {\n  const instance = getCurrentInstance();\n\n  if (!instance) {\n    throw new Error(\"`useButtonTextColor` hook must be used only inside of setup function!\");\n  }\n\n  const props = instance.props;\n  const {\n    getColor,\n    colorToRgba,\n    getStateMaskGradientBackground\n  } = useColors();\n  const plainColorStyles = computed(() => ({\n    background: \"transparent\",\n    color: \"transparent\",\n    \"-webkit-background-clip\": \"text\",\n    \"background-clip\": \"text\",\n    opacity: getPlainTextOpacity.value\n  }));\n\n  const getStateColor = (maskColor, stateOpacity, stateBehavior) => {\n    const maskStateColor = getColor(maskColor);\n    const res = stateBehavior === \"opacity\" ? {\n      color: colorToRgba(textColorComputed.value, stateOpacity)\n    } : {\n      background: getStateMaskGradientBackground(colorComputed.value, maskStateColor, stateOpacity)\n    };\n    return { ...plainColorStyles.value,\n      ...res\n    };\n  };\n\n  const hoverTextColorComputed = computed(() => {\n    return getStateColor(props.hoverMaskColor, props.hoverOpacity, props.hoverBehavior);\n  });\n  const pressedTextColorComputed = computed(() => {\n    return getStateColor(props.pressedMaskColor, props.pressedOpacity, props.pressedBehavior);\n  });\n  const getPlainTextOpacity = computed(() => {\n    if (props.disabled) {\n      return void 0;\n    }\n\n    if (props.textOpacity === 1 || isHovered.value && !isPressed.value) {\n      return 1;\n    }\n\n    return isPressed.value ? 0.9 : props.textOpacity;\n  });\n  return computed(() => {\n    const defaultColorStyles = {\n      color: textColorComputed.value,\n      background: \"transparent\"\n    };\n    props.plain && Object.assign(defaultColorStyles, plainColorStyles.value, {\n      background: textColorComputed.value\n    });\n\n    if (!props.plain) {\n      return defaultColorStyles;\n    }\n\n    if (isPressed.value) {\n      return pressedTextColorComputed.value;\n    }\n\n    if (isHovered.value) {\n      return hoverTextColorComputed.value;\n    }\n\n    return defaultColorStyles;\n  });\n};\n\nexport { useButtonTextColor as u };","map":{"version":3,"mappings":";;;;AAmBO,MAAMA,qBAAyC,CACpDC,iBADoD,EAEpDC,aAFoD,EAGpDC,SAHoD,EAIpDC,SAJoD,KAKjD;EACH,MAAMC,WAAWC,oBAAjB;;EACA,IAAI,CAACD,QAAL,EAAe;IAAQ,UAAIE,KAAJ,CAAU,uEAAV;EAAmF;;EAE1G,MAAMC,QAAQH,SAASG,KAAvB;EAEA,MAAM;IAAEC,QAAF;IAAYC,WAAZ;IAAyBC;EAAzB,IAA4DC,WAAlE;EAEM,yBAAmBC,SAAS,OAAO;IACvCC,YAAY,aAD2B;IAEvCC,OAAO,aAFgC;IAGvC,2BAA2B,MAHY;IAIvC,mBAAmB,MAJoB;IAKvCC,SAASC,oBAAoBC;EALU,CAAP,CAAT,CAAnB;;EAQN,MAAMC,gBAAgB,CAACC,SAAD,EAAoBC,YAApB,EAA0CC,aAA1C,KAAoE;IAClF,uBAAiBb,SAASW,SAAT,CAAjB;IAEN,MAAMG,MAAMD,kBAAkB,SAAlB,GACR;MAAEP,OAAOL,YAAYT,kBAAkBiB,KAA9B,EAAqCG,YAArC;IAAT,CADQ,GAER;MAAEP,YAAYH,+BAA+BT,cAAcgB,KAA7C,EAAoDM,cAApD,EAAoEH,YAApE;IAAd,CAFJ;IAGA,OAAO,EAAE,GAAGI,iBAAiBP,KAAtB;MAA6B,GAAGK;IAAhC,CAAP;EAA2C,CAN7C;;EASM,+BAAyBV,SAAS,MAAM;IAC5C,OAAOM,cAAcX,MAAMkB,cAApB,EAAoClB,MAAMmB,YAA1C,EAAwDnB,MAAMoB,aAA9D,CAAP;EACD,CAF8B,CAAzB;EAIA,iCAA2Bf,SAAS,MAAM;IAC9C,OAAOM,cAAcX,MAAMqB,gBAApB,EAAsCrB,MAAMsB,cAA5C,EAA4DtB,MAAMuB,eAAlE,CAAP;EACD,CAFgC,CAA3B;EAIA,4BAAsBlB,SAAS,MAAM;IACzC,IAAIL,MAAMwB,QAAV,EAAoB;MAAS;IAAU;;IACvC,IAAIxB,MAAMyB,WAAN,KAAsB,CAAtB,IAA4B7B,UAAUc,KAAV,IAAmB,CAACf,UAAUe,KAA9D,EAAsE;MAAS;IAAE;;IAC1E,iBAAUA,KAAV,GAAkB,GAAlB,GAAwBV,MAAMyB,WAA9B;EACR,CAJ2B,CAAtB;EAMN,OAAOpB,SAAS,MAAM;IACpB,MAAMqB,qBAAqB;MACzBnB,OAAOd,kBAAkBiB,KADA;MAEzBJ,YAAY;IAFa,CAA3B;IAKMN,eAAS2B,OAAOC,MAAP,CAAcF,kBAAd,EAAkCT,iBAAiBP,KAAnD,EAA0D;MAAEJ,YAAYb,kBAAkBiB;IAAhC,CAA1D,CAAT;;IAEF,KAACV,MAAM6B,KAAP,EAAc;MAAS;IAAmB;;IAC9C,IAAIlC,UAAUe,KAAd,EAAqB;MAAE,OAAOoB,yBAAyBpB,KAAhC;IAAsC;;IAC7D,IAAId,UAAUc,KAAd,EAAqB;MAAE,OAAOqB,uBAAuBrB,KAA9B;IAAoC;;IACpD;EACR,CAZM,CAAP;AAaF,CAzDO","names":["useButtonTextColor","textColorComputed","colorComputed","isPressed","isHovered","instance","getCurrentInstance","Error","props","getColor","colorToRgba","getStateMaskGradientBackground","useColors","computed","background","color","opacity","getPlainTextOpacity","value","getStateColor","maskColor","stateOpacity","stateBehavior","res","maskStateColor","plainColorStyles","hoverMaskColor","hoverOpacity","hoverBehavior","pressedMaskColor","pressedOpacity","pressedBehavior","disabled","textOpacity","defaultColorStyles","Object","assign","plain","pressedTextColorComputed","hoverTextColorComputed"],"sources":["../../../../../../src/components/va-button/hooks/useButtonTextColor.ts"],"sourcesContent":["import { computed, Ref, ComputedRef, getCurrentInstance } from 'vue'\n\nimport { useColors } from '../../../composables'\n\nimport { ButtonPropsTypes } from '../types'\n\ntype UseButtonTextColor = (\n  textColorComputed: Ref<string>,\n  colorComputed: Ref<string>,\n  isPressed: Ref<boolean>,\n  isHovered: Ref<boolean>,\n) => ComputedRef<{\n  color: string\n  background?: string\n  opacity?: number\n  'background-clip'?: 'text',\n  '-webkit-background-clip'?: 'text',\n}>\n\nexport const useButtonTextColor: UseButtonTextColor = (\n  textColorComputed,\n  colorComputed,\n  isPressed,\n  isHovered,\n) => {\n  const instance = getCurrentInstance()\n  if (!instance) { throw new Error('`useButtonTextColor` hook must be used only inside of setup function!') }\n\n  const props = instance.props as Required<ButtonPropsTypes>\n\n  const { getColor, colorToRgba, getStateMaskGradientBackground } = useColors()\n\n  const plainColorStyles = computed(() => ({\n    background: 'transparent',\n    color: 'transparent',\n    '-webkit-background-clip': 'text',\n    'background-clip': 'text',\n    opacity: getPlainTextOpacity.value,\n  }))\n\n  const getStateColor = (maskColor: string, stateOpacity: number, stateBehavior: string) => {\n    const maskStateColor = getColor(maskColor)\n\n    const res = stateBehavior === 'opacity'\n      ? { color: colorToRgba(textColorComputed.value, stateOpacity) }\n      : { background: getStateMaskGradientBackground(colorComputed.value, maskStateColor, stateOpacity) }\n    return { ...plainColorStyles.value, ...res }\n  }\n\n  const hoverTextColorComputed = computed(() => {\n    return getStateColor(props.hoverMaskColor, props.hoverOpacity, props.hoverBehavior)\n  })\n\n  const pressedTextColorComputed = computed(() => {\n    return getStateColor(props.pressedMaskColor, props.pressedOpacity, props.pressedBehavior)\n  })\n\n  const getPlainTextOpacity = computed(() => {\n    if (props.disabled) { return undefined }\n    if (props.textOpacity === 1 || (isHovered.value && !isPressed.value)) { return 1 }\n    return isPressed.value ? 0.9 : props.textOpacity\n  })\n\n  return computed(() => {\n    const defaultColorStyles = {\n      color: textColorComputed.value,\n      background: 'transparent',\n    }\n\n    props.plain && Object.assign(defaultColorStyles, plainColorStyles.value, { background: textColorComputed.value })\n\n    if (!props.plain) { return defaultColorStyles }\n    if (isPressed.value) { return pressedTextColorComputed.value }\n    if (isHovered.value) { return hoverTextColorComputed.value }\n    return defaultColorStyles\n  })\n}\n"]},"metadata":{},"sourceType":"module"}