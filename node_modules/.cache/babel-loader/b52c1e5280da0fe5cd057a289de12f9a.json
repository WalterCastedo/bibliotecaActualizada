{"ast":null,"code":"import { computed, toRef } from \"vue\";\nimport { u as useColors } from \"../../composables/useColors.js\";\nimport { u as useElementBackground } from \"../../composables/useElementBackground/useElementBackground.js\";\nimport { u as useTextColor } from \"../../composables/useTextColor.js\";\n\nconst useAlertStyles = props => {\n  const {\n    getColor,\n    getTextColor,\n    getBoxShadowColorFromBg\n  } = useColors();\n  const {\n    background\n  } = useElementBackground();\n  const isTransparentBackground = computed(() => Boolean(props.outline || props.border));\n  const {\n    textColorComputed\n  } = useTextColor(toRef(props, \"color\"), isTransparentBackground);\n  const colorComputed = computed(() => getColor(props.color));\n  const alertStyle = computed(() => {\n    let background2 = colorComputed.value;\n    let boxShadow = \"none\";\n\n    if (props.outline) {\n      background2 = \"transparent\";\n    }\n\n    if (props.border) {\n      background2 = \"var(--va-background-primary)\";\n      boxShadow = \"var(--va-alert-box-shadow)\";\n    }\n\n    return {\n      border: props.outline ? `1px solid ${colorComputed.value}` : \"\",\n      padding: props.dense ? \"var(--va-alert-padding-y-dense) var(--va-alert-padding-x)\" : \"\",\n      backgroundColor: background2,\n      boxShadow\n    };\n  });\n  const contentStyle = computed(() => {\n    return {\n      alignItems: props.center ? \"center\" : \"\",\n      color: props.border || props.outline ? getColor(getTextColor(background.value), void 0, true) : textColorComputed.value\n    };\n  });\n  const titleStyle = computed(() => {\n    return {\n      color: textColorComputed.value\n    };\n  });\n  const borderStyle = computed(() => ({\n    backgroundColor: props.borderColor ? getColor(props.borderColor) : colorComputed.value\n  }));\n  return {\n    alertStyle,\n    contentStyle,\n    titleStyle,\n    borderStyle\n  };\n};\n\nexport { useAlertStyles as u };","map":{"version":3,"mappings":";;;;;AAmBa,uBAAkBA,KAAD,IAA4B;EACxD,MAAM;IAAEC,QAAF;IAAYC,YAAZ;IAA0BC;EAA1B,IAAsDC,WAA5D;EACM;IAAEC;EAAF,IAAiBC,sBAAjB;EAEA,gCAA0BC,SAAS,MAAMC,QAAQR,MAAMS,OAAN,IAAiBT,MAAMU,MAA/B,CAAf,CAA1B;EACN,MAAM;IAAEC;EAAF,IAAwBC,aAAaC,MAAMb,KAAN,EAAa,OAAb,CAAb,EAAoCc,uBAApC,CAA9B;EAEA,MAAMC,gBAAgBR,SAAS,MAAMN,SAASD,MAAMgB,KAAf,CAAf,CAAtB;EAEM,mBAAaT,SAAS,MAAM;IAChC,IAAIU,cAAaF,cAAcG,KAA/B;IACA,IAAIC,YAAY,MAAhB;;IAEA,IAAInB,MAAMS,OAAV,EAAmB;MACJQ;IACf;;IAEA,IAAIjB,MAAMU,MAAV,EAAkB;MACHO;MACDE;IACd;;IAEO;MACLT,QAAQV,MAAMS,OAAN,GAAgB,aAAaM,cAAcG,OAA3C,GAAqD,EADxD;MAELE,SAASpB,MAAMqB,KAAN,GAAc,2DAAd,GAA4E,EAFhF;MAGLC,iBAAiBL,WAHZ;MAILE;IAJK;EAMR,CAnBkB,CAAb;EAqBA,qBAAeZ,SAAS,MAAM;IAC3B;MACLgB,YAAYvB,MAAMwB,MAAN,GAAe,QAAf,GAA0B,EADjC;MAELR,OAAQhB,MAAMU,MAAN,IAAgBV,MAAMS,OAAtB,GAAiCR,SAASC,aAAaG,WAAWa,KAAxB,CAAT,EAAyC,MAAzC,EAAoD,IAApD,CAAjC,GAA6FP,kBAAkBO;IAFlH;EAIR,CALoB,CAAf;EAOA,mBAAaX,SAAS,MAAM;IACzB;MAAES,OAAOL,kBAAkBO;IAA3B;EACR,CAFkB,CAAb;EAIA,oBAAcX,SAAS,OAAO;IAClCe,iBAAiBtB,MAAMyB,WAAN,GACbxB,SAASD,MAAMyB,WAAf,CADa,GAEbV,cAAcG;EAHgB,CAAP,CAAT,CAAd;EAMC;IACLQ,UADK;IAELC,YAFK;IAGLC,UAHK;IAILC;EAJK;AAMT,CArDa","names":["props","getColor","getTextColor","getBoxShadowColorFromBg","useColors","background","useElementBackground","computed","Boolean","outline","border","textColorComputed","useTextColor","toRef","isTransparentBackground","colorComputed","color","background2","value","boxShadow","padding","dense","backgroundColor","alignItems","center","borderColor","alertStyle","contentStyle","titleStyle","borderStyle"],"sources":["../../../../../src/components/va-alert/useAlertStyles.ts"],"sourcesContent":["import { computed, toRef } from 'vue'\nimport { useElementBackground, useColors, useTextColor } from '../../composables'\n\ntype AlertStyleProps = {\n  modelValue: boolean,\n  color: string,\n  textColor: string,\n  title: string,\n  description: string,\n  icon: string,\n  closeText: string,\n  closeable: boolean,\n  dense: boolean,\n  outline: boolean,\n  center: boolean,\n  borderColor: string,\n  border: string,\n}\n\nexport const useAlertStyles = (props: AlertStyleProps) => {\n  const { getColor, getTextColor, getBoxShadowColorFromBg } = useColors()\n  const { background } = useElementBackground()\n\n  const isTransparentBackground = computed(() => Boolean(props.outline || props.border))\n  const { textColorComputed } = useTextColor(toRef(props, 'color'), isTransparentBackground)\n\n  const colorComputed = computed(() => getColor(props.color))\n\n  const alertStyle = computed(() => {\n    let background = colorComputed.value\n    let boxShadow = 'none'\n\n    if (props.outline) {\n      background = 'transparent'\n    }\n\n    if (props.border) {\n      background = 'var(--va-background-primary)'\n      boxShadow = 'var(--va-alert-box-shadow)'\n    }\n\n    return {\n      border: props.outline ? `1px solid ${colorComputed.value}` : '',\n      padding: props.dense ? 'var(--va-alert-padding-y-dense) var(--va-alert-padding-x)' : '',\n      backgroundColor: background,\n      boxShadow,\n    }\n  })\n\n  const contentStyle = computed(() => {\n    return {\n      alignItems: props.center ? 'center' : '',\n      color: (props.border || props.outline) ? getColor(getTextColor(background.value), undefined, true) : textColorComputed.value,\n    }\n  })\n\n  const titleStyle = computed(() => {\n    return { color: textColorComputed.value }\n  })\n\n  const borderStyle = computed(() => ({\n    backgroundColor: props.borderColor\n      ? getColor(props.borderColor)\n      : colorComputed.value,\n  }))\n\n  return {\n    alertStyle,\n    contentStyle,\n    titleStyle,\n    borderStyle,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}