{"ast":null,"code":"import { e as extractHTMLElement } from \"./useHTMLElement.js\";\nimport { computed } from \"vue\";\n\nconst useHTMLElementSelector = key => {\n  return computed(() => {\n    if (typeof (key == null ? void 0 : key.value) === \"string\") {\n      return document.querySelector(key.value);\n    }\n\n    return extractHTMLElement(key == null ? void 0 : key.value);\n  });\n};\n\nexport { useHTMLElementSelector as u };","map":{"version":3,"mappings":";;;AAKa,+BAA0BA,GAAD,IAAwE;EAC5G,OAAOC,SAAS,MAAM;IAChB,YAAOD,2BAAKE,KAAZ,MAAsB,QAAtB,EAAgC;MAC3B,gBAASC,aAAT,CAAuBH,IAAIE,KAA3B;IACT;;IAEO,0BAAmBF,2BAAKE,KAAxB;EACR,CANM,CAAP;AAOF,CARa","names":["key","computed","value","querySelector"],"sources":["../../../../src/composables/useHTMLElementSelector.ts"],"sourcesContent":["import { extractHTMLElement } from './useHTMLElement'\nimport { computed, DefineComponent, Ref, unref } from 'vue'\n\nexport type MaybeHTMLElementOrSelector = string | HTMLElement | DefineComponent | undefined\n\nexport const useHTMLElementSelector = (key: Ref<MaybeHTMLElementOrSelector | undefined>): Ref<HTMLElement> => {\n  return computed(() => {\n    if (typeof key?.value === 'string') {\n      return document.querySelector(key.value) as HTMLElement\n    }\n\n    return extractHTMLElement(key?.value)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}