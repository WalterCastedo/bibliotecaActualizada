{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { onMounted, onBeforeUnmount } from \"vue\";\nlet observer;\nlet callbacks = [];\n\nconst createMutationObserver = () => {\n  if (!observer) {\n    const runCallbacks = mutations => {\n      const cache = /* @__PURE__ */new Map();\n\n      for (let i = 0; i < callbacks.length; i++) {\n        if (mutations.some(m => m.target.contains(callbacks[i].el.value || null))) {\n          callbacks[i].cb(cache);\n        }\n      }\n    };\n\n    observer = new MutationObserver(mutations => {\n      runCallbacks(mutations);\n    });\n    observer.observe(document.documentElement, {\n      attributeFilter: [\"style\", \"class\"],\n      subtree: true,\n      attributes: true\n    });\n  }\n};\n\nconst destroyMutationObserver = () => {\n  if (!observer) {\n    return;\n  }\n\n  if (callbacks.length > 0) {\n    return;\n  }\n\n  observer.disconnect();\n  observer = null;\n};\n\nconst useDomChangesObserver = (cb, el) => {\n  onMounted(() => {\n    createMutationObserver();\n    callbacks.push({\n      cb,\n      el\n    });\n  });\n  onBeforeUnmount(() => {\n    callbacks = callbacks.filter(c => c.cb !== cb);\n    destroyMutationObserver();\n  });\n};\n\nexport { useDomChangesObserver as u };","map":{"version":3,"mappings":";;AAIA,IAAIA,QAAJ;AACA,IAAIC,YAAuB,EAA3B;;AAEA,MAAMC,yBAAyB,MAAM;EACnC,IAAI,CAACF,QAAL,EAAe;IACP,qBAAgBG,SAAD,IAAiC;MAC9C,iCAAYC,GAAZ;;MAEN,SAASC,IAAI,CAAb,EAAgBA,IAAIJ,UAAUK,MAA9B,EAAsCD,GAAtC,EAA2C;QACzC,IAAIF,UAAUI,IAAV,CAAgBC,CAAD,IAAOA,EAAEC,MAAF,CAASC,QAAT,CAAkBT,UAAUI,CAAV,EAAaM,EAAb,CAAgBC,KAAhB,IAAyB,IAA3C,CAAtB,CAAJ,EAA6E;UACjEX,aAAGY,EAAH,CAAMC,KAAN;QACZ;MACF;IAAA,CAPI;;IAUKd,eAAIe,gBAAJ,CAAsBZ,SAAD,IAAe;MAC7Ca,aAAab,SAAb;IACD,CAFU;IAGFH,iBAAQiB,SAASC,eAAjB,EAAkC;MACzCC,iBAAiB,CAAC,OAAD,EAAU,OAAV,CADwB;MAEzCC,SAAS,IAFgC;MAGzCC,YAAY;IAH6B,CAAlC;EAKX;AACF,CArBA;;AAuBA,MAAMC,0BAA0B,MAAM;EACpC,IAAI,CAACtB,QAAL,EAAe;IAAE;EAAO;;EAEpB,cAAUM,MAAV,GAAmB,CAAnB,EAAsB;IAAE;EAAO;;EACnCN,SAASuB,UAAT;EACWvB;AACb,CANA;;AASa,8BAAwB,CAAOa,EAAP,EAAgCF,EAAhC,KAAqE;EACxGa,UAAU,MAAM;IACStB;IACvBD,UAAUwB,IAAV,CAAe;MAAEZ,EAAF;MAAMF;IAAN,CAAf;EACD,CAHD;EAKAe,gBAAgB,MAAM;IACpBzB,YAAYA,UAAU0B,MAAV,CAAkBC,CAAD,IAAOA,EAAEf,EAAF,KAASA,EAAjC,CAAZ;IACwBS;EACzB,CAHD;AAIF,CAVa","names":["observer","callbacks","createMutationObserver","mutations","Map","i","length","some","m","target","contains","el","value","cb","cache","MutationObserver","runCallbacks","document","documentElement","attributeFilter","subtree","attributes","destroyMutationObserver","disconnect","onMounted","push","onBeforeUnmount","filter","c"],"sources":["../../../../../src/composables/useElementBackground/useDomChangesObserver.ts"],"sourcesContent":["import { onBeforeUnmount, onMounted, Ref } from 'vue'\n\ntype Handler<K = any, V = any> = { cb: ((cache: Map<K, V>) => void), el: Ref<HTMLElement | undefined> }\n\nlet observer: MutationObserver | null\nlet callbacks: Handler[] = []\n\nconst createMutationObserver = () => {\n  if (!observer) {\n    const runCallbacks = (mutations: MutationRecord[]) => {\n      const cache = new Map()\n\n      for (let i = 0; i < callbacks.length; i++) {\n        if (mutations.some((m) => m.target.contains(callbacks[i].el.value || null))) {\n          callbacks[i].cb(cache)\n        }\n      }\n    }\n\n    observer = new MutationObserver((mutations) => {\n      runCallbacks(mutations)\n    })\n    observer.observe(document.documentElement, {\n      attributeFilter: ['style', 'class'],\n      subtree: true,\n      attributes: true,\n    })\n  }\n}\n\nconst destroyMutationObserver = () => {\n  if (!observer) { return }\n\n  if (callbacks.length > 0) { return }\n  observer.disconnect()\n  observer = null\n}\n\n/** Creates on global watched for dom changes */\nexport const useDomChangesObserver = <K, V>(cb: Handler<K, V>['cb'], el: Ref<HTMLElement | undefined>) => {\n  onMounted(() => {\n    createMutationObserver()\n    callbacks.push({ cb, el })\n  })\n\n  onBeforeUnmount(() => {\n    callbacks = callbacks.filter((c) => c.cb !== cb)\n    destroyMutationObserver()\n  })\n}\n"]},"metadata":{},"sourceType":"module"}