{"ast":null,"code":"import { u as useDocument } from \"./useDocument.js\";\nimport { u as useWindow } from \"./useWindow.js\";\nconst FOCUSABLE_ELEMENTS_SELECTOR = \":where(a, button, input, textarea, select):not([disabled]), *[tabindex]\";\nlet trapInEl = null;\n\nconst useTrapFocus = () => {\n  const document = useDocument();\n  const window = useWindow();\n  let focusableElements = [];\n  let firstFocusableElement = null;\n  let lastFocusableElement = null;\n  let isFocusTrapped = false;\n\n  const focusFirstElement = () => {\n    firstFocusableElement == null ? void 0 : firstFocusableElement.focus();\n  };\n\n  const focusLastElement = () => {\n    lastFocusableElement == null ? void 0 : lastFocusableElement.focus();\n  };\n\n  const onKeydown = evt => {\n    var _a, _b;\n\n    const isTabPressed = evt.code === \"Tab\";\n    const isShiftPressed = evt.shiftKey;\n\n    if (!isTabPressed) {\n      return;\n    }\n\n    if (!isFocusTrapped) {\n      isFocusTrapped = true;\n      evt.preventDefault();\n      isShiftPressed ? focusLastElement() : focusFirstElement();\n      return;\n    }\n\n    if (((_a = document.value) == null ? void 0 : _a.activeElement) === lastFocusableElement && !isShiftPressed) {\n      evt.preventDefault();\n      focusFirstElement();\n      return;\n    }\n\n    if (((_b = document.value) == null ? void 0 : _b.activeElement) === firstFocusableElement && isShiftPressed) {\n      evt.preventDefault();\n      focusLastElement();\n    }\n  };\n\n  const trapFocusIn = el => {\n    trapInEl = el;\n    freeFocus();\n    trapFocus();\n  };\n\n  const trapFocus = () => {\n    var _a;\n\n    if (!trapInEl) {\n      return;\n    }\n\n    focusableElements = Array.from(trapInEl.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR));\n    firstFocusableElement = focusableElements[0];\n    lastFocusableElement = focusableElements[focusableElements.length - 1];\n    (_a = window.value) == null ? void 0 : _a.addEventListener(\"keydown\", onKeydown);\n  };\n\n  const freeFocus = () => {\n    var _a;\n\n    focusableElements = [];\n    firstFocusableElement = null;\n    lastFocusableElement = null;\n    isFocusTrapped = false;\n    (_a = window.value) == null ? void 0 : _a.removeEventListener(\"keydown\", onKeydown);\n  };\n\n  return {\n    trapFocus,\n    freeFocus,\n    trapFocusIn\n  };\n};\n\nexport { useTrapFocus as u };","map":{"version":3,"mappings":";;AAIA,MAAMA,8BAA8B,yEAApC;AACA,IAAIC,WAA+B,IAAnC;;AAEO,MAAMC,eAAe,MAAM;EAChC,MAAMC,WAAWC,aAAjB;EACA,MAAMC,SAASC,WAAf;EAEA,IAAIC,oBAAmC,EAAvC;EACA,IAAIC,wBAA4C,IAAhD;EACA,IAAIC,uBAA2C,IAA/C;EACA,IAAIC,iBAAiB,KAArB;;EAEA,MAAMC,oBAAoB,MAAM;IAC9BH,+DAAuBI,KAAvB;EAA6B,CAD/B;;EAGA,MAAMC,mBAAmB,MAAM;IAC7BJ,6DAAsBG,KAAtB;EAA4B,CAD9B;;EAIM,kBAAaE,GAAD,IAAwB;;;IAClC,qBAAeA,IAAIC,IAAJ,KAAa,KAA5B;IACN,MAAMC,iBAAiBF,IAAIG,QAA3B;;IAEA,IAAI,CAACC,YAAL,EAAmB;MACjB;IACF;;IAEA,IAAI,CAACR,cAAL,EAAqB;MACFA;MAEjBI,IAAIK,cAAJ;MACiBH,sCAAqBL,mBAArB;MAEjB;IACF;;IAEA,IAAI,gBAASS,KAAT,wBAAgBC,aAAhB,MAAkCZ,oBAAlC,IAA0D,CAACO,cAA/D,EAA+E;MAC7EF,IAAIK,cAAJ;MACkBR;MAClB;IACF;;IAEA,IAAI,gBAASS,KAAT,wBAAgBC,aAAhB,MAAkCb,qBAAlC,IAA2DQ,cAA/D,EAA+E;MAC7EF,IAAIK,cAAJ;MACiBN;IACnB;EAAA,CA1BI;;EA6BA,oBAAeS,EAAD,IAAqB;IAC5BrB;IAEDsB;IACAC;EAAA,CAJN;;EAON,MAAMA,YAAY,MAAM;;;IACtB,IAAI,CAACvB,QAAL,EAAe;MACb;IACF;;IAEAM,oBAAoBkB,MAAMC,IAAN,CAAWzB,SAAS0B,gBAAT,CAA0B3B,2BAA1B,CAAX,CAApB;IACAQ,wBAAwBD,kBAAkB,CAAlB,CAAxB;IACuBE,yCAAkBF,kBAAkBqB,MAAlB,GAA2B,CAA7C;IAEhB,0CAAOC,gBAAP,CAAwB,SAAxB,EAAmCC,SAAnC;EAA4C,CATrD;;EAWA,MAAMP,YAAY,MAAM;;;IACtBhB,oBAAoB,EAApB;IACwBC;IACDC;IACNC;IAEV,0CAAOqB,mBAAP,CAA2B,SAA3B,EAAsCD,SAAtC;EAA+C,CANxD;;EASO;IACLN,SADK;IAELD,SAFK;IAGLS;EAHK;AAKT,CA7EO","names":["FOCUSABLE_ELEMENTS_SELECTOR","trapInEl","useTrapFocus","document","useDocument","window","useWindow","focusableElements","firstFocusableElement","lastFocusableElement","isFocusTrapped","focusFirstElement","focus","focusLastElement","evt","code","isShiftPressed","shiftKey","isTabPressed","preventDefault","value","activeElement","el","freeFocus","trapFocus","Array","from","querySelectorAll","length","addEventListener","onKeydown","removeEventListener","trapFocusIn"],"sources":["../../../../src/composables/useTrapFocus.ts"],"sourcesContent":["import { useDocument } from './useDocument'\nimport { useWindow } from './useWindow'\n\nconst TAB_KEYCODE = 9\nconst FOCUSABLE_ELEMENTS_SELECTOR = ':where(a, button, input, textarea, select):not([disabled]), *[tabindex]'\nlet trapInEl: HTMLElement | null = null\n\nexport const useTrapFocus = () => {\n  const document = useDocument()\n  const window = useWindow()\n\n  let focusableElements: HTMLElement[] = []\n  let firstFocusableElement: HTMLElement | null = null\n  let lastFocusableElement: HTMLElement | null = null\n  let isFocusTrapped = false\n\n  const focusFirstElement = () => {\n    firstFocusableElement?.focus()\n  }\n  const focusLastElement = () => {\n    lastFocusableElement?.focus()\n  }\n\n  const onKeydown = (evt: KeyboardEvent) => {\n    const isTabPressed = evt.code === 'Tab'\n    const isShiftPressed = evt.shiftKey\n\n    if (!isTabPressed) {\n      return\n    }\n\n    if (!isFocusTrapped) {\n      isFocusTrapped = true\n\n      evt.preventDefault()\n      isShiftPressed ? focusLastElement() : focusFirstElement()\n\n      return\n    }\n\n    if (document.value?.activeElement === lastFocusableElement && !isShiftPressed) {\n      evt.preventDefault()\n      focusFirstElement()\n      return\n    }\n\n    if (document.value?.activeElement === firstFocusableElement && isShiftPressed) {\n      evt.preventDefault()\n      focusLastElement()\n    }\n  }\n\n  const trapFocusIn = (el: HTMLElement) => {\n    trapInEl = el\n\n    freeFocus()\n    trapFocus()\n  }\n\n  const trapFocus = () => {\n    if (!trapInEl) {\n      return\n    }\n\n    focusableElements = Array.from(trapInEl.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR))\n    firstFocusableElement = focusableElements[0]\n    lastFocusableElement = focusableElements[focusableElements.length - 1]\n\n    window.value?.addEventListener('keydown', onKeydown)\n  }\n  const freeFocus = () => {\n    focusableElements = []\n    firstFocusableElement = null\n    lastFocusableElement = null\n    isFocusTrapped = false\n\n    window.value?.removeEventListener('keydown', onKeydown)\n  }\n\n  return {\n    trapFocus,\n    freeFocus,\n    trapFocusIn,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}