{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { defineComponent, shallowRef, ref, computed, onMounted, watch, nextTick, openBlock, createElementBlock, mergeProps } from \"vue\";\nimport { p as pick_1 } from \"../../../../../vendor.js\";\nimport { u as useEmitProxy } from \"../../../../composables/useEmitProxy.js\";\nimport { u as useFormProps } from \"../../../../composables/useForm.js\";\nimport { u as useTextareaRowHeight } from \"./useTextareaRowHeight.js\";\nimport { _ as _export_sfc } from \"../../../../../plugin-vue_export-helper.js\";\n\nvar VaTextarea_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \".textarea{padding:0;border:0;font-family:var(--va-font-family)}\\n\")();\n\nconst positiveNumberValidator = val => {\n  if (val > 0 && (val | 0) === val) {\n    return true;\n  }\n\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`);\n};\n\nconst {\n  createEmits,\n  createListeners\n} = useEmitProxy([\"input\", \"change\", \"click\", \"update:modelValue\"]);\n\nconst _sfc_main = defineComponent({\n  name: \"VaTextarea\",\n  props: { ...useFormProps,\n    modelValue: {\n      type: [String, Number],\n      default: \"\"\n    },\n    placeholder: {\n      type: String\n    },\n    autosize: {\n      type: Boolean,\n      default: false\n    },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator\n    },\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator\n    }\n  },\n  emits: createEmits(),\n\n  setup(props, {\n    emit\n  }) {\n    const textarea = shallowRef();\n    const rowHeight = ref(-1);\n    const height = ref(-1);\n    const {\n      calculateRowHeight,\n      calculateHeight\n    } = useTextareaRowHeight(textarea);\n    const isResizable = computed(() => {\n      return Boolean((props.autosize || props.maxRows || props.minRows !== 1) && textarea.value);\n    });\n\n    const updateRowHeight = () => {\n      if (isResizable.value) {\n        rowHeight.value = calculateRowHeight();\n      }\n    };\n\n    const updateHeight = () => {\n      if (isResizable.value) {\n        height.value = calculateHeight();\n      }\n    };\n\n    onMounted(() => {\n      updateRowHeight();\n      updateHeight();\n    });\n    watch(() => props.modelValue, () => {\n      nextTick(updateHeight);\n    });\n    const computedStyle = computed(() => ({\n      minHeight: rowHeight.value * props.minRows + \"px\",\n      maxHeight: props.maxRows ? rowHeight.value * props.maxRows + \"px\" : void 0,\n      height: height.value + \"px\",\n      resize: isResizable.value ? void 0 : \"none\"\n    }));\n    const computedProps = computed(() => ({ ...pick_1(props, [\"disabled\", \"readonly\", \"placeholder\", \"ariaLabel\"])\n    }));\n\n    const focus = () => {\n      var _a;\n\n      (_a = textarea.value) == null ? void 0 : _a.focus();\n    };\n\n    const blur = () => {\n      var _a;\n\n      (_a = textarea.value) == null ? void 0 : _a.blur();\n    };\n\n    return {\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n      focus,\n      blur\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"value\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"textarea\", mergeProps({\n    ref: \"textarea\",\n    class: \"textarea\",\n    style: _ctx.computedStyle\n  }, { ..._ctx.computedProps,\n    ..._ctx.listeners\n  }, {\n    value: _ctx.modelValue\n  }), null, 16, _hoisted_1);\n}\n\nvar VaTextarea = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { VaTextarea as V };\nimport './VaTextarea.css';","map":{"version":3,"mappings":"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","names":["positiveNumberValidator","val","Error","createEmits","createListeners","useEmitProxy","_sfc_main","defineComponent","name","props","useFormProps","modelValue","type","String","Number","default","placeholder","autosize","Boolean","minRows","validator","maxRows","emits","setup","emit","textarea","shallowRef","ref","calculateRowHeight","calculateHeight","useTextareaRowHeight","computed","value","updateRowHeight","isResizable","rowHeight","updateHeight","height","onMounted","watch","nextTick","minHeight","maxHeight","resize","pick","focus","blur","computedStyle","listeners","computedProps","_createElementBlock","class","style","_ctx","_mergeProps","_hoisted_1"],"sources":["../../../../../../../src/components/va-input/components/VaTextarea/VaTextarea.vue"],"sourcesContent":["<template>\n  <textarea\n    ref=\"textarea\"\n    class=\"textarea\"\n    :style=\"computedStyle\"\n    v-bind=\"{ ...computedProps, ...listeners }\"\n    :value=\"modelValue\"\n  />\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, onMounted, ref, watch, nextTick, CSSProperties, shallowRef } from 'vue'\nimport pick from 'lodash/pick.js'\n\nimport { useFormProps, useEmitProxy } from '../../../../composables'\nimport { useTextareaRowHeight } from './useTextareaRowHeight'\n\nconst positiveNumberValidator = (val: number) => {\n  if (val > 0 && (val | 0) === val) {\n    return true\n  }\n  throw new Error(`\\`minRows|maxRows\\` must be a positive integer greater than 0, but ${val} is provided`)\n}\n\nconst { createEmits, createListeners } = useEmitProxy([\n  'input', 'change', 'click', 'update:modelValue',\n])\n\nexport default defineComponent({\n  name: 'VaTextarea',\n\n  props: {\n    ...useFormProps,\n    modelValue: { type: [String, Number], default: '' },\n    placeholder: { type: String },\n    autosize: { type: Boolean, default: false },\n    minRows: {\n      type: Number,\n      default: 1,\n      validator: positiveNumberValidator,\n    },\n    maxRows: {\n      type: Number,\n      validator: positiveNumberValidator,\n    },\n  },\n\n  emits: createEmits(),\n\n  setup (props, { emit }) {\n    const textarea = shallowRef<HTMLTextAreaElement>()\n\n    const rowHeight = ref(-1)\n    const height = ref(-1)\n    const { calculateRowHeight, calculateHeight } = useTextareaRowHeight(textarea)\n\n    const isResizable = computed(() => {\n      return Boolean((props.autosize || props.maxRows || props.minRows !== 1) && textarea.value)\n    })\n\n    const updateRowHeight = () => {\n      if (isResizable.value) {\n        rowHeight.value = calculateRowHeight()\n      }\n    }\n\n    const updateHeight = () => {\n      if (isResizable.value) {\n        height.value = calculateHeight()\n      }\n    }\n\n    onMounted(() => {\n      updateRowHeight()\n      updateHeight()\n    })\n\n    watch(() => props.modelValue, () => {\n      nextTick(updateHeight)\n    })\n\n    const computedStyle = computed(() => ({\n      minHeight: rowHeight.value * props.minRows + 'px',\n      maxHeight: props.maxRows ? (rowHeight.value * props.maxRows + 'px') : undefined,\n      height: height.value + 'px',\n      resize: isResizable.value ? undefined : 'none',\n    }) as CSSProperties)\n\n    const computedProps = computed(() => ({\n      ...pick(props, ['disabled', 'readonly', 'placeholder', 'ariaLabel']),\n    }))\n\n    const focus = () => {\n      textarea.value?.focus()\n    }\n\n    const blur = () => {\n      textarea.value?.blur()\n    }\n\n    return {\n      textarea,\n      computedStyle,\n      listeners: createListeners(emit),\n      computedProps,\n      focus,\n      blur,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n.textarea {\n  padding: 0;\n  border: 0;\n  font-family: var(--va-font-family);\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}