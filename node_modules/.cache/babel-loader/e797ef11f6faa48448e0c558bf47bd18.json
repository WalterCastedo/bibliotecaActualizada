{"ast":null,"code":"import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createBlock, createCommentVNode, createTextVNode, toDisplayString, withDirectives, createVNode, vShow } from \"vue\";\nimport { u as useBem } from \"../../../../composables/useBem.js\";\nimport { a as useColorProps, u as useColors } from \"../../../../composables/useColors.js\";\nimport { V as VaIcon } from \"../../../va-icon/index.js\";\nimport { _ as _export_sfc } from \"../../../../../plugin-vue_export-helper.js\";\n\nvar VaSelectOption_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \":root{--va-select-option-list-option-cursor: pointer;--va-select-option-list-option-display: flex;--va-select-option-list-option-align-items: center;--va-select-option-list-option-padding: .375rem .75rem;--va-select-option-list-option-min-height: 2.25rem;--va-select-option-list-option-word-break: break-word;--va-select-option-list-option-icon-margin-right: .5rem;--va-select-option-list-option-selected-icon-margin-left: auto;--va-select-option-list-option-selected-icon-font-size: .8rem;--va-select-option-list-option-disabled-opacity: .7}.va-select-option{min-height:var(--va-select-option-list-option-min-height);padding:var(--va-select-option-list-option-padding);display:var(--va-select-option-list-option-display);align-items:var(--va-select-option-list-option-align-items);word-break:var(--va-select-option-list-option-word-break);cursor:var(--va-select-option-list-option-cursor)}.va-select-option__icon{margin-right:var(--va-select-option-list-option-icon-margin-right)}.va-select-option__selected-icon{margin-left:var(--va-select-option-list-option-selected-icon-margin-left);font-size:var(--va-select-option-list-option-selected-icon-font-size)}\\n\")();\n\nconst _sfc_main = defineComponent({\n  name: \"VaSelectOption\",\n  components: {\n    VaIcon\n  },\n  props: { ...useColorProps,\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    option: {\n      type: [Number, String, Object],\n      default: () => ({})\n    },\n    getText: {\n      type: Function,\n      required: true\n    },\n    getTrackBy: {\n      type: Function,\n      required: true\n    },\n    currentOption: {\n      type: [String, Number, Object],\n      default: null\n    },\n    getSelectedState: {\n      type: Function,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const {\n      getColor,\n      getHoverColor\n    } = useColors();\n    const optionIcon = computed(() => typeof props.option === \"object\" ? props.option.icon : void 0);\n    const optionIconColor = computed(() => getColor(props.color));\n    const optionText = computed(() => props.getText(props.option));\n    const isSelected = computed(() => props.getSelectedState(props.option));\n    const isFocused = computed(() => {\n      if (!props.currentOption && props.currentOption !== 0) {\n        return false;\n      }\n\n      if (typeof props.option === \"string\") {\n        return props.option === props.currentOption;\n      }\n\n      if (!props.getTrackBy) {\n        return false;\n      }\n\n      return props.getTrackBy(props.currentOption) === props.getTrackBy(props.option);\n    });\n    const optionClass = useBem(\"va-select-option\", () => ({\n      selected: isSelected.value\n    }));\n    const optionStyle = computed(() => ({\n      color: isSelected.value ? getColor(props.color) : \"inherit\",\n      backgroundColor: isFocused.value ? getHoverColor(getColor(props.color)) : \"transparent\",\n      cursor: props.disabled ? \"default\" : void 0,\n      opacity: props.disabled ? \"var(--va-select-option-list-option-disabled-opacity)\" : void 0\n    }));\n    return {\n      getColor,\n      isFocused,\n      optionIcon,\n      isSelected,\n      optionText,\n      optionStyle,\n      optionClass,\n      optionIconColor\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-selected\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_icon = resolveComponent(\"va-icon\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    role: \"option\",\n    class: normalizeClass([\"va-select-option\", _ctx.optionClass]),\n    style: normalizeStyle(_ctx.optionStyle),\n    \"aria-selected\": _ctx.isSelected\n  }, [_ctx.optionIcon ? (openBlock(), createBlock(_component_va_icon, {\n    key: 0,\n    size: \"small\",\n    class: \"va-select-option__icon\",\n    name: _ctx.optionIcon\n  }, null, 8, [\"name\"])) : createCommentVNode(\"\", true), createTextVNode(\" \" + toDisplayString(_ctx.optionText) + \" \", 1), withDirectives(createVNode(_component_va_icon, {\n    class: \"va-select-option__selected-icon\",\n    size: \"small\",\n    name: \"va-check\",\n    color: _ctx.optionIconColor\n  }, null, 8, [\"color\"]), [[vShow, _ctx.isSelected]])], 14, _hoisted_1);\n}\n\nvar _VaSelectOption = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaSelectOption as _ };\nimport './VaSelectOption.css';","map":{"version":3,"mappings":";;;;;;;;AAgCA,MAAKA,YAAaC,gBAAa;EAC7BC,MAAM,gBADuB;EAG7BC,YAAY;IAAEC;EAAF,CAHiB;EAK7BC,OAAO,EACL,GAAGC,aADE;IAELC,UAAU;MAAEC,MAAMC,OAAR;MAAiBC,SAAS;IAA1B,CAFL;IAGLC,QAAQ;MAAEH,MAAM,CAACI,MAAD,EAASC,MAAT,EAAiBC,MAAjB,CAAR;MAAgEJ,SAAS,OAAO,EAAP;IAAzE,CAHH;IAILK,SAAS;MAAEP,MAAMQ,QAAR;MAAoEC,UAAU;IAA9E,CAJJ;IAKLC,YAAY;MAAEV,MAAMQ,QAAR;MAAoEC,UAAU;IAA9E,CALP;IAMLE,eAAe;MAAEX,MAAM,CAACK,MAAD,EAASD,MAAT,EAAiBE,MAAjB,CAAR;MAAuEJ,SAAS;IAAhF,CANV;IAOLU,kBAAkB;MAAEZ,MAAMQ,QAAR;MAAqEC,UAAU;IAA/E;EAPb,CALsB;;EAe7BI,MAAOhB,KAAP,EAAc;IACN;MAAEiB,QAAF;MAAYC;IAAZ,IAA8BC,WAA9B;IAEA,mBAAaC,SAAS,MAAM,OAAOpB,MAAMM,MAAb,KAAwB,QAAxB,GAAoCN,MAAMM,MAAN,CAAae,IAAjD,GAAmE,MAAlF,CAAb;IACN,MAAMC,kBAAkBF,SAAS,MAAMH,SAASjB,MAAMuB,KAAf,CAAf,CAAxB;IAEA,MAAMC,aAAaJ,SAAS,MAAMpB,MAAMU,OAAN,CAAcV,MAAMM,MAApB,CAAf,CAAnB;IAEA,MAAMmB,aAAaL,SAAS,MAAMpB,MAAMe,gBAAN,CAAuBf,MAAMM,MAA7B,CAAf,CAAnB;IACM,kBAAYc,SAAS,MAAM;MAC/B,IAAI,CAACpB,MAAMc,aAAP,IAAwBd,MAAMc,aAAN,KAAwB,CAApD,EAAuD;QAAS;MAAM;;MAClE,WAAOd,MAAMM,MAAb,KAAwB,QAAxB,EAAkC;QAAS,aAAMA,MAAN,KAAiBN,MAAMc,aAAvB;MAAqC;;MAEhF,KAACd,MAAMa,UAAP,EAAmB;QAAS;MAAM;;MAC/B,aAAMA,UAAN,CAAiBb,MAAMc,aAAvB,MAA0Cd,MAAMa,UAAN,CAAiBb,MAAMM,MAAvB,CAA1C;IACR,CANiB,CAAZ;IAQA,oBAAcoB,OAAO,kBAAP,EAA2B,OAAO;MACpDC,UAAUF,WAAWG;IAD+B,CAAP,CAA3B,CAAd;IAIA,oBAAcR,SAAS,OAAO;MAClCG,OAAOE,WAAWG,KAAX,GAAmBX,SAASjB,MAAMuB,KAAf,CAAnB,GAA2C,SADhB;MAElCM,iBAAiBC,UAAUF,KAAV,GAAkBV,cAAcD,SAASjB,MAAMuB,KAAf,CAAd,CAAlB,GAAyD,aAFxC;MAGlCQ,QAAQ/B,MAAME,QAAN,GAAiB,SAAjB,GAA6B,MAHH;MAIlC8B,SAAShC,MAAME,QAAN,GAAiB,sDAAjB,GAA0E;IAJjD,CAAP,CAAT,CAAd;IAOC;MACLe,QADK;MAELa,SAFK;MAGLG,UAHK;MAILR,UAJK;MAKLD,UALK;MAMLU,WANK;MAOLC,WAPK;MAQLb;IARK;EAUT;;AArD6B,CAAb,CAAlB;;;;;;;sBA/BEc,mBAqBM,KArBNA,EAqBM;IApBJC,MAAK,QAoBD;IAnBJC,OAAKC,eAAC,qBACEC,KAAWL,WADb,CAADI,CAmBD;IAjBHE,OAAKC,eAAEF,KAAWN,WAAbQ,CAiBF;IAhBH,iBAAeF;EAgBZ,CArBNJ,EAKkB,CAGRI,gCADRG,YAKEC,kBALFD,EAKE;IAAAE;IAHAC,MAAK,OAGL;IAFAR,OAAM,wBAEN;IADCzC,MAAM2C;EACP,CALFG,EAIS,IAJTA,EAIS,CAJTA,EAIS,QAJTA,CACQ,IAGCI,4BANO,EAMPC,gBACP,MACFC,gBAAGT,KAAUhB,UAAbyB,CADE,GACc,GAFP,EAGT,CAHS,CANO,EAedC;IAJAZ,OAAM,iCAIN;IAHAQ,MAAK,OAGL;IAFAjD,MAAK,UAEL;IADC0B,OAAOiB;EACR,GADQ,IACRW,EADQ,CACRA,EADQ,SACRA,GADQ,SAJAX,KAAUf,UAIV,EACRyB,CAfc,CALlBd,EAesB,EAftBA,EAesBgB,UAftBhB","names":["_sfc_main","defineComponent","name","components","VaIcon","props","useColorProps","disabled","type","Boolean","default","option","Number","String","Object","getText","Function","required","getTrackBy","currentOption","getSelectedState","setup","getColor","getHoverColor","useColors","computed","icon","optionIconColor","color","optionText","isSelected","useBem","selected","value","backgroundColor","isFocused","cursor","opacity","optionIcon","optionStyle","optionClass","_createElementBlock","role","class","_normalizeClass","_ctx","style","_normalizeStyle","_createBlock","_component_va_icon","key","size","_createCommentVNode","createTextVNode","_toDisplayString","_withDirectives","_createVNode","_hoisted_1"],"sources":["../../../../../../../src/components/va-select/components/VaSelectOption/VaSelectOption.vue"],"sourcesContent":["<template>\n  <div\n    role=\"option\"\n    class=\"va-select-option\"\n    :class=\"optionClass\"\n    :style=\"optionStyle\"\n    :aria-selected=\"isSelected\"\n  >\n    <va-icon\n      v-if=\"optionIcon\"\n      size=\"small\"\n      class=\"va-select-option__icon\"\n      :name=\"optionIcon\"\n    />\n    {{ optionText }}\n    <va-icon\n      v-show=\"isSelected\"\n      class=\"va-select-option__selected-icon\"\n      size=\"small\"\n      name=\"va-check\"\n      :color=\"optionIconColor\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, computed } from 'vue'\n\nimport { useColors, useColorProps, useBem, SelectableOption } from '../../../../composables'\n\nimport { VaIcon } from '../../../va-icon'\n\nexport default defineComponent({\n  name: 'VaSelectOption',\n\n  components: { VaIcon },\n\n  props: {\n    ...useColorProps,\n    disabled: { type: Boolean, default: false },\n    option: { type: [Number, String, Object] as PropType<SelectableOption>, default: () => ({}) },\n    getText: { type: Function as PropType<(option: SelectableOption) => string>, required: true },\n    getTrackBy: { type: Function as PropType<(option: SelectableOption) => number>, required: true },\n    currentOption: { type: [String, Number, Object] as PropType<SelectableOption | null>, default: null },\n    getSelectedState: { type: Function as PropType<(option: SelectableOption) => boolean>, required: true },\n  },\n\n  setup (props) {\n    const { getColor, getHoverColor } = useColors()\n\n    const optionIcon = computed(() => typeof props.option === 'object' ? (props.option.icon as string) : undefined)\n    const optionIconColor = computed(() => getColor(props.color))\n\n    const optionText = computed(() => props.getText(props.option))\n\n    const isSelected = computed(() => props.getSelectedState(props.option))\n    const isFocused = computed(() => {\n      if (!props.currentOption && props.currentOption !== 0) { return false }\n      if (typeof props.option === 'string') { return props.option === props.currentOption }\n\n      if (!props.getTrackBy) { return false }\n      return props.getTrackBy(props.currentOption) === props.getTrackBy(props.option)\n    })\n\n    const optionClass = useBem('va-select-option', () => ({\n      selected: isSelected.value,\n    }))\n\n    const optionStyle = computed(() => ({\n      color: isSelected.value ? getColor(props.color) : 'inherit',\n      backgroundColor: isFocused.value ? getHoverColor(getColor(props.color)) : 'transparent',\n      cursor: props.disabled ? 'default' : undefined,\n      opacity: props.disabled ? 'var(--va-select-option-list-option-disabled-opacity)' : undefined,\n    }))\n\n    return {\n      getColor,\n      isFocused,\n      optionIcon,\n      isSelected,\n      optionText,\n      optionStyle,\n      optionClass,\n      optionIconColor,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"variables\";\n\n.va-select-option {\n  min-height: var(--va-select-option-list-option-min-height);\n  padding: var(--va-select-option-list-option-padding);\n  display: var(--va-select-option-list-option-display);\n  align-items: var(--va-select-option-list-option-align-items);\n  word-break: var(--va-select-option-list-option-word-break);\n  cursor: var(--va-select-option-list-option-cursor);\n\n  &__icon {\n    margin-right: var(--va-select-option-list-option-icon-margin-right);\n  }\n\n  &__selected-icon {\n    margin-left: var(--va-select-option-list-option-selected-icon-margin-left);\n    font-size: var(--va-select-option-list-option-selected-icon-font-size);\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}