{"ast":null,"code":"import { ref, watch, onMounted, onBeforeUnmount, unref } from \"vue\";\n\nconst useResizeObserver = (elementsList, cb) => {\n  const resizeObserver = ref();\n\n  const observeAll = elementsList2 => {\n    elementsList2.forEach(element => {\n      var _a;\n\n      const unrefedElement = unref(element);\n      unrefedElement && ((_a = resizeObserver.value) == null ? void 0 : _a.observe(unrefedElement));\n    });\n  };\n\n  watch(elementsList, newValue => {\n    var _a;\n\n    (_a = resizeObserver.value) == null ? void 0 : _a.disconnect();\n    observeAll(newValue);\n  });\n  onMounted(() => {\n    resizeObserver.value = new ResizeObserver(cb);\n    observeAll(elementsList);\n  });\n  onBeforeUnmount(() => {\n    var _a;\n\n    return (_a = resizeObserver.value) == null ? void 0 : _a.disconnect();\n  });\n  return resizeObserver;\n};\n\nexport { useResizeObserver as u };","map":{"version":3,"mappings":";;AAIa,0BAAoB,CAAoCA,YAApC,EAAiEC,EAAjE,KAAoF;EACnH,MAAMC,iBAAiBC,KAAvB;;EAEM,mBAAcC,aAAD,IAAiC;IACrCA,sBAASC,OAAD,IAA0B;;;MACvC,uBAAiBC,MAAMD,OAAN,CAAjB;MAEYE,wCAAeC,KAAf,wBAAsBC,OAAtB,CAA8BF,cAA9B;IACnB,CAJY;EAIZ,CALG;;EAQAG,oBAAeC,QAAD,IAAc;;;IAChC,qBAAeH,KAAf,wBAAsBI,UAAtB;IACAC,WAAWF,QAAX;EACD,CAHK;EAKNG,UAAU,MAAM;IACCZ,uBAAQ,IAAIa,cAAJ,CAAmBd,EAAnB,CAAR;IACfY,WAAWb,YAAX;EACD,CAHD;EAKAgB,gBAAgB;;;IAAM,4BAAeR,KAAf,wBAAsBI,UAAtB;EAAkC,CAAxD;EAEO;AACT,CAxBa","names":["elementsList","cb","resizeObserver","ref","elementsList2","element","unref","unrefedElement","value","observe","watch","newValue","disconnect","observeAll","onMounted","ResizeObserver","onBeforeUnmount"],"sources":["../../../../src/composables/useResizeObserver.ts"],"sourcesContent":["import { onBeforeUnmount, onMounted, ref, Ref, unref, watch } from 'vue'\n\ntype MaybeRef<T> = T | Ref<T>\n\nexport const useResizeObserver = <T extends HTMLElement | undefined>(elementsList: MaybeRef<T>[], cb: () => void) => {\n  const resizeObserver = ref<ResizeObserver>()\n\n  const observeAll = (elementsList: MaybeRef<T>[]) => {\n    elementsList.forEach((element: MaybeRef<T>) => {\n      const unrefedElement = unref(element)\n\n      unrefedElement && resizeObserver.value?.observe(unrefedElement)\n    })\n  }\n\n  watch(elementsList, (newValue) => {\n    resizeObserver.value?.disconnect()\n    observeAll(newValue)\n  })\n\n  onMounted(() => {\n    resizeObserver.value = new ResizeObserver(cb)\n    observeAll(elementsList)\n  })\n\n  onBeforeUnmount(() => resizeObserver.value?.disconnect())\n\n  return resizeObserver\n}\n"]},"metadata":{},"sourceType":"module"}