{"ast":null,"code":"import { shallowRef, computed, unref } from \"vue\";\n\nconst unrefElement = el => {\n  var _a;\n\n  const e = unref(el);\n  return (_a = e == null ? void 0 : e.$el) != null ? _a : e;\n};\n\nconst useElementRef = () => {\n  const el = shallowRef();\n  return computed({\n    get() {\n      return unrefElement(el);\n    },\n\n    set(node) {\n      el.value = node;\n    }\n\n  });\n};\n\nexport { useElementRef as u };","map":{"version":3,"mappings":";;AAKA,MAAMA,eAA8CC,EAA/B,IAA+D;;;EAC5E,UAAIC,MAAMD,EAAN,CAAJ;EACN,OAAQ,6BAA+BE,GAA/B,iBAAsCC,CAA9C;AACF,CAHA;;AAKO,MAAMC,gBAAgB,MAAoC;EAC/D,MAAMJ,KAAKK,YAAX;EAEA,OAAOC,SAAS;IACdC,MAAO;MACL,OAAOR,aAAaC,EAAb,CAAP;IACF,CAHc;;IAIdQ,IAAKC,IAAL,EAA4B;MAC1BT,GAAGU,KAAH,GAAWD,IAAX;IACF;;EANc,CAAT,CAAP;AAQF,CAXO","names":["unrefElement","el","unref","$el","e","useElementRef","shallowRef","computed","get","set","node","value"],"sources":["../../../../src/composables/useElementRef.ts"],"sourcesContent":["import { ComponentPublicInstance, computed, shallowRef, unref, Ref } from 'vue'\n\ntype Maybe<T> = T | undefined\nexport type MaybeElement<T extends Maybe<HTMLElement>> = T | ComponentPublicInstance\n\nconst unrefElement = <T extends Maybe<HTMLElement>>(el: Ref<MaybeElement<T>>): T => {\n  const e = unref(el)\n  return (e as ComponentPublicInstance)?.$el ?? e\n}\n\nexport const useElementRef = <T extends Maybe<HTMLElement>>() => {\n  const el = shallowRef<MaybeElement<T>>()\n\n  return computed({\n    get () {\n      return unrefElement(el) as T\n    },\n    set (node: MaybeElement<T>) {\n      el.value = node\n    },\n  }) as Ref<T>\n}\n"]},"metadata":{},"sourceType":"module"}