{"ast":null,"code":"import { computed, ref, watch } from \"vue\";\nimport { b as isClient } from \"../utils/ssr.js\";\n\nconst useClientOnly = cb => {\n  const isMounted = computed(isClient);\n  const result = ref(null);\n  watch(isMounted, () => {\n    if (isMounted.value) {\n      result.value = cb();\n    }\n  }, {\n    immediate: true\n  });\n  return result;\n};\n\nexport { useClientOnly as u };","map":{"version":3,"mappings":";;;AAIa,sBAAoBA,EAAJ,IAAoB;EACzC,kBAAYC,SAASC,QAAT,CAAZ;EACA,eAASC,IAAc,IAAd,CAAT;EAENC,MAAMC,SAAN,EAAiB,MAAM;IACrB,IAAIA,UAAUC,KAAd,EAAqB;MACnBC,OAAOD,KAAP,GAAeN,IAAf;IACF;EAAA,CAHF,EAIG;IAAEQ,WAAW;EAAb,CAJH;EAMO;AACT,CAXa","names":["cb","computed","isClient","ref","watch","isMounted","value","result","immediate"],"sources":["../../../../src/composables/useClientOnly.ts"],"sourcesContent":["import { computed, ref, UnwrapRef, watch } from 'vue'\nimport { isClient } from '../utils/ssr'\n\n/** Returns cb result only on client. Returns null on server  */\nexport const useClientOnly = <T>(cb: () => T) => {\n  const isMounted = computed(isClient)\n  const result = ref<T | null>(null)\n\n  watch(isMounted, () => {\n    if (isMounted.value) {\n      result.value = cb() as UnwrapRef<T>\n    }\n  }, { immediate: true })\n\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}