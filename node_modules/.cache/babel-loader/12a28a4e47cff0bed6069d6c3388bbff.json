{"ast":null,"code":"import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, withKeys, withModifiers, createElementVNode, renderSlot, normalizeProps, guardReactiveProps, createVNode, createCommentVNode, createTextVNode, toDisplayString, withDirectives, Fragment, renderList, createBlock, createSlots, withCtx, vShow } from \"vue\";\nimport { u as useBem } from \"../../../../composables/useBem.js\";\nimport { u as useStrictInject } from \"../../../../composables/useStrictInject.js\";\nimport { V as VaCheckbox } from \"../../../va-checkbox/index.js\";\nimport { V as VaIcon } from \"../../../va-icon/index.js\";\nimport { T as TreeViewKey } from \"../../types.js\";\nimport { _ as _export_sfc } from \"../../../../../plugin-vue_export-helper.js\";\n\nvar VaTreeNode_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => ':root{--va-tree-node-contents-gap: 8px;--va-tree-node-padding: 6px;--va-tree-node-border-radius: 4px;--va-tree-node-indent: 28px;--va-tree-node-content-item-flex: 0 0 var(--va-tree-node-indent);--va-tree-node-content-body-item-flex: 1;--va-tree-node-interactive-bg-opacity: .1;--va-tree-node-children-background: linear-gradient(#adb3b9 33%, rgba(255, 255, 255, 0) 0%) 15px/1px 3px repeat-y transparent}.va-tree-node-root{display:flex;padding:var(--va-tree-node-padding);position:relative}.va-tree-node-root:before{content:\"\";background-color:var(--va-primary);border-radius:var(--va-tree-node-border-radius);bottom:0;left:0;opacity:0;pointer-events:none;position:absolute;right:0;top:0}.va-tree-node-root:hover:before{opacity:var(--va-tree-node-interactive-bg-opacity)}.va-tree-node-content{display:flex;flex-wrap:nowrap;align-items:center;width:100%}.va-tree-node-content__item{flex:var(--va-tree-node-content-item-flex);min-width:var(--va-tree-node-indent);line-height:1}.va-tree-node-content__item--leaf{cursor:pointer}.va-tree-node-content__body{flex:var(--va-tree-node-content-body-item-flex);width:100%}.va-tree-node-content--indent{margin-left:var(--va-tree-node-indent)}.va-tree-node-children{display:none;background:var(--va-tree-node-children-background);padding-left:var(--va-tree-node-indent);width:100%}.va-tree-node-children--expanded{display:block}.va-tree-node__checkbox{--va-checkbox-input-padding: 0}.va-tree-node--disabled{cursor:default;opacity:.4;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.va-tree-node--disabled .va-tree-node-content__item--leaf{cursor:pointer;pointer-events:all}.va-tree-node:focus-visible>.va-tree-node-root{outline:2px solid var(--va-focus)!important;border-radius:2px}.va-tree-node:focus-visible>.va-tree-node-root:before{opacity:var(--va-tree-node-interactive-bg-opacity)}\\n')();\n\nconst INJECTION_ERROR_MESSAGE = \"The VaTreeNode component should be used in the context of VaTreeView component\";\n\nconst _sfc_main = defineComponent({\n  name: \"VaTreeNode\",\n  props: {\n    node: {\n      type: Object,\n      required: true\n    }\n  },\n  components: {\n    VaCheckbox,\n    VaIcon\n  },\n  setup: props => {\n    const {\n      iconBy,\n      selectable,\n      colorComputed,\n      getText,\n      getTrackBy,\n      toggleNode,\n      getNodeProperty,\n      toggleCheckbox\n    } = useStrictInject(TreeViewKey, INJECTION_ERROR_MESSAGE);\n    const labelComputed = computed(() => getText(props.node) || \"\");\n    const isExpandedComputed = computed(() => !!props.node.expanded);\n    const iconComputed = computed(() => getNodeProperty(props.node, iconBy));\n    const treeNodeClassComputed = useBem(\"va-tree-node\", () => ({\n      disabled: !!props.node.disabled\n    }));\n    const expandedClassComputed = useBem(\"va-tree-node-children\", () => ({\n      expanded: isExpandedComputed.value\n    }));\n    const indentClassComputed = useBem(\"va-tree-node-content\", () => ({\n      indent: props.node.hasChildren === false\n    }));\n    const tabIndexComputed = computed(() => props.node.disabled ? -1 : 0);\n\n    const handleToggleNode = (event, node) => {\n      var _a;\n\n      if (node.expanded) {\n        (_a = event.target) == null ? void 0 : _a.blur();\n      } else {\n        toggleNode(node);\n      }\n    };\n\n    return {\n      selectable,\n      getText,\n      getTrackBy,\n      toggleNode,\n      handleToggleNode,\n      toggleCheckbox,\n      iconComputed,\n      labelComputed,\n      colorComputed,\n      tabIndexComputed,\n      indentClassComputed,\n      isExpandedComputed,\n      expandedClassComputed,\n      treeNodeClassComputed\n    };\n  }\n});\n\nconst _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"tabindex\"];\nconst _hoisted_2 = {\n  key: 0,\n  class: \"va-tree-node-content__item va-tree-node-content__item--leaf\"\n};\nconst _hoisted_3 = {\n  key: 2,\n  class: \"va-tree-node-content__item\"\n};\nconst _hoisted_4 = {\n  class: \"va-tree-node-content__body\"\n};\nconst _hoisted_5 = [\"aria-hidden\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_icon = resolveComponent(\"va-icon\");\n\n  const _component_va_checkbox = resolveComponent(\"va-checkbox\");\n\n  const _component_va_tree_node = resolveComponent(\"va-tree-node\", true);\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"va-tree-node\", _ctx.treeNodeClassComputed]),\n    role: \"treeitem\",\n    \"aria-expanded\": _ctx.$props.node.expanded,\n    \"aria-disabled\": _ctx.$props.node.disabled,\n    \"aria-checked\": !!_ctx.$props.node.checked,\n    tabindex: _ctx.tabIndexComputed,\n    onKeydown: [_cache[3] || (_cache[3] = withKeys(withModifiers($event => _ctx.handleToggleNode($event, _ctx.$props.node), [\"stop\", \"prevent\"]), [\"right\"])), _cache[4] || (_cache[4] = withKeys(withModifiers($event => _ctx.handleToggleNode($event, _ctx.$props.node), [\"stop\", \"prevent\"]), [\"left\"]))]\n  }, [createElementVNode(\"div\", {\n    class: \"va-tree-node-root\",\n    onClick: _cache[2] || (_cache[2] = withModifiers($event => _ctx.toggleNode(_ctx.$props.node), [\"stop\"]))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass([\"va-tree-node-content\", _ctx.indentClassComputed])\n  }, [_ctx.$props.node.hasChildren ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [renderSlot(_ctx.$slots, \"icon-toggle\", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [createVNode(_component_va_icon, {\n    name: _ctx.isExpandedComputed ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\",\n    size: \"20px\"\n  }, null, 8, [\"name\"])])])) : createCommentVNode(\"\", true), _ctx.selectable ? (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: \"va-tree-node-content__item\",\n    onClick: _cache[1] || (_cache[1] = withModifiers(() => {}, [\"stop\"]))\n  }, [renderSlot(_ctx.$slots, \"checkbox\", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [createVNode(_component_va_checkbox, {\n    \"model-value\": _ctx.$props.node.checked,\n    color: _ctx.colorComputed,\n    indeterminate: \"\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = v => _ctx.toggleCheckbox(_ctx.$props.node, v)),\n    class: \"va-tree-node__checkbox\"\n  }, null, 8, [\"model-value\", \"color\"])])])) : createCommentVNode(\"\", true), _ctx.iconComputed ? (openBlock(), createElementBlock(\"div\", _hoisted_3, [renderSlot(_ctx.$slots, \"icon\", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [createVNode(_component_va_icon, {\n    name: _ctx.iconComputed,\n    size: \"small\"\n  }, null, 8, [\"name\"])])])) : createCommentVNode(\"\", true), createElementVNode(\"div\", _hoisted_4, [renderSlot(_ctx.$slots, \"content\", normalizeProps(guardReactiveProps(_ctx.$props.node)), () => [createTextVNode(toDisplayString(_ctx.labelComputed), 1)])])], 2)]), withDirectives(createElementVNode(\"div\", {\n    role: \"group\",\n    \"aria-hidden\": !_ctx.$props.node.expanded,\n    class: normalizeClass([\"va-tree-node-children\", _ctx.expandedClassComputed])\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.node.children, childNode => {\n    return openBlock(), createBlock(_component_va_tree_node, {\n      key: _ctx.getTrackBy(childNode),\n      node: childNode\n    }, createSlots({\n      _: 2\n    }, [renderList(_ctx.$slots, (_, name) => {\n      return {\n        name,\n        fn: withCtx(slotScope => [renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotScope)))])\n      };\n    })]), 1032, [\"node\"]);\n  }), 128))], 10, _hoisted_5), [[vShow, _ctx.$props.node.hasChildren]])], 42, _hoisted_1);\n}\n\nvar _VaTreeNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaTreeNode as _ };\nimport './VaTreeNode.css';","map":{"version":3,"mappings":"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","names":["INJECTION_ERROR_MESSAGE","_sfc_main","defineComponent","name","props","node","type","Object","required","components","VaCheckbox","VaIcon","setup","iconBy","selectable","colorComputed","getText","getTrackBy","toggleNode","getNodeProperty","toggleCheckbox","useStrictInject","TreeViewKey","labelComputed","computed","isExpandedComputed","expanded","iconComputed","useBem","disabled","value","indent","hasChildren","tabIndexComputed","event","target","blur","handleToggleNode","indentClassComputed","expandedClassComputed","treeNodeClassComputed","class","_createElementBlock","_normalizeClass","_ctx","role","checked","tabindex","onKeydown","_cache","$event","_withModifiers","_withKeys","_createElementVNode","onClick","_openBlock","_renderSlot","_normalizeProps","$props","_guardReactiveProps","_createVNode","_component_va_icon","size","key","$slots","_component_va_checkbox","color","indeterminate","v","_toDisplayString","_createTextVNode","_Fragment","_renderList","children","childNode","_createBlock","_component_va_tree_node","_createSlots","_","fn","slotScope","_withCtx","_hoisted_1"],"sources":["../../../../../../../src/components/va-tree-view/components/VaTreeNode/VaTreeNode.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-tree-node\"\n    :class=\"treeNodeClassComputed\"\n    role=\"treeitem\"\n    :aria-expanded=\"$props.node.expanded\"\n    :aria-disabled=\"$props.node.disabled\"\n    :aria-checked=\"!!$props.node.checked\"\n    :tabindex=\"tabIndexComputed\"\n    @keydown.right.stop.prevent=\"handleToggleNode($event, $props.node)\"\n    @keydown.left.stop.prevent=\"handleToggleNode($event, $props.node)\"\n  >\n    <div\n      class=\"va-tree-node-root\"\n      @click.stop=\"toggleNode($props.node)\"\n    >\n      <div class=\"va-tree-node-content\" :class=\"indentClassComputed\">\n        <div\n          v-if=\"$props.node.hasChildren\"\n          class=\"va-tree-node-content__item va-tree-node-content__item--leaf\"\n        >\n          <slot name=\"icon-toggle\" v-bind=\"$props.node\">\n            <va-icon\n              :name=\"isExpandedComputed ? 'keyboard_arrow_down' : 'keyboard_arrow_right'\"\n              size=\"20px\"\n            />\n          </slot>\n        </div>\n        <div\n          v-if=\"selectable\"\n          class=\"va-tree-node-content__item\"\n          @click.stop\n        >\n          <slot name=\"checkbox\" v-bind=\"$props.node\">\n            <va-checkbox\n              :model-value=\"$props.node.checked\"\n              :color=\"colorComputed\"\n              indeterminate\n              @update:model-value=\"(v) => toggleCheckbox($props.node, v)\"\n              class=\"va-tree-node__checkbox\"\n            />\n          </slot>\n        </div>\n        <div v-if=\"iconComputed\" class=\"va-tree-node-content__item\">\n          <slot name=\"icon\" v-bind=\"$props.node\">\n            <va-icon :name=\"iconComputed\" size=\"small\" />\n          </slot>\n        </div>\n        <div class=\"va-tree-node-content__body\">\n          <slot name=\"content\" v-bind=\"$props.node\">{{ labelComputed }}</slot>\n        </div>\n      </div>\n    </div>\n    <div\n      v-show=\"$props.node.hasChildren\"\n      role=\"group\"\n      :aria-hidden=\"!$props.node.expanded\"\n      class=\"va-tree-node-children\"\n      :class=\"expandedClassComputed\"\n    >\n      <va-tree-node\n        v-for=\"childNode in $props.node.children\"\n        :key=\"getTrackBy(childNode)\"\n        :node=\"childNode\"\n      >\n        <template v-for=\"(_, name) in $slots\" :key=\"name\" v-slot:[name]=\"slotScope\">\n          <slot :name=\"name\" v-bind=\"slotScope\" />\n        </template>\n      </va-tree-node>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, computed, PropType } from 'vue'\n\nimport { useBem, useStrictInject } from '../../../../composables'\n\nimport { VaIcon, VaCheckbox } from '../../../'\nimport { TreeViewKey, TreeNode } from '../../types'\n\nconst INJECTION_ERROR_MESSAGE = 'The VaTreeNode component should be used in the context of VaTreeView component'\n\nexport default defineComponent({\n  name: 'VaTreeNode',\n\n  props: {\n    node: {\n      type: Object as PropType<TreeNode>,\n      required: true,\n    },\n  },\n\n  components: { VaCheckbox, VaIcon },\n\n  setup: (props) => {\n    const {\n      iconBy,\n      selectable,\n      colorComputed,\n      getText,\n      getTrackBy,\n      toggleNode,\n      getNodeProperty,\n      toggleCheckbox,\n    } = useStrictInject(TreeViewKey, INJECTION_ERROR_MESSAGE)\n\n    const labelComputed = computed(() => getText(props.node) || '')\n    const isExpandedComputed = computed(() => !!props.node.expanded)\n    const iconComputed = computed(() => getNodeProperty(props.node, iconBy))\n\n    const treeNodeClassComputed = useBem('va-tree-node', () => ({\n      disabled: !!props.node.disabled,\n    }))\n\n    const expandedClassComputed = useBem('va-tree-node-children', () => ({\n      expanded: isExpandedComputed.value,\n    }))\n\n    const indentClassComputed = useBem('va-tree-node-content', () => ({\n      indent: props.node.hasChildren === false,\n    }))\n\n    const tabIndexComputed = computed(() => props.node.disabled ? -1 : 0)\n\n    const handleToggleNode = (event: Event, node: TreeNode) => {\n      if (node.expanded) {\n        (event.target as HTMLElement)?.blur()\n      } else {\n        toggleNode(node)\n      }\n    }\n\n    return {\n      selectable,\n\n      getText,\n      getTrackBy,\n      toggleNode,\n      handleToggleNode,\n      toggleCheckbox,\n\n      iconComputed,\n      labelComputed,\n      colorComputed,\n      tabIndexComputed,\n      indentClassComputed,\n      isExpandedComputed,\n      expandedClassComputed,\n      treeNodeClassComputed,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../../../styles/resources/index\";\n@import 'variables';\n\n.va-tree-node {\n  &-root {\n    display: flex;\n    padding: var(--va-tree-node-padding);\n    position: relative;\n\n    &::before {\n      content: \"\";\n      background-color: var(--va-primary);\n      border-radius: var(--va-tree-node-border-radius);\n      bottom: 0;\n      left: 0;\n      opacity: 0;\n      pointer-events: none;\n      position: absolute;\n      right: 0;\n      top: 0;\n    }\n\n    &:hover::before {\n      opacity: var(--va-tree-node-interactive-bg-opacity);\n    }\n  }\n\n  &-content {\n    display: flex;\n    flex-wrap: nowrap;\n    align-items: center;\n    width: 100%;\n\n    &__item {\n      flex: var(--va-tree-node-content-item-flex);\n      min-width: var(--va-tree-node-indent);\n      line-height: 1;\n\n      &--leaf {\n        cursor: pointer;\n      }\n    }\n\n    &__body {\n      flex: var(--va-tree-node-content-body-item-flex);\n      width: 100%;\n    }\n\n    &--indent {\n      margin-left: var(--va-tree-node-indent);\n    }\n  }\n\n  &-children {\n    display: none;\n    background: var(--va-tree-node-children-background);\n    padding-left: var(--va-tree-node-indent);\n    width: 100%;\n\n    &--expanded {\n      display: block;\n    }\n  }\n\n  &__checkbox {\n    --va-checkbox-input-padding: 0;\n  }\n\n  &--disabled {\n    @include va-disabled;\n\n    .va-tree-node-content__item--leaf {\n      cursor: pointer;\n      pointer-events: all;\n    }\n  }\n\n  &:focus-visible > .va-tree-node-root {\n    @include focus-outline;\n\n    &::before {\n      opacity: var(--va-tree-node-interactive-bg-opacity);\n    }\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}