{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Bar } from \"vue-chartjs\";\nimport { Chart as ChartJS, Title, ArcElement, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from \"chart.js\";\nimport { Doughnut } from \"vue-chartjs\";\nChartJS.register(Title, ArcElement, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\nexport const RUTA_SERVIDOR_ALUMNOS = process.env.VUE_APP_RUTA_API_ALUMNOS;\nexport const RUTA_SERVIDOR_LIBROS = process.env.VUE_APP_RUTA_API_LIBROS;\nexport default {\n  name: \"ListarEstadisticas\",\n  components: {\n    Bar,\n    Doughnut\n  },\n\n  data() {\n    return {\n      subsede: localStorage.getItem(\"idSubsede\"),\n      acceso: localStorage.getItem(\"acceso\"),\n      chartDataL: {\n        labels: [],\n        datasets: [{\n          backgroundColor: [\"#41B883\", \"#E46651\", \"#00D8FF\", \"#DD1B16\", \"#E412351\", \"#45D8FF\", \"#aa1B16\"],\n          data: []\n        }]\n      },\n      chartDataP: {\n        labels: [],\n        datasets: [{\n          backgroundColor: [\"#41B883\", \"#E46651\", \"#00D8FF\", \"#DD1B16\", \"#E412351\", \"#45D8FF\", \"#aa1B16\"],\n          data: []\n        }]\n      },\n      Materiales: [],\n      tipos: [],\n      totalesM: 0,\n      totalesD: 0,\n      totalesP: 0,\n      dataBar: {\n        labels: [],\n        datasets: [{\n          backgroundColor: \"#33C4FF\",\n          label: [],\n          data: []\n        }, {\n          backgroundColor: \"#54FF7E\",\n          label: [],\n          data: []\n        }]\n      },\n      dataBarTipos: {\n        labels: [],\n        datasets: [{\n          backgroundColor: [],\n          label: [\"Tipos de Material\"],\n          data: []\n        }]\n      },\n      chartOptions: {\n        maintainAspectRatio: true,\n        responsive: true,\n        plugins: {\n          chartAreaBorder: {\n            borderColor: \"red\",\n            borderWidth: 2,\n            borderDash: [5, 5],\n            borderDashOffset: 2\n          }\n        }\n      },\n      chartOptionsBar: {\n        indexAxis: \"x\",\n        maintainAspectRatio: true,\n        responsive: true\n      }\n    };\n  },\n\n  async mounted() {\n    await this.consultarMaterlales();\n    await this.consultarCantidad();\n  },\n\n  methods: {\n    consultarCantidad() {\n      fetch(RUTA_SERVIDOR_LIBROS + \"/cantidadMateriales/\" + this.subsede).then(respuesta => respuesta.json()).then(datosRespuesta => {\n        if (typeof datosRespuesta[0].success === \"undefined\") {\n          for (let index = 0; index < datosRespuesta[1].length; index++) {\n            if (datosRespuesta[1][index][0] == \"Fisioterapia y Kinesiología\") {\n              this.chartDataL.labels.push(\"Fis. & Kin.\" + \" : \" + datosRespuesta[1][index][1]);\n            } else if (datosRespuesta[1][index][0] == \"Bioquímica y farmacia\") {\n              this.chartDataL.labels.push(\"Bio. & Far.\" + \" : \" + datosRespuesta[1][index][1]);\n            } else if (datosRespuesta[1][index][0] == \"Ingeniería de sistemas\") {\n              this.chartDataL.labels.push(\"Ing. sistem.\" + \" : \" + datosRespuesta[1][index][1]);\n            } else {\n              this.chartDataL.labels.push(datosRespuesta[1][index][0] + \" : \" + datosRespuesta[1][index][1]);\n            }\n\n            this.chartDataL.datasets[0].data.push(datosRespuesta[1][index][1]);\n            this.totalesM += datosRespuesta[1][index][1];\n            this.totalesD += datosRespuesta[2][index][1];\n\n            if (datosRespuesta[1][index][0] == \"Fisioterapia y Kinesiología\") {\n              this.dataBar.labels.push(\"Fis. & Kin.\");\n            } else if (datosRespuesta[1][index][0] == \"Bioquímica y farmacia\") {\n              this.dataBar.labels.push(\"Bio. & Far.\");\n            } else if (datosRespuesta[1][index][0] == \"Ingeniería de sistemas\") {\n              this.dataBar.labels.push(\"Ing. sistem.\");\n            } else {\n              this.dataBar.labels.push(datosRespuesta[1][index][0]);\n            }\n\n            this.dataBar.datasets[0].data.push(datosRespuesta[1][index][1]);\n            this.dataBar.datasets[1].data.push(datosRespuesta[2][index][1]);\n          }\n\n          this.totalesP = 0;\n\n          for (let index = 0; index < datosRespuesta[0].length; index++) {\n            if (datosRespuesta[0][index][0] == \"Fisioterapia y Kinesiología\") {\n              this.chartDataP.labels.push(\"Fis. & Kin.\" + \" : \" + datosRespuesta[0][index][1]);\n            } else if (datosRespuesta[0][index][0] == \"Bioquímica y farmacia\") {\n              this.chartDataP.labels.push(\"Bio. & Far.\" + \" : \" + datosRespuesta[0][index][1]);\n            } else if (datosRespuesta[0][index][0] == \"Ingeniería de sistemas\") {\n              this.chartDataP.labels.push(\"Ing. sistem.\" + \" : \" + datosRespuesta[0][index][1]);\n            } else {\n              this.chartDataP.labels.push(datosRespuesta[0][index][0] + \" : \" + datosRespuesta[0][index][1]);\n            }\n\n            this.chartDataP.datasets[0].data.push(datosRespuesta[0][index][1]);\n            this.totalesP = this.totalesP + datosRespuesta[0][index][1];\n          }\n        }\n\n        this.dataBar.datasets[0].label.push(\"Material Total\");\n        this.dataBar.datasets[1].label.push(\"Material Disponible\");\n      }).catch(console.log);\n    },\n\n    consultarTipo() {\n      return fetch(RUTA_SERVIDOR_LIBROS + \"/tipos/\").then(respuesta => respuesta.json()).then(datosRespuesta => {\n        if (typeof datosRespuesta[0].success === \"undefined\") {\n          this.tipos = datosRespuesta;\n        }\n      }).catch(console.log);\n    },\n\n    consultarMaterlales() {\n      // Llama a consultarTipo() para obtener los tipos antes de consultar los materiales.\n      return this.consultarTipo().then(() => {\n        return fetch(RUTA_SERVIDOR_LIBROS + \"/materialesSubsede/\" + this.subsede).then(respuesta => respuesta.json()).then(datosRespuesta => {\n          this.Materiales = [];\n\n          if (typeof datosRespuesta[0].success === \"undefined\") {\n            this.Materiales = datosRespuesta;\n            this.tipos.cantidad = [];\n            this.Materiales.forEach(material => {\n              const tipoAsociado = this.tipos.find(tipo => tipo.id == material.idTipomaterial);\n\n              if (tipoAsociado) {\n                material.tipo = tipoAsociado.tipo;\n                tipoAsociado.cantidad = (tipoAsociado.cantidad || 0) + 1;\n              }\n            });\n            this.tipos.cantidad = this.tipos.map(tipo => tipo.cantidad || 0);\n            this.dataBarTipos.labels = this.tipos.map(tipo => tipo.tipo);\n            this.dataBarTipos.datasets[0].data = this.tipos.cantidad;\n            const coloresAleatorios = this.generarColoresAleatorios(this.tipos.length);\n            this.dataBarTipos.datasets[0].backgroundColor = coloresAleatorios;\n          }\n        }).catch(console.log);\n      });\n    },\n\n    generarColoresAleatorios(cantidad) {\n      const colores = [];\n\n      for (let i = 0; i < cantidad; i++) {\n        const r = Math.floor(Math.random() * 100) + 155; // Componente rojo en el rango de 155 a 255\n\n        const g = Math.floor(Math.random() * 100) + 155; // Componente verde en el rango de 155 a 255\n\n        const b = Math.floor(Math.random() * 100) + 155; // Componente azul en el rango de 155 a 255\n\n        const color = `rgb(${r},${g},${b})`;\n        colores.push(color);\n      }\n\n      return colores;\n    }\n\n  }\n};","map":{"version":3,"mappings":";AA2CA;AACA,SACAA,gBADA,EAEAC,KAFA,EAGAC,UAHA,EAIAC,OAJA,EAKAC,MALA,EAMAC,UANA,EAOAC,aAPA,EAQAC,WARA,QASA,UATA;AAUA;AACAC,iBACAP,KADA,EAEAC,UAFA,EAGAC,OAHA,EAIAC,MAJA,EAKAC,UALA,EAMAC,aANA,EAOAC,WAPA;AASA;AACA;AAEA;EACAE,0BADA;EAGAC;IACAC,GADA;IAEAC;EAFA,CAHA;;EAQAC;IACA;MACAC,0CADA;MAEAC,sCAFA;MAGAC;QACAC,UADA;QAEAC,WACA;UACAC,kBACA,SADA,EAEA,SAFA,EAGA,SAHA,EAIA,SAJA,EAKA,UALA,EAMA,SANA,EAOA,SAPA,CADA;UAUAN;QAVA,CADA;MAFA,CAHA;MAoBAO;QACAH,UADA;QAEAC,WACA;UACAC,kBACA,SADA,EAEA,SAFA,EAGA,SAHA,EAIA,SAJA,EAKA,UALA,EAMA,SANA,EAOA,SAPA,CADA;UAUAN;QAVA,CADA;MAFA,CApBA;MAqCAQ,cArCA;MAsCAC,SAtCA;MAwCAC,WAxCA;MAyCAC,WAzCA;MA0CAC,WA1CA;MA2CAC;QACAT,UADA;QAEAC,WACA;UACAC,0BADA;UAEAQ,SAFA;UAGAd;QAHA,CADA,EAMA;UACAM,0BADA;UAEAQ,SAFA;UAGAd;QAHA,CANA;MAFA,CA3CA;MA2DAe;QACAX,UADA;QAEAC,WACA;UACAC,mBADA;UAEAQ,4BAFA;UAGAd;QAHA,CADA;MAFA,CA3DA;MAsEAgB;QACAC,yBADA;QAEAC,gBAFA;QAGAC;UACAC;YACAC,kBADA;YAEAC,cAFA;YAGAC,kBAHA;YAIAC;UAJA;QADA;MAHA,CAtEA;MAkFAC;QACAC,cADA;QAEAT,yBAFA;QAGAC;MAHA;IAlFA;EAwFA,CAjGA;;EAmGA;IACA;IACA;EAEA,CAvGA;;EAyGAS;IACAC;MACAC,oEACAC,IADA,CACAC,6BADA,EAEAD,IAFA,CAEAE;QACA;UACA;YACA,IACAA,4DADA,EAEA;cACA,4BACA,mDADA;YAGA,CANA,MAMA,IACAA,sDADA,EAEA;cACA,4BACA,mDADA;YAGA,CANA,MAMA,IACAA,uDADA,EAEA;cACA,4BACA,oDADA;YAGA,CANA,MAMA;cACA,4BACAA,8BACA,KADA,GAEAA,2BAHA;YAKA;;YACA,sCACAA,2BADA;YAIA;YACA;;YACA,IACAA,4DADA,EAEA;cACA;YACA,CAJA,MAIA,IACAA,sDADA,EAEA;cACA;YACA,CAJA,MAIA,IACAA,uDADA,EAEA;cACA;YACA,CAJA,MAIA;cACA;YACA;;YAEA;YACA;UACA;;UACA;;UACA;YACA,IACAA,4DADA,EAEA;cACA,4BACA,mDADA;YAGA,CANA,MAMA,IACAA,sDADA,EAEA;cACA,4BACA,mDADA;YAGA,CANA,MAMA,IACAA,uDADA,EAEA;cACA,4BACA,oDADA;YAGA,CANA,MAMA;cACA,4BACAA,8BACA,KADA,GAEAA,2BAHA;YAKA;;YAEA,sCACAA,2BADA;YAGA;UACA;QACA;;QACA;QACA;MACA,CA3FA,EA4FAC,KA5FA,CA4FAC,WA5FA;IA6FA,CA/FA;;IAiGAC;MACA,+CACAL,IADA,CACAC,6BADA,EAEAD,IAFA,CAEAE;QACA;UACA;QACA;MACA,CANA,EAOAC,KAPA,CAOAC,WAPA;IAQA,CA1GA;;IA2GAE;MACA;MACA;QACA,aACAC,2DADA,EAGAP,IAHA,CAGAC,6BAHA,EAIAD,IAJA,CAIAE;UACA;;UACA;YACA;YACA;YACA;cACA,qCACAM,0CADA;;cAGA;gBACAC;gBACAC;cACA;YACA,CARA;YASA;YACA;YACA;YACA;YACA;UACA;QACA,CAxBA,EAyBAP,KAzBA,CAyBAC,WAzBA;MA0BA,CA3BA;IA4BA,CAzIA;;IA2IAO;MACA;;MACA;QACA,gDADA,CACA;;QACA,gDAFA,CAEA;;QACA,gDAHA,CAGA;;QAEA;QACAC;MACA;;MAEA;IACA;;EAvJA;AAzGA","names":["Chart","Title","ArcElement","Tooltip","Legend","BarElement","CategoryScale","LinearScale","ChartJS","name","components","Bar","Doughnut","data","subsede","acceso","chartDataL","labels","datasets","backgroundColor","chartDataP","Materiales","tipos","totalesM","totalesD","totalesP","dataBar","label","dataBarTipos","chartOptions","maintainAspectRatio","responsive","plugins","chartAreaBorder","borderColor","borderWidth","borderDash","borderDashOffset","chartOptionsBar","indexAxis","methods","consultarCantidad","fetch","then","respuesta","datosRespuesta","catch","console","consultarTipo","consultarMaterlales","RUTA_SERVIDOR_LIBROS","tipo","material","tipoAsociado","generarColoresAleatorios","colores"],"sourceRoot":"src/components","sources":["ListarEstadisticas.vue"],"sourcesContent":["<template>\n  <div class=\"align-items-center\">\n    <div class=\"row align-items-center px-md-5 px-lg-5\">\n      <div\n        align=\"center\"\n        class=\"px-md-5 px-lg-5 align-items-center-sm-12 col-md-6\"\n      >\n        <div align=\"center\">Material Fisico : {{ totalesM }}</div>\n        <Doughnut\n          v-if=\"chartDataL.labels.length\"\n          id=\"my-chart-id\"\n          :options=\"chartOptions\"\n          :data=\"chartDataL\"\n        />\n      </div>\n      <div align=\"center\" class=\"px-md-5 px-lg-5 col-sm-12 col-md-6\">\n        <div align=\"center\">Material Virtual {{ totalesP }}</div>\n        <Doughnut\n          v-if=\"chartDataP.labels.length\"\n          id=\"my-chart-id\"\n          :options=\"chartOptions\"\n          :data=\"chartDataP\"\n        />\n      </div>\n\n      <div\n        v-if=\"dataBar.datasets[0].data.length\"\n        class=\"px-md-5 px-lg-5 col-sm-12 col-md-12\"\n      >\n        <div align=\"center\">\n          Material Total: {{ this.totalesM }} / Disponible: {{ this.totalesD }}\n        </div>\n        <Bar :options=\"chartOptionsBar\" :data=\"dataBar\" />\n        {{this.dataBar}}\n        <Bar :options=\"chartOptionsBar\" :data=\"dataBarTipos\" />\n        {{this.dataBarTipos}}\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Bar } from \"vue-chartjs\";\nimport {\n  Chart as ChartJS,\n  Title,\n  ArcElement,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale,\n} from \"chart.js\";\nimport { Doughnut } from \"vue-chartjs\";\nChartJS.register(\n  Title,\n  ArcElement,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale\n);\nexport const RUTA_SERVIDOR_ALUMNOS = process.env.VUE_APP_RUTA_API_ALUMNOS;\nexport const RUTA_SERVIDOR_LIBROS = process.env.VUE_APP_RUTA_API_LIBROS;\n\nexport default {\n  name: \"ListarEstadisticas\",\n\n  components: {\n    Bar,\n    Doughnut,\n  },\n\n  data() {\n    return {\n      subsede: localStorage.getItem(\"idSubsede\"),\n      acceso: localStorage.getItem(\"acceso\"),\n      chartDataL: {\n        labels: [],\n        datasets: [\n          {\n            backgroundColor: [\n              \"#41B883\",\n              \"#E46651\",\n              \"#00D8FF\",\n              \"#DD1B16\",\n              \"#E412351\",\n              \"#45D8FF\",\n              \"#aa1B16\",\n            ],\n            data: [],\n          },\n        ],\n      },\n      chartDataP: {\n        labels: [],\n        datasets: [\n          {\n            backgroundColor: [\n              \"#41B883\",\n              \"#E46651\",\n              \"#00D8FF\",\n              \"#DD1B16\",\n              \"#E412351\",\n              \"#45D8FF\",\n              \"#aa1B16\",\n            ],\n            data: [],\n          },\n        ],\n      },\n      Materiales: [],\n      tipos: [],\n\n      totalesM: 0,\n      totalesD: 0,\n      totalesP: 0,\n      dataBar: {\n        labels: [],\n        datasets: [\n          {\n            backgroundColor: \"#33C4FF\",\n            label: [],\n            data: [],\n          },\n          {\n            backgroundColor: \"#54FF7E\",\n            label: [],\n            data: [],\n          },\n        ],\n      },\n\n      dataBarTipos: {\n        labels: [],\n        datasets: [\n          {\n            backgroundColor: [],\n            label: [\"Tipos de Material\"],\n            data: [],\n          },\n        ],\n      },\n\n      chartOptions: {\n        maintainAspectRatio: true,\n        responsive: true,\n        plugins: {\n          chartAreaBorder: {\n            borderColor: \"red\",\n            borderWidth: 2,\n            borderDash: [5, 5],\n            borderDashOffset: 2,\n          },\n        },\n      },\n      chartOptionsBar: {\n        indexAxis: \"x\",\n        maintainAspectRatio: true,\n        responsive: true,\n      },\n    };\n  },\n\n  async mounted() {\n    await this.consultarMaterlales();\n    await this.consultarCantidad();\n   \n  },\n\n  methods: {\n    consultarCantidad() {\n      fetch(RUTA_SERVIDOR_LIBROS + \"/cantidadMateriales/\" + this.subsede)\n        .then((respuesta) => respuesta.json())\n        .then((datosRespuesta) => {\n          if (typeof datosRespuesta[0].success === \"undefined\") {\n            for (let index = 0; index < datosRespuesta[1].length; index++) {\n              if (\n                datosRespuesta[1][index][0] == \"Fisioterapia y Kinesiología\"\n              ) {\n                this.chartDataL.labels.push(\n                  \"Fis. & Kin.\" + \" : \" + datosRespuesta[1][index][1]\n                );\n              } else if (\n                datosRespuesta[1][index][0] == \"Bioquímica y farmacia\"\n              ) {\n                this.chartDataL.labels.push(\n                  \"Bio. & Far.\" + \" : \" + datosRespuesta[1][index][1]\n                );\n              } else if (\n                datosRespuesta[1][index][0] == \"Ingeniería de sistemas\"\n              ) {\n                this.chartDataL.labels.push(\n                  \"Ing. sistem.\" + \" : \" + datosRespuesta[1][index][1]\n                );\n              } else {\n                this.chartDataL.labels.push(\n                  datosRespuesta[1][index][0] +\n                    \" : \" +\n                    datosRespuesta[1][index][1]\n                );\n              }\n              this.chartDataL.datasets[0].data.push(\n                datosRespuesta[1][index][1]\n              );\n\n              this.totalesM += datosRespuesta[1][index][1];\n              this.totalesD += datosRespuesta[2][index][1];\n              if (\n                datosRespuesta[1][index][0] == \"Fisioterapia y Kinesiología\"\n              ) {\n                this.dataBar.labels.push(\"Fis. & Kin.\");\n              } else if (\n                datosRespuesta[1][index][0] == \"Bioquímica y farmacia\"\n              ) {\n                this.dataBar.labels.push(\"Bio. & Far.\");\n              } else if (\n                datosRespuesta[1][index][0] == \"Ingeniería de sistemas\"\n              ) {\n                this.dataBar.labels.push(\"Ing. sistem.\");\n              } else {\n                this.dataBar.labels.push(datosRespuesta[1][index][0]);\n              }\n\n              this.dataBar.datasets[0].data.push(datosRespuesta[1][index][1]);\n              this.dataBar.datasets[1].data.push(datosRespuesta[2][index][1]);\n            }\n            this.totalesP = 0;\n            for (let index = 0; index < datosRespuesta[0].length; index++) {\n              if (\n                datosRespuesta[0][index][0] == \"Fisioterapia y Kinesiología\"\n              ) {\n                this.chartDataP.labels.push(\n                  \"Fis. & Kin.\" + \" : \" + datosRespuesta[0][index][1]\n                );\n              } else if (\n                datosRespuesta[0][index][0] == \"Bioquímica y farmacia\"\n              ) {\n                this.chartDataP.labels.push(\n                  \"Bio. & Far.\" + \" : \" + datosRespuesta[0][index][1]\n                );\n              } else if (\n                datosRespuesta[0][index][0] == \"Ingeniería de sistemas\"\n              ) {\n                this.chartDataP.labels.push(\n                  \"Ing. sistem.\" + \" : \" + datosRespuesta[0][index][1]\n                );\n              } else {\n                this.chartDataP.labels.push(\n                  datosRespuesta[0][index][0] +\n                    \" : \" +\n                    datosRespuesta[0][index][1]\n                );\n              }\n\n              this.chartDataP.datasets[0].data.push(\n                datosRespuesta[0][index][1]\n              );\n              this.totalesP = this.totalesP + datosRespuesta[0][index][1];\n            }\n          }\n          this.dataBar.datasets[0].label.push(\"Material Total\");\n          this.dataBar.datasets[1].label.push(\"Material Disponible\");\n        })\n        .catch(console.log);\n    },\n\n    consultarTipo() {\n      return fetch(RUTA_SERVIDOR_LIBROS + \"/tipos/\")\n        .then((respuesta) => respuesta.json())\n        .then((datosRespuesta) => {\n          if (typeof datosRespuesta[0].success === \"undefined\") {\n            this.tipos = datosRespuesta;\n          }\n        })\n        .catch(console.log);\n    },\n    consultarMaterlales() {\n      // Llama a consultarTipo() para obtener los tipos antes de consultar los materiales.\n      return this.consultarTipo().then(() => {\n        return fetch(\n          RUTA_SERVIDOR_LIBROS + \"/materialesSubsede/\" + this.subsede\n        )\n          .then((respuesta) => respuesta.json())\n          .then((datosRespuesta) => {\n            this.Materiales = [];\n            if (typeof datosRespuesta[0].success === \"undefined\") {\n              this.Materiales = datosRespuesta;\n              this.tipos.cantidad = [];\n              this.Materiales.forEach((material) => {\n                const tipoAsociado = this.tipos.find(\n                  (tipo) => tipo.id == material.idTipomaterial\n                );\n                if (tipoAsociado) {\n                  material.tipo = tipoAsociado.tipo;\n                  tipoAsociado.cantidad = (tipoAsociado.cantidad || 0) + 1;\n                }\n              });\n              this.tipos.cantidad = this.tipos.map((tipo) => (tipo.cantidad || 0))\n              this.dataBarTipos.labels = this.tipos.map((tipo) => tipo.tipo);\n              this.dataBarTipos.datasets[0].data = this.tipos.cantidad\n              const coloresAleatorios = this.generarColoresAleatorios(this.tipos.length);\n              this.dataBarTipos.datasets[0].backgroundColor = coloresAleatorios\n            }\n          })\n          .catch(console.log);\n      });\n    },\n\n    generarColoresAleatorios(cantidad) {\n  const colores = [];\n  for (let i = 0; i < cantidad; i++) {\n    const r = Math.floor(Math.random() * 100) + 155; // Componente rojo en el rango de 155 a 255\n    const g = Math.floor(Math.random() * 100) + 155; // Componente verde en el rango de 155 a 255\n    const b = Math.floor(Math.random() * 100) + 155; // Componente azul en el rango de 155 a 255\n\n    const color = `rgb(${r},${g},${b})`;\n    colores.push(color);\n  }\n\n  return colores;\n}\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}