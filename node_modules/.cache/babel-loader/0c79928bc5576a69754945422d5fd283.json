{"ast":null,"code":"import { computed, defineComponent, provide, inject } from \"vue\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nconst LocalConfigKey = Symbol(\"LocalConfigKey\");\nconst CONFIGS_DEFAULT = computed(() => []);\n\nfunction useLocalConfig() {\n  return inject(LocalConfigKey, CONFIGS_DEFAULT);\n}\n\nvar VaConfig = defineComponent({\n  name: \"VaConfig\",\n  props: { ...useComponentPresetProp,\n    components: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n\n  setup(props) {\n    const prevChain = useLocalConfig();\n    const nextChain = computed(() => [...prevChain.value, props.components]);\n    provide(LocalConfigKey, nextChain);\n    return {};\n  },\n\n  render() {\n    return this.$slots.default ? this.$slots.default() : null;\n  }\n\n});\nexport { VaConfig as V, useLocalConfig as u };","map":{"version":3,"mappings":";;AAQa,uBAAiBA,OAAO,gBAAP,CAAjB;AAEN,MAAMC,kBAAkBC,SAAS,MAAM,EAAf,CAAxB;;AAE2D;EACzD,cAAOC,cAAP,EAAuBF,eAAvB;AACT;;AAEA,eAAeG,gBAAgB;EAC7BC,MAAM,UADuB;EAE7BC,OAAO,EACL,GAAGC,sBADE;IAELC,YAAY;MAAEC,MAAMC,MAAR;MAAgBC,SAAS;IAAzB;EAFP,CAFsB;;EAM7BC,MAAON,KAAP,EAAc;IACZ,MAAMO,YAAYC,gBAAlB;IAEM,kBAAYZ,SAAS,MAAM,CAAC,GAAGW,UAAUE,KAAd,EAAqBT,MAAME,UAA3B,CAAf,CAAZ;IAENQ,QAAQb,cAAR,EAAwBc,SAAxB;IAEA,OAAO,EAAP;EACF,CAd6B;;EAe7BC,SAAU;IACR,OAAO,KAAKC,MAAL,CAAYR,OAAZ,GAAsB,KAAKQ,MAAL,CAAYR,OAAZ,EAAtB,GAA8C,IAArD;EACF;;AAjB6B,CAAhB,CAAf","names":["Symbol","CONFIGS_DEFAULT","computed","LocalConfigKey","defineComponent","name","props","useComponentPresetProp","components","type","Object","default","setup","prevChain","useLocalConfig","value","provide","nextChain","render","$slots"],"sources":["../../../../../src/components/va-config/VaConfig.ts"],"sourcesContent":["import { inject, provide, computed, defineComponent, ComputedRef } from 'vue'\nimport { useComponentPresetProp } from '../../composables/useComponentPreset'\n\nimport { ComponentConfig } from '../../services/component-config'\n\n/**\n * We need another key to provide injected value.\n */\nexport const LocalConfigKey = Symbol('LocalConfigKey')\n\nexport const CONFIGS_DEFAULT = computed(() => [])\n\nexport function useLocalConfig (): ComputedRef<ComponentConfig[]> {\n  return inject(LocalConfigKey, CONFIGS_DEFAULT)\n}\n\nexport default defineComponent({\n  name: 'VaConfig',\n  props: {\n    ...useComponentPresetProp,\n    components: { type: Object, default: () => ({}) },\n  },\n  setup (props) {\n    const prevChain = useLocalConfig()\n    // We want it to be an array and not a merged object for optimization purposes\n    const nextChain = computed(() => [...prevChain.value, props.components])\n\n    provide(LocalConfigKey, nextChain)\n\n    return {}\n  },\n  render () {\n    return this.$slots.default ? this.$slots.default() : null\n  },\n})\n"]},"metadata":{},"sourceType":"module"}