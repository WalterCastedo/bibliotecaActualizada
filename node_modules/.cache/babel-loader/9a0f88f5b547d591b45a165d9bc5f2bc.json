{"ast":null,"code":"import { u as useLocalConfig } from \"../../../components/va-config/VaConfig.js\";\nimport { a as useGlobalConfig } from \"../../global-config/global-config.js\";\nimport { computed } from \"vue\";\n\nconst useComponentConfigProps = (component, originalProps) => {\n  const localConfig = useLocalConfig();\n  const {\n    globalConfig\n  } = useGlobalConfig();\n  const instancePreset = computed(() => originalProps.preset);\n\n  const getPresetProps = presetName => {\n    var _a, _b, _c;\n\n    return (_c = (_b = (_a = globalConfig.value.components) == null ? void 0 : _a.presets) == null ? void 0 : _b[component.name]) == null ? void 0 : _c[presetName];\n  };\n\n  return computed(() => {\n    var _a, _b;\n\n    const globalConfigProps = { ...((_a = globalConfig.value.components) == null ? void 0 : _a.all),\n      ...((_b = globalConfig.value.components) == null ? void 0 : _b[component.name])\n    };\n    const localConfigProps = localConfig.value.reduce((finalConfig, config) => config[component.name] ? { ...finalConfig,\n      ...config[component.name]\n    } : finalConfig, {});\n    const presetName = instancePreset.value || localConfigProps.preset || globalConfigProps.preset;\n    const presetProps = presetName && getPresetProps(presetName);\n    return { ...globalConfigProps,\n      ...localConfigProps,\n      ...presetProps\n    };\n  });\n};\n\nexport { useComponentConfigProps as u };","map":{"version":3,"mappings":";;;;AAKa,gCAA0B,CAA6BA,SAA7B,EAA2CC,aAA3C,KAAoE;EACzG,MAAMC,cAAcC,gBAApB;EACM;IAAEC;EAAF,IAAmBC,iBAAnB;EAEN,MAAMC,iBAAiBC,SAAS,MAAMN,cAAcO,MAA7B,CAAvB;;EACM,uBAAkBC,UAAD,IAAwB;;;IAAA,sCAAaC,KAAb,CAAmBC,UAAnB,wBAA+BC,OAA/B,wBAAyCZ,UAAUa,IAAnD,yBAAmFJ,UAAnF;EAAmF,CAA5H;;EAEN,OAAOF,SAAS,MAAM;;;IACpB,MAAMO,oBAA2B,EAC/B,IAAG,mBAAaJ,KAAb,CAAmBC,UAAnB,wBAA+BI,GAAlC,CAD+B;MAE/B,IAAG,mBAAaL,KAAb,CAAmBC,UAAnB,wBAAgCX,UAAUa,IAA1C,CAAH;IAF+B,CAAjC;IAKM,yBAA0BX,YAAYQ,KAAZ,CAC7BM,MAD6B,CACtB,CAACC,WAAD,EAAcC,MAAd,KAAyBA,OAAOlB,UAAUa,IAAjB,IAC7B,EAAE,GAAGI,WAAL;MAAkB,GAAGC,OAAOlB,UAAUa,IAAjB;IAArB,CAD6B,GAE7BI,WAH0B,EAI5B,EAJ4B,CAA1B;IAMN,MAAMR,aAAaH,eAAeI,KAAf,IAAwBS,iBAAiBX,MAAzC,IAAmDM,kBAAkBN,MAAxF;IACM,oBAAcC,cAAcW,eAAeX,UAAf,CAA5B;IAEN,OAAO,EAAE,GAAGK,iBAAL;MAAwB,GAAGK,gBAA3B;MAA6C,GAAGE;IAAhD,CAAP;EACD,CAhBM,CAAP;AAiBF,CAxBa","names":["component","originalProps","localConfig","useLocalConfig","globalConfig","useGlobalConfig","instancePreset","computed","preset","presetName","value","components","presets","name","globalConfigProps","all","reduce","finalConfig","config","localConfigProps","getPresetProps","presetProps"],"sources":["../../../../../../src/services/component-config/utils/use-component-config-props.ts"],"sourcesContent":["import type { VuesticComponent, VuesticComponentName, Props } from '../types'\nimport { useLocalConfig } from '../../../components/va-config/VaConfig'\nimport { useGlobalConfig } from '../../global-config/global-config'\nimport { computed } from 'vue'\n\nexport const useComponentConfigProps = <T extends VuesticComponent>(component: T, originalProps: Props) => {\n  const localConfig = useLocalConfig()\n  const { globalConfig } = useGlobalConfig()\n\n  const instancePreset = computed(() => originalProps.preset)\n  const getPresetProps = (presetName: string) => globalConfig.value.components?.presets?.[component.name as VuesticComponentName]?.[presetName]\n\n  return computed(() => {\n    const globalConfigProps: Props = {\n      ...globalConfig.value.components?.all,\n      ...globalConfig.value.components?.[component.name as VuesticComponentName],\n    }\n\n    const localConfigProps: Props = localConfig.value\n      .reduce((finalConfig, config) => config[component.name as VuesticComponentName]\n        ? { ...finalConfig, ...config[component.name as VuesticComponentName] }\n        : finalConfig\n      , {})\n\n    const presetName = instancePreset.value || localConfigProps.preset || globalConfigProps.preset\n    const presetProps = presetName && getPresetProps(presetName)\n\n    return { ...globalConfigProps, ...localConfigProps, ...presetProps }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}