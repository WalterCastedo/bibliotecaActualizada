{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, provide, onMounted, nextTick, onUnmounted, inject, openBlock, createBlock, resolveDynamicComponent, withCtx, renderSlot } from \"vue\";\nimport { F as FormServiceKey } from \"./consts.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper.js\";\n\nvar VaForm_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \".va-form{font-family:var(--va-font-family)}\\n\")();\n\nconst isVaForm = value => !!value.focusInvalid;\n\nconst _sfc_main = defineComponent({\n  name: \"VaForm\",\n  emits: [\"validation\"],\n  props: { ...useComponentPresetProp,\n    autofocus: {\n      type: Boolean,\n      default: false\n    },\n    tag: {\n      type: String,\n      default: \"div\"\n    }\n  },\n\n  setup(props, {\n    emit\n  }) {\n    const nestedFormElements = ref([]);\n\n    const parentFormProvider = () => inject(FormServiceKey, void 0);\n\n    provide(FormServiceKey, {\n      onChildMounted: child => childMountedHandler(child),\n      onChildUnmounted: removableChild => childUnmountedHandler(removableChild)\n    });\n\n    const childMountedHandler = child => {\n      nestedFormElements.value.push(child);\n    };\n\n    const childUnmountedHandler = removableChild => {\n      nestedFormElements.value = nestedFormElements.value.filter(child => child !== removableChild);\n    };\n\n    const reset = () => {\n      nestedFormElements.value.filter(({\n        reset: reset2\n      }) => reset2).forEach(item => {\n        item.reset();\n      });\n    };\n\n    const resetValidation = () => {\n      nestedFormElements.value.filter(({\n        resetValidation: resetValidation2\n      }) => resetValidation2).forEach(item => {\n        item.resetValidation();\n      });\n    };\n\n    const focus = () => {\n      var _a;\n\n      (_a = nestedFormElements.value.find(({\n        focus: focus2\n      }) => focus2)) == null ? void 0 : _a.focus();\n    };\n\n    const focusInvalid = () => {\n      const invalidComponent = nestedFormElements.value.find(item => !isVaForm(item) && item.hasError());\n\n      if (invalidComponent) {\n        invalidComponent.focus();\n      } else {\n        nestedFormElements.value.forEach(item => isVaForm(item) && item.focusInvalid());\n      }\n    };\n\n    const validate = () => {\n      const formValid = nestedFormElements.value.filter(({\n        validate: validate2\n      }) => validate2).map(child => child.validate()).every(isValid => isValid);\n      emit(\"validation\", formValid);\n      return formValid;\n    };\n\n    const publicMethods = {\n      reset,\n      resetValidation,\n      focus,\n      focusInvalid,\n      validate\n    };\n    onMounted(() => {\n      var _a, _b;\n\n      (_b = (_a = parentFormProvider()) == null ? void 0 : _a.onChildMounted) == null ? void 0 : _b.call(_a, publicMethods);\n\n      if (props.autofocus) {\n        nextTick(focus);\n      }\n    });\n    onUnmounted(() => {\n      var _a, _b;\n\n      (_b = (_a = parentFormProvider()) == null ? void 0 : _a.onChildUnmounted) == null ? void 0 : _b.call(_a, publicMethods);\n    });\n    return publicMethods;\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {\n    class: \"va-form\"\n  }, {\n    default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n    _: 3\n  });\n}\n\nvar _VaForm = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaForm as _ };\nimport './VaForm.css';","map":{"version":3,"mappings":";;;;;;;;AAeA,MAAMA,WAAYC,KAAD,IAA+B,CAAC,CAACA,MAAMC,YAAxD;;AAEA,MAAKC,YAAaC,gBAAa;EAC7BC,MAAM,QADuB;EAE7BC,OAAO,CAAC,YAAD,CAFsB;EAG7BC,OAAO,EACL,GAAGC,sBADE;IAELC,WAAW;MAAEC,MAAMC,OAAR;MAAiBC,SAAS;IAA1B,CAFN;IAGLC,KAAK;MAAEH,MAAMI,MAAR;MAAgBF,SAAS;IAAzB;EAHA,CAHsB;;EAS7BG,MAAOR,KAAP,EAAc;IAAES;EAAF,CAAd,EAAwB;IAChB,2BAAgDC,IAAI,EAAJ,CAAhD;;IAEN,MAAMC,qBAAqB,MAAMC,OAAOC,cAAP,EAAuB,MAAvB,CAAjC;;IAEAC,QAAQD,cAAR,EAAwB;MACtBE,gBAAiBC,KAAD,IAA6BC,oBAAoBD,KAApB,CADvB;MAEtBE,kBAAmBC,cAAD,IAAsCC,sBAAsBD,cAAtB;IAFlC,CAAxB;;IAKM,4BAAuBH,KAAD,IAA6B;MACpCK,yBAAMC,IAAN,CAAWN,KAAX;IAAgB,CAD/B;;IAIA,8BAAyBG,cAAD,IAAsC;MAClEE,mBAAmB3B,KAAnB,GAA2B2B,mBAAmB3B,KAAnB,CAAyB6B,MAAzB,CAAgCP,SAASA,UAAUG,cAAnD,CAA3B;IAA4F,CADxF;;IAKN,MAAMK,QAAQ,MAAM;MACCH,yBAChBE,MADgB,CACT,CAAC;QAAEC;MAAF,CAAD,KAAeC,MADN,EAEhBC,OAFgB,CAEPC,IAAD,IAAU;QAAEA,KAAKH,KAAL;MAAc,CAFlB;IAEkB,CAHvC;;IAMA,MAAMI,kBAAkB,MAAM;MACTP,yBAChBE,MADgB,CACT,CAAC;QAAEK;MAAF,CAAD,KAAyBC,gBADhB,EAEhBH,OAFgB,CAEPC,IAAD,IAAe;QAAEA,KAAKC,eAAL;MAAwB,CAFjC;IAEiC,CAHtD;;IAMA,MAAME,QAAQ,MAAM;;;MAAE,yBAAmBpC,KAAnB,CAAyBqC,IAAzB,CAA8B,CAAC;QAAED,OAAYE;MAAd,CAAD,KAAeA,MAA7C,yBAAqDF,KAArD;IAA2D,CAAjF;;IAEA,MAAMnC,eAAe,MAAM;MACzB,MAAMsC,mBAAmBZ,mBAAmB3B,KAAnB,CACtBqC,IADsB,CAChBJ,IAAD,IAAU,CAAClC,SAASkC,IAAT,CAAD,IAAmBA,KAAKO,QAAL,EADZ,CAAzB;;MAGA,IAAID,gBAAJ,EAAsB;QACpBA,iBAAiBH,KAAjB;MAAuB,CADzB,MAEO;QACcT,yBAChBK,OADgB,CACAC,IAAR,IAAQlC,SAASkC,IAAT,KAAkBA,KAAKhC,YAAL,EADlB;MAErB;IAAA,CATF;;IAaA,MAAMwC,WAAW,MAAM;MACrB,MAAMC,YAAYf,mBAAmB3B,KAAnB,CACf6B,MADe,CACR,CAAC;QAAEY;MAAF,CAAD,KAAkBE,SADV,EAEfC,GAFe,CAEVtB,KAAD,IAAWA,MAAMmB,QAAN,EAFA,EAGfI,KAHe,CAGRC,OAAD,IAAaA,OAHJ,CAAlB;MAKA/B,KAAK,YAAL,EAAmB2B,SAAnB;MAEO;IAAA,CART;;IAWA,MAAMK,gBAAsB;MAC1BjB,KAD0B;MAE1BI,eAF0B;MAG1BE,KAH0B;MAI1BnC,YAJ0B;MAK1BwC;IAL0B,CAA5B;IAQAO,UAAU,MAAM;;;MACK,wDAAG3B,cAAH,iCAAoB0B,aAApB;;MAEnB,IAAIzC,MAAME,SAAV,EAAqB;QAAEyC,SAASb,KAAT;MAAgB;IACxC,CAJD;IAMAc,YAAY,MAAM;;;MACG,wDAAG1B,gBAAH,iCAAsBuB,aAAtB;IACpB,CAFD;IAIO;EACT;;AArF6B,CAAb,CAAlB;;;EAhBE,gCAKYI,wBAHLC,QAGKD,CALZE,EACE;IAAAC,OAAM;EAAN,CADFD,EACiB;IAAA1C,iBAGf,MAAQ,CAAR4C,WAAQH,WAARG,EAAQ,SAARA,CAAQ,CAHOC;IAGPC;EAHO,CADjBJ","names":["isVaForm","value","focusInvalid","_sfc_main","defineComponent","name","emits","props","useComponentPresetProp","autofocus","type","Boolean","default","tag","String","setup","emit","ref","parentFormProvider","inject","FormServiceKey","provide","onChildMounted","child","childMountedHandler","onChildUnmounted","removableChild","childUnmountedHandler","nestedFormElements","push","filter","reset","reset2","forEach","item","resetValidation","resetValidation2","focus","find","focus2","invalidComponent","hasError","validate","formValid","validate2","map","every","isValid","publicMethods","onMounted","nextTick","onUnmounted","_resolveDynamicComponent","_ctx","_createBlock","class","_renderSlot","_withCtx","_"],"sources":["../../../../../src/components/va-form/VaForm.vue"],"sourcesContent":["<template>\n  <component\n    class=\"va-form\"\n    :is=\"tag\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, Ref, onMounted, onUnmounted, nextTick, provide, inject } from 'vue'\n\nimport { FormServiceKey, FormChild, Form } from './consts'\nimport { useComponentPresetProp } from '../../composables/useComponentPreset'\n\nconst isVaForm = (value: any): value is Form => !!value.focusInvalid\n\nexport default defineComponent({\n  name: 'VaForm',\n  emits: ['validation'],\n  props: {\n    ...useComponentPresetProp,\n    autofocus: { type: Boolean, default: false },\n    tag: { type: String, default: 'div' },\n  },\n\n  setup (props, { emit }) {\n    const nestedFormElements: Ref<(FormChild | Form)[]> = ref([])\n\n    const parentFormProvider = () => inject(FormServiceKey, undefined)\n\n    provide(FormServiceKey, {\n      onChildMounted: (child: FormChild | Form) => childMountedHandler(child),\n      onChildUnmounted: (removableChild: FormChild | Form) => childUnmountedHandler(removableChild),\n    })\n\n    const childMountedHandler = (child: FormChild | Form) => {\n      nestedFormElements.value.push(child)\n    }\n\n    const childUnmountedHandler = (removableChild: FormChild | Form) => {\n      nestedFormElements.value = nestedFormElements.value.filter(child => child !== removableChild)\n    }\n\n    /** @public */\n    const reset = () => {\n      nestedFormElements.value\n        .filter(({ reset }) => reset)\n        .forEach((item) => { item.reset() })\n    }\n\n    const resetValidation = () => {\n      nestedFormElements.value\n        .filter(({ resetValidation }) => resetValidation)\n        .forEach((item: any) => { item.resetValidation() })\n    }\n\n    const focus = () => { nestedFormElements.value.find(({ focus }) => focus)?.focus() }\n\n    const focusInvalid = () => {\n      const invalidComponent = nestedFormElements.value\n        .find((item) => !isVaForm(item) && item.hasError())\n\n      if (invalidComponent) {\n        invalidComponent.focus()\n      } else {\n        nestedFormElements.value\n          .forEach(item => isVaForm(item) && item.focusInvalid())\n      }\n    }\n\n    // validation for every nested child\n    const validate = () => { // NOTE: temporarily synchronous validation\n      const formValid = nestedFormElements.value\n        .filter(({ validate }) => validate)\n        .map((child) => child.validate()) // more readable than with 'forEach'\n        .every((isValid) => isValid)\n\n      emit('validation', formValid)\n\n      return formValid\n    }\n\n    const publicMethods: Form = {\n      reset,\n      resetValidation,\n      focus,\n      focusInvalid,\n      validate,\n    }\n\n    onMounted(() => {\n      parentFormProvider()?.onChildMounted?.(publicMethods)\n\n      if (props.autofocus) { nextTick(focus) }\n    })\n\n    onUnmounted(() => {\n      parentFormProvider()?.onChildUnmounted?.(publicMethods)\n    })\n\n    return publicMethods\n  },\n})\n</script>\n\n<style lang='scss'>\n.va-form {\n  font-family: var(--va-font-family);\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}