{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { getCurrentInstance, computed } from \"vue\";\nimport { u as useColors } from \"../../../composables/useColors.js\";\n\nconst useButtonBackground = (colorComputed, isPressed, isHovered) => {\n  const instance = getCurrentInstance();\n\n  if (!instance) {\n    throw new Error(\"`useButtonBackground` hook must be used only inside of setup function!\");\n  }\n\n  const props = instance.props;\n  const {\n    getColor,\n    getGradientBackground\n  } = useColors();\n  const backgroundColor = computed(() => {\n    if (props.plain) {\n      return \"transparent\";\n    }\n\n    return props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value;\n  });\n  const hoveredBgState = computed(() => !props.plain && isHovered.value);\n  const pressedBgState = computed(() => !props.plain && isPressed.value);\n  const backgroundColorOpacity = computed(() => {\n    if (pressedBgState.value && props.pressedBehavior === \"opacity\") {\n      return props.pressedOpacity;\n    }\n\n    if (hoveredBgState.value && props.hoverBehavior === \"opacity\") {\n      return props.hoverOpacity;\n    }\n\n    return props.backgroundOpacity;\n  });\n  const hoveredMaskState = computed(() => hoveredBgState.value && props.hoverBehavior === \"mask\");\n  const pressedMaskState = computed(() => pressedBgState.value && props.pressedBehavior === \"mask\");\n  const backgroundMaskOpacity = computed(() => {\n    if (pressedMaskState.value) {\n      return props.pressedOpacity;\n    }\n\n    if (hoveredMaskState.value) {\n      return props.hoverOpacity;\n    }\n\n    return 0;\n  });\n  const backgroundMaskColor = computed(() => {\n    if (pressedMaskState.value) {\n      return getColor(props.pressedMaskColor);\n    }\n\n    if (hoveredMaskState.value) {\n      return getColor(props.hoverMaskColor);\n    }\n\n    return \"transparent\";\n  });\n  return {\n    backgroundColor,\n    backgroundColorOpacity,\n    backgroundMaskOpacity,\n    backgroundMaskColor\n  };\n};\n\nexport { useButtonBackground as u };","map":{"version":3,"mappings":";;;;AAiBO,MAAMA,sBAA2C,CACtDC,aADsD,EAEtDC,SAFsD,EAGtDC,SAHsD,KAInD;EACH,MAAMC,WAAWC,oBAAjB;;EACA,IAAI,CAACD,QAAL,EAAe;IAAQ,UAAIE,KAAJ,CAAU,wEAAV;EAAoF;;EAC3G,MAAMC,QAAQH,SAASG,KAAvB;EAEM;IAAEC,QAAF;IAAYC;EAAZ,IAAsCC,WAAtC;EAEA,wBAAkBC,SAAS,MAAM;IACrC,IAAIJ,MAAMK,KAAV,EAAiB;MAAS;IAAc;;IAExC,OAAOL,MAAMM,QAAN,GACHJ,sBAAsBR,cAAca,KAApC,CADG,GAEHb,cAAca,KAFlB;EAGD,CANuB,CAAlB;EAQN,MAAMC,iBAAiBJ,SAAS,MAAM,CAACJ,MAAMK,KAAP,IAAgBT,UAAUW,KAAzC,CAAvB;EACA,MAAME,iBAAiBL,SAAS,MAAM,CAACJ,MAAMK,KAAP,IAAgBV,UAAUY,KAAzC,CAAvB;EAEM,+BAAyBH,SAAS,MAAM;IAC5C,IAAIK,eAAeF,KAAf,IAAwBP,MAAMU,eAAN,KAA0B,SAAtD,EAAiE;MAAE,OAAOV,MAAMW,cAAb;IAA4B;;IAC/F,IAAIH,eAAeD,KAAf,IAAwBP,MAAMY,aAAN,KAAwB,SAApD,EAA+D;MAAE,OAAOZ,MAAMa,YAAb;IAA0B;;IAE3F,OAAOb,MAAMc,iBAAb;EACD,CAL8B,CAAzB;EAON,MAAMC,mBAAmBX,SAAS,MAAMI,eAAeD,KAAf,IAAwBP,MAAMY,aAAN,KAAwB,MAA/D,CAAzB;EACA,MAAMI,mBAAmBZ,SAAS,MAAMK,eAAeF,KAAf,IAAwBP,MAAMU,eAAN,KAA0B,MAAjE,CAAzB;EAEM,8BAAwBN,SAAS,MAAM;IAC3C,IAAIY,iBAAiBT,KAArB,EAA4B;MAAE,OAAOP,MAAMW,cAAb;IAA4B;;IAC1D,IAAII,iBAAiBR,KAArB,EAA4B;MAAE,OAAOP,MAAMa,YAAb;IAA0B;;IAEjD;EACR,CAL6B,CAAxB;EAMA,4BAAsBT,SAAS,MAAM;IACzC,IAAIY,iBAAiBT,KAArB,EAA4B;MAAS,gBAASP,MAAMiB,gBAAf;IAAiC;;IACtE,IAAIF,iBAAiBR,KAArB,EAA4B;MAAS,gBAASP,MAAMkB,cAAf;IAA+B;;IAE7D;EACR,CAL2B,CAAtB;EAOC;IACLC,eADK;IAELC,sBAFK;IAGLC,qBAHK;IAILC;EAJK;AAMT,CAnDO","names":["useButtonBackground","colorComputed","isPressed","isHovered","instance","getCurrentInstance","Error","props","getColor","getGradientBackground","useColors","computed","plain","gradient","value","hoveredBgState","pressedBgState","pressedBehavior","pressedOpacity","hoverBehavior","hoverOpacity","backgroundOpacity","hoveredMaskState","pressedMaskState","pressedMaskColor","hoverMaskColor","backgroundColor","backgroundColorOpacity","backgroundMaskOpacity","backgroundMaskColor"],"sources":["../../../../../../src/components/va-button/hooks/useButtonBackground.ts"],"sourcesContent":["import { computed, Ref, ComputedRef, getCurrentInstance } from 'vue'\n\nimport { useColors } from '../../../composables'\n\nimport type { ButtonPropsTypes } from '../types'\n\ntype UseButtonBackground = (\n  colorComputed: Ref<string>,\n  isPressed: Ref<boolean>,\n  isHovered: Ref<boolean>,\n  ) => {\n  backgroundMaskOpacity: ComputedRef<number>;\n  backgroundMaskColor: ComputedRef<string>;\n  backgroundColor: ComputedRef<string>;\n  backgroundColorOpacity: ComputedRef<number>;\n}\n\nexport const useButtonBackground: UseButtonBackground = (\n  colorComputed,\n  isPressed,\n  isHovered,\n) => {\n  const instance = getCurrentInstance()\n  if (!instance) { throw new Error('`useButtonBackground` hook must be used only inside of setup function!') }\n  const props = instance.props as Required<ButtonPropsTypes>\n\n  const { getColor, getGradientBackground } = useColors()\n\n  const backgroundColor = computed(() => {\n    if (props.plain) { return 'transparent' }\n\n    return props.gradient\n      ? getGradientBackground(colorComputed.value)\n      : colorComputed.value\n  })\n\n  const hoveredBgState = computed(() => !props.plain && isHovered.value)\n  const pressedBgState = computed(() => !props.plain && isPressed.value)\n\n  const backgroundColorOpacity = computed(() => {\n    if (pressedBgState.value && props.pressedBehavior === 'opacity') { return props.pressedOpacity }\n    if (hoveredBgState.value && props.hoverBehavior === 'opacity') { return props.hoverOpacity }\n\n    return props.backgroundOpacity\n  })\n\n  const hoveredMaskState = computed(() => hoveredBgState.value && props.hoverBehavior === 'mask')\n  const pressedMaskState = computed(() => pressedBgState.value && props.pressedBehavior === 'mask')\n\n  const backgroundMaskOpacity = computed(() => {\n    if (pressedMaskState.value) { return props.pressedOpacity }\n    if (hoveredMaskState.value) { return props.hoverOpacity }\n\n    return 0\n  })\n  const backgroundMaskColor = computed(() => {\n    if (pressedMaskState.value) { return getColor(props.pressedMaskColor) }\n    if (hoveredMaskState.value) { return getColor(props.hoverMaskColor) }\n\n    return 'transparent'\n  })\n\n  return {\n    backgroundColor,\n    backgroundColorOpacity,\n    backgroundMaskOpacity,\n    backgroundMaskColor,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}