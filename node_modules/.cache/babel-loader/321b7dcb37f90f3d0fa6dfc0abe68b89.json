{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { toRefs, ref, watch, computed } from \"vue\";\n\nconst safeModelValue = m => m.value ? m.value : new Date(new Date().setHours(0, 0, 0, 0));\n\nconst createNumbersArray = length => Array.from(Array(length).keys());\n\nconst from24to12 = h => (h === 0 ? 12 : h) - Number(h > 12) * 12;\n\nconst from12to24 = (h, isAM = false) => (h === 12 ? 0 : h) + Number(isAM) * 12;\n\nconst createHoursColumn = (props, modelValue, isPM) => {\n  const computedSize = computed(() => props.ampm ? 12 : 24);\n  const items = computed(() => {\n    let array = createNumbersArray(computedSize.value);\n\n    if (props.hoursFilter) {\n      array = array.filter(i => props.hoursFilter(props.ampm ? i + 12 * Number(isPM.value) : i));\n    }\n\n    return array.map(n => {\n      return props.ampm ? from24to12(n) : n;\n    });\n  });\n  const activeItem = computed({\n    get: () => {\n      if (!modelValue.value) {\n        return -1;\n      }\n\n      if (props.ampm) {\n        const h2 = from24to12(modelValue.value.getHours() - 12 * Number(isPM.value));\n        return items.value.findIndex(i => i === h2);\n      }\n\n      const h = modelValue.value.getHours();\n      return items.value.findIndex(i => i === h);\n    },\n    set: newIndex => {\n      if (props.readonly) {\n        return;\n      }\n\n      const hours = props.ampm ? from12to24(items.value[newIndex], isPM.value) : items.value[newIndex];\n      modelValue.value = new Date(safeModelValue(modelValue).setHours(hours));\n    }\n  });\n  return computed(() => ({\n    items: items.value,\n    activeItem\n  }));\n};\n\nconst createMinutesColumn = (props, modelValue) => {\n  const items = computed(() => {\n    const array = createNumbersArray(60);\n\n    if (!props.minutesFilter) {\n      return array;\n    }\n\n    return array.filter(props.minutesFilter);\n  });\n  const activeItem = computed({\n    get: () => {\n      if (!modelValue.value) {\n        return -1;\n      }\n\n      const m = modelValue.value.getMinutes();\n      return items.value.findIndex(i => i === m);\n    },\n    set: newIndex => {\n      if (props.readonly) {\n        return;\n      }\n\n      const v = items.value[newIndex];\n      modelValue.value = new Date(safeModelValue(modelValue).setMinutes(v));\n    }\n  });\n  return computed(() => ({\n    items: items.value,\n    activeItem\n  }));\n};\n\nconst createSecondsColumn = (props, modelValue) => {\n  const items = computed(() => {\n    const array = createNumbersArray(60);\n\n    if (!props.secondsFilter) {\n      return array;\n    }\n\n    return array.filter(props.secondsFilter);\n  });\n  const activeItem = computed({\n    get: () => {\n      if (!modelValue.value) {\n        return -1;\n      }\n\n      const s = modelValue.value.getSeconds();\n      return items.value.findIndex(i => i === s);\n    },\n    set: newIndex => {\n      if (props.readonly) {\n        return;\n      }\n\n      const v = items.value[newIndex];\n      modelValue.value = new Date(safeModelValue(modelValue).setSeconds(v));\n    }\n  });\n  return computed(() => ({\n    items: items.value,\n    activeItem\n  }));\n};\n\nconst createPeriodColumn = (props, modelValue, isPM) => {\n  return computed(() => ({\n    items: [\"AM\", \"PM\"],\n    activeItem: computed({\n      get: () => {\n        if (!modelValue.value) {\n          return -1;\n        }\n\n        return Number(isPM.value);\n      },\n      set: val => {\n        isPM.value = Boolean(val);\n        const h = safeModelValue(modelValue).getHours();\n        let h24 = isPM.value ? h + 12 : h;\n\n        if (isPM.value && h <= 12) {\n          h24 = h + 12;\n        }\n\n        if (!isPM.value && h >= 12) {\n          h24 = h - 12;\n        }\n\n        const isValidFilteredHour = !props.hoursFilter || props.hoursFilter(h24);\n\n        if (props.periodUpdatesModelValue && isValidFilteredHour) {\n          modelValue.value = new Date(safeModelValue(modelValue).setHours(h24));\n        }\n      }\n    })\n  }));\n};\n\nconst useTimePicker = (props, modelValue) => {\n  const {\n    view\n  } = toRefs(props);\n  const isPM = ref(false);\n  watch(modelValue, () => {\n    isPM.value = safeModelValue(modelValue).getHours() >= 12;\n  }, {\n    immediate: true\n  });\n  const hoursColumn = createHoursColumn(props, modelValue, isPM);\n  const minutesColumn = createMinutesColumn(props, modelValue);\n  const secondsColumn = createSecondsColumn(props, modelValue);\n  const periodColumn = createPeriodColumn(props, modelValue, isPM);\n  const columns = computed(() => {\n    const array = [];\n\n    if (view.value === \"hours\") {\n      array.push(hoursColumn.value);\n    } else if (view.value === \"minutes\") {\n      array.push(hoursColumn.value, minutesColumn.value);\n    } else if (view.value === \"seconds\") {\n      array.push(hoursColumn.value, minutesColumn.value, secondsColumn.value);\n    }\n\n    if (props.ampm && !props.hidePeriodSwitch) {\n      array.push(periodColumn.value);\n    }\n\n    return array;\n  });\n  return {\n    columns,\n    isPM\n  };\n};\n\nexport { useTimePicker as u };","map":{"version":3,"mappings":"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","names":["safeModelValue","m","value","Date","setHours","createNumbersArray","length","Array","from","keys","from24to12","h","Number","from12to24","isAM","createHoursColumn","props","modelValue","isPM","computedSize","computed","ampm","hoursFilter","array","filter","i","map","n","activeItem","get","getHours","items","findIndex","h2","set","newIndex","readonly","hours","createMinutesColumn","minutesFilter","getMinutes","setMinutes","v","createSecondsColumn","secondsFilter","getSeconds","s","setSeconds","createPeriodColumn","val","Boolean","h24","isValidFilteredHour","periodUpdatesModelValue","view","toRefs","ref","watch","immediate","hoursColumn","periodColumn","push","minutesColumn","secondsColumn","hidePeriodSwitch","columns"],"sources":["../../../../../../src/components/va-time-picker/hooks/useTimePicker.ts"],"sourcesContent":["import { computed, ref, Ref, toRefs, watch } from 'vue'\nimport { TimePickerProps, ModelValueRef } from '../types'\n\n// Use safeModelValue if we need to update model value\nconst safeModelValue = (m: ModelValueRef) => m.value ? m.value : new Date(new Date().setHours(0, 0, 0, 0))\n\nconst createNumbersArray = (length: number) => Array.from(Array(length).keys())\n\n/**\n * Convert 00:00 -> 12:00 am, 00:01 -> 01:00 am.\n * So we need to changed 12 and 0 between two formats\n */\nconst from24to12 = (h: number) => (h === 0 ? 12 : h) - Number(h > 12) * 12\nconst from12to24 = (h: number, isAM = false) => (h === 12 ? 0 : h) + Number(isAM) * 12\n\nconst createHoursColumn = (props: TimePickerProps, modelValue: ModelValueRef, isPM: Ref<boolean>) => {\n  const computedSize = computed(() => props.ampm ? 12 : 24)\n\n  const items = computed(() => {\n    let array = createNumbersArray(computedSize.value)\n\n    if (props.hoursFilter) {\n      array = array.filter((i) => props.hoursFilter!(props.ampm ? i + 12 * Number(isPM.value) : i))\n    }\n\n    return array.map((n) => {\n      return props.ampm ? from24to12(n) : n\n    })\n  })\n\n  const activeItem = computed({\n    get: () => {\n      if (!modelValue.value) { return -1 }\n\n      if (props.ampm) {\n        const h = from24to12(modelValue.value.getHours() - 12 * Number(isPM.value))\n        return items.value.findIndex((i) => i === h)\n      }\n\n      const h = modelValue.value.getHours()\n\n      return items.value.findIndex((i) => i === h)\n    },\n    set: (newIndex) => {\n      if (props.readonly) { return }\n\n      const hours = props.ampm ? from12to24(items.value[newIndex], isPM.value) : items.value[newIndex]\n\n      modelValue.value = new Date(safeModelValue(modelValue).setHours(hours))\n    },\n  })\n\n  return computed(() => ({\n    items: items.value,\n    activeItem: activeItem,\n  }))\n}\n\nconst createMinutesColumn = (props: TimePickerProps, modelValue: ModelValueRef) => {\n  const items = computed(() => {\n    const array = createNumbersArray(60)\n\n    if (!props.minutesFilter) { return array }\n\n    return array.filter(props.minutesFilter)\n  })\n\n  const activeItem = computed({\n    get: () => {\n      if (!modelValue.value) { return -1 }\n\n      const m = modelValue.value.getMinutes()\n\n      return items.value.findIndex((i) => i === m)\n    },\n    set: (newIndex) => {\n      if (props.readonly) { return }\n\n      const v = items.value[newIndex]\n\n      modelValue.value = new Date(safeModelValue(modelValue).setMinutes(v))\n    },\n  })\n\n  return computed(() => ({\n    items: items.value,\n    activeItem: activeItem,\n  }))\n}\n\nconst createSecondsColumn = (props: TimePickerProps, modelValue: ModelValueRef) => {\n  const items = computed(() => {\n    const array = createNumbersArray(60)\n\n    if (!props.secondsFilter) { return array }\n\n    return array.filter(props.secondsFilter)\n  })\n\n  const activeItem = computed({\n    get: () => {\n      if (!modelValue.value) { return -1 }\n\n      const s = modelValue.value.getSeconds()\n\n      return items.value.findIndex((i) => i === s)\n    },\n    set: (newIndex) => {\n      if (props.readonly) { return }\n\n      const v = items.value[newIndex]\n\n      modelValue.value = new Date(safeModelValue(modelValue).setSeconds(v))\n    },\n  })\n\n  return computed(() => ({\n    items: items.value,\n    activeItem: activeItem,\n  }))\n}\n\nconst createPeriodColumn = (props: TimePickerProps, modelValue: ModelValueRef, isPM: Ref<boolean>) => {\n  return computed(() => ({\n    items: ['AM', 'PM'],\n    activeItem: computed({\n      get: () => {\n        if (!modelValue.value) { return -1 }\n        return Number(isPM.value)\n      },\n      set: (val) => {\n        isPM.value = Boolean(val)\n        const h = safeModelValue(modelValue).getHours()\n        let h24 = isPM.value ? h + 12 : h\n\n        if (isPM.value && h <= 12) { h24 = h + 12 }\n        if (!isPM.value && h >= 12) { h24 = h - 12 }\n\n        // If there is no hoursFilter - it must be valid, otherwise validate hours\n        const isValidFilteredHour = !props.hoursFilter || props.hoursFilter(h24)\n\n        if (props.periodUpdatesModelValue && isValidFilteredHour) {\n          modelValue.value = new Date(safeModelValue(modelValue).setHours(h24))\n        }\n      },\n    }),\n  }))\n}\n\nexport const useTimePicker = (props: TimePickerProps, modelValue: ModelValueRef) => {\n  const { view } = toRefs(props)\n\n  const isPM = ref(false)\n  watch(modelValue, () => { isPM.value = safeModelValue(modelValue).getHours() >= 12 }, { immediate: true })\n\n  const hoursColumn = createHoursColumn(props, modelValue, isPM)\n  const minutesColumn = createMinutesColumn(props, modelValue)\n  const secondsColumn = createSecondsColumn(props, modelValue)\n  const periodColumn = createPeriodColumn(props, modelValue, isPM)\n\n  const columns = computed(() => {\n    const array = []\n\n    if (view.value === 'hours') {\n      array.push(hoursColumn.value)\n    } else if (view.value === 'minutes') {\n      array.push(hoursColumn.value, minutesColumn.value)\n    } else if (view.value === 'seconds') {\n      array.push(hoursColumn.value, minutesColumn.value, secondsColumn.value)\n    }\n    if (props.ampm && !props.hidePeriodSwitch) {\n      array.push(periodColumn.value)\n    }\n\n    return array\n  })\n\n  return {\n    columns,\n    isPM,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}