{"ast":null,"code":"import { g as getComponentProps } from \"./resolve-component-props.js\";\n\nfunction extractComponentProps(component, ignoreProps) {\n  const props = getComponentProps(component);\n\n  if (ignoreProps) {\n    return Object.keys(props).reduce((acc, propName) => {\n      if (ignoreProps.includes(propName)) {\n        return acc;\n      }\n\n      if (props[propName] === void 0) {\n        return acc;\n      }\n\n      acc[propName] = typeof props[propName] === \"string\" ? {} : props[propName];\n      return acc;\n    }, {});\n  }\n\n  return props;\n}\n\nfunction extractComponentEmits(component) {\n  return [...new Set(component.emits)];\n}\n\nexport { extractComponentEmits as a, extractComponentProps as e };","map":{"version":3,"mappings":";;AAmBO,+BAAkEA,SAAlE,EAAgFC,WAAhF,EAAkI;EACjI,cAAaC,kBAAkBF,SAAlB,CAAb;;EAIN,IAAIC,WAAJ,EAAiB;IACf,OAAOE,OACJC,IADI,CACCC,KADD,EAEJC,MAFI,CAEQ,CAACC,GAAD,EAAMC,QAAN,KAAmB;MAC1B,gBAAYC,QAAZ,CAAqBD,QAArB,GAAgC;QAAS;MAAI;;MAE7C,UAAMA,QAAN,MAAoB,MAApB,EAA+B;QAAS;MAAI;;MAEhDD,IAAIC,QAAJ,IAAgB,OAAOH,MAAMG,QAAN,CAAP,KAA2B,QAA3B,GAAsC,EAAtC,GAA2CH,MAAMG,QAAN,CAA3D;MAEO;IACT,CAVK,EAUF,EAVE,CAAP;EAWF;;EAEO;AACT;;AAGO,+BAAmCR,SAAnC,EAA2E;EAChF,OAAO,CAAC,GAAG,IAAIU,GAAJ,CAASV,UAAkBW,KAA3B,CAAJ,CAAP;AACF","names":["component","ignoreProps","getComponentProps","Object","keys","props","reduce","acc","propName","includes","Set","emits"],"sources":["../../../../../src/utils/component-options/extract-component-options.ts"],"sourcesContent":["import type { DefineComponent } from 'vue'\nimport type { ExtractComponentEmits, ExtractComponentProps, DefineComponentOptions } from './types'\nimport { getComponentProps } from './resolve-component-props'\n\n/**\n * Returns component props options.\n *\n *\n * @param ignoreProps - deprecated - prefer using lodash omit instead\n *\n * @returns object that looks like this:\n * ```ts\n * {\n *   modelValue: { type: String, required: true },\n *   options: { type: Array, default: [] },\n *   size: { type: String as PropType<'small' | 'medium' | 'large'>, default: 'medium' }\n * }\n * ```\n */\nexport function extractComponentProps<T extends DefineComponentOptions> (component: T, ignoreProps?: string[]): ExtractComponentProps<T> {\n  const props: any = getComponentProps(component as any)\n\n  // TODO: Not sure if it is a good idea to handle ignore props here\n  // Looks like it is not type safe. Need a separated filter object function\n  if (ignoreProps) {\n    return Object\n      .keys(props)\n      .reduce<any>((acc, propName) => {\n        if (ignoreProps.includes(propName)) { return acc }\n\n        if (props[propName] === undefined) { return acc }\n\n        acc[propName] = typeof props[propName] === 'string' ? {} : props[propName]\n\n        return acc\n      }, {})\n  }\n\n  return props\n}\n\n/** Returns component emits option */\nexport function extractComponentEmits<T> (component: T): ExtractComponentEmits<T> {\n  return [...new Set((component as any).emits)] as any\n}\n"]},"metadata":{},"sourceType":"module"}