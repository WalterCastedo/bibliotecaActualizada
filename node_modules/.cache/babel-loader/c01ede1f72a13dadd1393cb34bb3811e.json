{"ast":null,"code":"import { defineComponent, shallowRef, ref, onMounted, computed, watch, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, renderSlot, normalizeProps, guardReactiveProps, withModifiers, createVNode } from \"vue\";\nimport { c as clamp_1, b as isNumber_1, e as isString_1 } from \"../../../vendor.js\";\nimport { u as useBem } from \"../../composables/useBem.js\";\nimport { w as warn } from \"../../utils/console.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { u as useResizeObserver } from \"../../composables/useResizeObserver.js\";\nimport { a as useStatefulProps, u as useStatefulEmits, b as useStateful } from \"../../composables/useStateful.js\";\nimport { u as useTranslation } from \"../../composables/useTranslation.js\";\nimport { u as useSplitDraggerProps, a as useSplitDragger } from \"./useSplitDragger.js\";\nimport { V as VaDivider } from \"../va-divider/index.js\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper.js\";\n\nvar VaSplit_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \":root{--va-split-panel-overflow: auto;--va-split-dragger-display: flex;--va-split-dragger-justify-content: center;--va-split-dragger-align-items: center;--va-split-dragger-overlay-size: 1rem;--va-split-dragging-cursor: grabbing;--va-split-horizontal-dragger-cursor: col-resize;--va-split-vertical-dragger-cursor: row-resize}.va-split{position:relative;display:flex}.va-split__dragger{position:relative}.va-split__dragger__overlay{position:absolute;top:0;bottom:0;right:0;left:0;display:var(--va-split-dragger-display);z-index:1}.va-split__panel{overflow:var(--va-split-panel-overflow);scrollbar-color:var(--va-background-element) transparent;scrollbar-width:thin}.va-split__panel::-webkit-scrollbar{width:4px;height:4px}.va-split__panel::-webkit-scrollbar-track{box-shadow:none;border-radius:10px}.va-split__panel::-webkit-scrollbar-thumb{background:var(--va-background-element);opacity:.3;border-radius:2px}.va-split--dragging .va-split__panel{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:var(--va-split-dragging-cursor)}.va-split__dragger__default{opacity:.7}.va-split:focus .va-split__dragger__default,.va-split:hover .va-split__dragger__default{opacity:1}.va-split--vertical{flex-direction:column}.va-split--vertical>.va-split__dragger{height:0}.va-split--vertical>.va-split__dragger .va-split__dragger__overlay{top:calc(var(--va-split-dragger-overlay-size) / -2);height:var(--va-split-dragger-overlay-size);align-items:var(--va-split-dragger-align-items)}.va-split--vertical>.va-split__dragger .va-split__dragger__default{width:100%}.va-split--horizontal{flex-direction:row}.va-split--horizontal>.va-split__dragger{width:0}.va-split--horizontal>.va-split__dragger .va-split__dragger__overlay{left:calc(var(--va-split-dragger-overlay-size) / -2);width:var(--va-split-dragger-overlay-size);justify-content:var(--va-split-dragger-justify-content)}.va-split--horizontal>.va-split__dragger .va-split__dragger__default{height:100%}\\n\")();\n\nconst _sfc_main = defineComponent({\n  name: \"VaSplit\",\n  components: {\n    VaDivider\n  },\n  props: { ...useComponentPresetProp,\n    ...useSplitDraggerProps,\n    ...useStatefulProps,\n    modelValue: {\n      type: Number,\n      default: 50,\n      validator: v => v <= 100\n    },\n    maximization: {\n      type: Boolean,\n      default: false\n    },\n    maximizeStart: {\n      type: Boolean,\n      default: false\n    },\n    limits: {\n      type: Array,\n      default: () => [0, 0]\n    },\n    snapping: {\n      type: Array,\n      default: void 0\n    },\n    snappingRange: {\n      type: [Number, String],\n      default: 4\n    }\n  },\n  emits: useStatefulEmits,\n  setup: (props, {\n    emit\n  }) => {\n    const splitPanelsContainer = shallowRef();\n    const {\n      valueComputed\n    } = useStateful(props, emit);\n    const containerSize = ref();\n    const bodyFontSize = ref(16);\n\n    const handleContainerResize = () => {\n      var _a;\n\n      const {\n        width,\n        height\n      } = ((_a = splitPanelsContainer.value) == null ? void 0 : _a.getBoundingClientRect()) || {\n        width: 0,\n        height: 0\n      };\n      containerSize.value = props.vertical ? height : width;\n      bodyFontSize.value = parseFloat(getComputedStyle(document.documentElement).fontSize);\n    };\n\n    onMounted(handleContainerResize);\n    useResizeObserver([splitPanelsContainer], handleContainerResize);\n\n    const convertToPercents = (v, type) => {\n      let numberValue = \"\";\n      let measureValue = \"\";\n\n      if (isNumber_1(v)) {\n        return v;\n      }\n\n      v.split(\"\").filter(char => char && char !== \" \").forEach(char => {\n        !isNaN(+char) ? numberValue += char : measureValue += char;\n      });\n\n      switch (measureValue) {\n        case \"%\":\n          return +numberValue;\n\n        case \"px\":\n          return +numberValue / containerSize.value * 100;\n\n        case \"rem\":\n          return +numberValue * bodyFontSize.value / containerSize.value * 100;\n\n        case \"any\":\n          return [\"min\", \"snapping\"].includes(type) ? 0 : 100;\n\n        case \"\":\n          return 100;\n\n        default:\n          return 0;\n      }\n    };\n\n    const getPanelMinMax = v => {\n      if (v === \"undefined\" || !containerSize.value) {\n        return;\n      }\n\n      let minPercents = 0;\n      let maxPercents = 100;\n\n      if (isString_1(v) || isNumber_1(v)) {\n        minPercents = convertToPercents(v, \"min\");\n      }\n\n      if (Array.isArray(v)) {\n        minPercents = convertToPercents(v[0], \"min\");\n        maxPercents = convertToPercents(v[1], \"max\");\n      }\n\n      if (minPercents > maxPercents) {\n        maxPercents = minPercents;\n      }\n\n      return {\n        min: minPercents != null ? minPercents : 0,\n        max: maxPercents != null ? maxPercents : 100\n      };\n    };\n\n    const startPanelMinMax = computed(() => {\n      var _a;\n\n      return (_a = getPanelMinMax(props.limits[0])) != null ? _a : {\n        min: 0,\n        max: 100\n      };\n    });\n    const endPanelMinMax = computed(() => {\n      var _a;\n\n      return (_a = getPanelMinMax(props.limits[1])) != null ? _a : {\n        min: 0,\n        max: 100\n      };\n    });\n    const endPanelMinChecked = computed(() => {\n      const passedCheck = !(startPanelMinMax.value.min + endPanelMinMax.value.min > 100);\n      return !passedCheck ? 100 - startPanelMinMax.value.min : endPanelMinMax.value.min;\n    });\n    const panelsMinMax = computed(() => {\n      if (Math.ceil(endPanelMinMax.value.max + startPanelMinMax.value.max) < 100) ;\n      return {\n        start: {\n          min: startPanelMinMax.value.min,\n          max: Math.min(startPanelMinMax.value.max, 100 - endPanelMinChecked.value)\n        },\n        end: {\n          min: endPanelMinChecked.value,\n          max: Math.min(endPanelMinMax.value.max, 100 - startPanelMinMax.value.min)\n        }\n      };\n    });\n\n    const checkSnappingLimitsCondition = el => el >= panelsMinMax.value.start.min && el >= panelsMinMax.value.end.min && el <= panelsMinMax.value.start.max && el <= panelsMinMax.value.end.max;\n\n    const snappingMarksPosition = computed(() => {\n      if (!Array.isArray(props.snapping) || !containerSize.value) {\n        return;\n      }\n\n      let result = props.snapping.map(el => convertToPercents(el, \"snapping\"));\n\n      if (!result.every(checkSnappingLimitsCondition)) {\n        const filteredMarks = result.filter(checkSnappingLimitsCondition);\n        warn(`Some of the snapping marks (${result}) are not in allowed range (${Object.values(panelsMinMax.value.start).join(\"-\")} / ${Object.values(panelsMinMax.value.end).join(\"-\")}) and will be removed (${filteredMarks})!`);\n        result = filteredMarks;\n      }\n\n      const checkSnappingRange = () => {\n        return result.every((el, index, array) => {\n          if (!array[index + 1]) {\n            return true;\n          }\n\n          return Math.abs(el - array[index + 1]) > props.snappingRange;\n        });\n      };\n\n      if (!checkSnappingRange()) ;\n      return result;\n    });\n    const snappingRangeParsed = computed(() => convertToPercents(props.snappingRange, \"snapping\"));\n    const splitterPosition = ref(valueComputed.value);\n    const splitterPositionComputed = computed(() => {\n      if (snappingMarksPosition.value) {\n        const nearestSnappingMark = snappingMarksPosition.value.find(el => {\n          return splitterPosition.value + snappingRangeParsed.value > el && splitterPosition.value - snappingRangeParsed.value < el;\n        });\n\n        if (nearestSnappingMark) {\n          return nearestSnappingMark;\n        }\n      }\n\n      return clamp_1(splitterPosition.value, Math.max(panelsMinMax.value.start.min, 100 - panelsMinMax.value.end.max), Math.min(panelsMinMax.value.start.max, 100 - panelsMinMax.value.end.min));\n    });\n    const {\n      isDragging,\n      startDragging,\n      currentSplitterPosition\n    } = useSplitDragger(containerSize, splitterPositionComputed, props);\n\n    const maximizePanel = () => {\n      if (!props.maximization || props.disabled) {\n        return;\n      }\n\n      splitterPosition.value = props.maximizeStart ? panelsMinMax.value.start.max : 100 - panelsMinMax.value.end.max;\n    };\n\n    watch(valueComputed, v => {\n      if (v < panelsMinMax.value.start.min || v > 100 - panelsMinMax.value.end.min) ;\n      splitterPosition.value = v;\n    }, {\n      immediate: true\n    });\n    watch(currentSplitterPosition, v => {\n      splitterPosition.value = v;\n    });\n    watch(isDragging, v => {\n      if (!v) {\n        valueComputed.value = splitterPositionComputed.value;\n      }\n\n      document.documentElement.style.cursor = v ? \"var(--va-split-dragging-cursor)\" : \"\";\n    });\n    const sizePropertyComputed = computed(() => props.vertical ? \"height\" : \"width\");\n\n    const getPanelStyle = position => {\n      let sizeValue = position === \"start\" ? splitterPositionComputed.value : 100 - splitterPositionComputed.value;\n\n      if (sizeValue < 0) {\n        sizeValue = 0;\n      }\n\n      if (sizeValue > 100) {\n        sizeValue = 100;\n      }\n\n      return {\n        [sizePropertyComputed.value]: `${sizeValue}%`\n      };\n    };\n\n    const draggerStyleComputed = computed(() => {\n      if (props.disabled) {\n        return {};\n      }\n\n      if (isDragging.value) {\n        return {\n          cursor: \"var(--va-split-dragging-cursor)\"\n        };\n      }\n\n      return {\n        cursor: props.vertical ? \"var(--va-split-vertical-dragger-cursor)\" : \"var(--va-split-horizontal-dragger-cursor)\"\n      };\n    });\n    const classComputed = useBem(\"va-split\", () => ({\n      horizontal: !props.vertical,\n      vertical: props.vertical,\n      dragging: isDragging.value\n    }));\n    return { ...useTranslation(),\n      splitPanelsContainer,\n      containerSize,\n      startDragging,\n      getPanelStyle,\n      maximizePanel,\n      classComputed,\n      draggerStyleComputed\n    };\n  }\n});\n\nconst _hoisted_1 = [\"aria-label\"];\nconst _hoisted_2 = {\n  class: \"va-split__dragger\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_divider = resolveComponent(\"va-divider\");\n\n  return openBlock(), createElementBlock(\"section\", {\n    ref: \"splitPanelsContainer\",\n    class: normalizeClass([\"va-split\", _ctx.classComputed]),\n    \"aria-label\": _ctx.t(\"splitPanels\")\n  }, [createElementVNode(\"div\", {\n    class: \"va-split__panel\",\n    style: normalizeStyle(_ctx.getPanelStyle(\"start\"))\n  }, [renderSlot(_ctx.$slots, \"start\", normalizeProps(guardReactiveProps({\n    containerSize: _ctx.containerSize\n  })))], 4), createElementVNode(\"div\", _hoisted_2, [createElementVNode(\"div\", {\n    class: \"va-split__dragger__overlay\",\n    style: normalizeStyle(_ctx.draggerStyleComputed),\n    onMousedown: _cache[0] || (_cache[0] = withModifiers((...args) => _ctx.startDragging && _ctx.startDragging(...args), [\"prevent\"])),\n    onTouchstart: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.startDragging && _ctx.startDragging(...args), [\"prevent\"])),\n    onDblclick: _cache[2] || (_cache[2] = withModifiers((...args) => _ctx.maximizePanel && _ctx.maximizePanel(...args), [\"prevent\"])),\n    onContextmenu: _cache[3] || (_cache[3] = withModifiers(() => {}, [\"prevent\"])),\n    onDragstart: _cache[4] || (_cache[4] = withModifiers(() => {}, [\"prevent\"]))\n  }, [renderSlot(_ctx.$slots, \"grabber\", {}, () => [createVNode(_component_va_divider, {\n    class: \"va-split__dragger__default\",\n    vertical: !_ctx.$props.vertical\n  }, null, 8, [\"vertical\"])])], 36)]), createElementVNode(\"div\", {\n    class: \"va-split__panel\",\n    style: normalizeStyle(_ctx.getPanelStyle(\"end\"))\n  }, [renderSlot(_ctx.$slots, \"end\", normalizeProps(guardReactiveProps({\n    containerSize: _ctx.containerSize\n  })))], 4)], 10, _hoisted_1);\n}\n\nvar _VaSplit = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaSplit as _ };\nimport './VaSplit.css';","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","VaDivider","props","useComponentPresetProp","useSplitDraggerProps","useStatefulProps","modelValue","type","Number","default","validator","v","maximization","Boolean","maximizeStart","limits","Array","snapping","snappingRange","String","emits","useStatefulEmits","setup","emit","splitPanelsContainer","shallowRef","valueComputed","useStateful","containerSize","ref","handleContainerResize","width","height","value","getBoundingClientRect","vertical","bodyFontSize","parseFloat","getComputedStyle","document","documentElement","fontSize","onMounted","useResizeObserver","numberValue","measureValue","isNumber","split","filter","char","forEach","isNaN","includes","minPercents","maxPercents","isString","isArray","min","max","startPanelMinMax","computed","endPanelMinMax","passedCheck","ceil","start","Math","endPanelMinChecked","end","el","panelsMinMax","map","convertToPercents","result","every","checkSnappingLimitsCondition","warn","Object","values","join","filteredMarks","checkSnappingRange","index","array","abs","snappingRangeParsed","snappingMarksPosition","nearestSnappingMark","find","splitterPosition","clamp","isDragging","startDragging","currentSplitterPosition","useSplitDragger","splitterPositionComputed","maximizePanel","disabled","watch","immediate","style","cursor","sizePropertyComputed","position","sizeValue","useBem","horizontal","dragging","useTranslation","getPanelStyle","classComputed","draggerStyleComputed","class","_createElementBlock","_normalizeClass","_ctx","t","_createElementVNode","_normalizeStyle","_renderSlot","normalizeProps","onMousedown","_cache","onTouchstart","onDblclick","onContextmenu","_withModifiers","onDragstart","_createVNode","_component_va_divider","$props","_hoisted_1"],"sources":["../../../../../src/components/va-split/VaSplit.vue"],"sourcesContent":["<template>\n  <section\n    ref=\"splitPanelsContainer\"\n    class=\"va-split\"\n    :class=\"classComputed\"\n    :aria-label=\"t('splitPanels')\"\n  >\n    <div\n      class=\"va-split__panel\"\n      :style=\"getPanelStyle('start')\"\n    >\n      <slot name=\"start\" v-bind=\"{ containerSize }\" />\n    </div>\n    <div class=\"va-split__dragger\">\n      <div\n        class=\"va-split__dragger__overlay\"\n        :style=\"draggerStyleComputed\"\n        @mousedown.prevent=\"startDragging\"\n        @touchstart.prevent=\"startDragging\"\n        @dblclick.prevent=\"maximizePanel\"\n        @contextmenu.prevent\n        @dragstart.prevent\n      >\n        <slot name=\"grabber\">\n          <va-divider\n            class=\"va-split__dragger__default\"\n            :vertical=\"!$props.vertical\"\n          />\n        </slot>\n      </div>\n    </div>\n    <div\n      class=\"va-split__panel\"\n      :style=\"getPanelStyle('end')\"\n    >\n      <slot name=\"end\" v-bind=\"{ containerSize }\" />\n    </div>\n  </section>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, shallowRef, computed, watch, onMounted } from 'vue'\nimport isString from 'lodash/isString.js'\nimport isNumber from 'lodash/isNumber.js'\nimport clamp from 'lodash/clamp.js'\n\nimport {\n  useBem,\n  useComponentPresetProp,\n  useStateful, useStatefulEmits, useStatefulProps,\n  useResizeObserver,\n  useTranslation,\n} from '../../composables'\nimport { useSplitDragger, useSplitDraggerProps } from './useSplitDragger'\n\nimport { warn } from '../../utils/console'\n\nimport { SplitLimit, SnappingMark } from './types'\n\nimport { VaDivider } from '../va-divider'\n\nexport default defineComponent({\n  name: 'VaSplit',\n\n  components: { VaDivider },\n\n  props: {\n    ...useComponentPresetProp,\n    ...useSplitDraggerProps,\n    ...useStatefulProps,\n    modelValue: {\n      type: Number,\n      default: 50,\n      validator: (v: number) => v <= 100,\n    },\n    maximization: { type: Boolean, default: false },\n    maximizeStart: { type: Boolean, default: false },\n    limits: {\n      type: Array as any as PropType<[SplitLimit, SplitLimit]>,\n      default: () => [0, 0],\n    },\n    snapping: {\n      type: Array as any as PropType<SnappingMark[]>,\n      default: undefined,\n    },\n    snappingRange: { type: [Number, String] as PropType<number | string>, default: 4 },\n  },\n\n  emits: useStatefulEmits,\n\n  setup: (props, { emit }) => {\n    const splitPanelsContainer = shallowRef<HTMLElement>()\n\n    const { valueComputed } = useStateful(props, emit)\n\n    const containerSize = ref()\n    const bodyFontSize = ref(16)\n\n    const handleContainerResize = () => {\n      const { width, height } = splitPanelsContainer.value?.getBoundingClientRect() || { width: 0, height: 0 }\n      containerSize.value = props.vertical ? height : width\n      bodyFontSize.value = parseFloat(getComputedStyle(document.documentElement).fontSize)\n    }\n    onMounted(handleContainerResize)\n    useResizeObserver([splitPanelsContainer], handleContainerResize)\n\n    const convertToPercents = (v: string | number, type: 'min' | 'max' | 'snapping') => {\n      let numberValue = ''\n      let measureValue = ''\n\n      if (isNumber(v)) { return v }\n\n      v.split('')\n        .filter((char) => char && char !== ' ')\n        .forEach((char) => {\n          !isNaN(+char) ? numberValue += char : measureValue += char\n        })\n\n      switch (measureValue) {\n        case '%':\n          return +numberValue\n        case 'px':\n          return (+numberValue / containerSize.value) * 100\n        case 'rem':\n          return ((+numberValue * bodyFontSize.value) / containerSize.value) * 100\n        case 'any':\n          return ['min', 'snapping'].includes(type) ? 0 : 100\n        case '':\n          return 100\n        default:\n          warn('Invalid limits measure!')\n          return 0\n      }\n    }\n    const getPanelMinMax = (v: SplitLimit) => {\n      if (v === 'undefined' || !containerSize.value) { return }\n\n      let minPercents = 0\n      let maxPercents = 100\n\n      if (isString(v) || isNumber(v)) { minPercents = convertToPercents(v, 'min') }\n\n      if (Array.isArray(v)) {\n        minPercents = convertToPercents(v[0], 'min')\n        maxPercents = convertToPercents(v[1], 'max')\n      }\n\n      if (minPercents > maxPercents) {\n        warn(`Min panels size can not be larger than max one! Passed limit: ${v}.`)\n        maxPercents = minPercents\n      }\n\n      return { min: minPercents ?? 0, max: maxPercents ?? 100 }\n    }\n\n    const startPanelMinMax = computed(() => getPanelMinMax(props.limits[0]) ?? { min: 0, max: 100 })\n    const endPanelMinMax = computed(() => getPanelMinMax(props.limits[1]) ?? { min: 0, max: 100 })\n\n    const endPanelMinChecked = computed(() => {\n      const passedCheck = !(startPanelMinMax.value.min + endPanelMinMax.value.min > 100)\n      if (!passedCheck) {\n        warn('The sum of different panels min sizes should be lesser or equal to 100% of the container size!')\n      }\n      return !passedCheck ? 100 - startPanelMinMax.value.min : endPanelMinMax.value.min\n    })\n    const panelsMinMax = computed(() => {\n      if (Math.ceil(endPanelMinMax.value.max + startPanelMinMax.value.max) < 100) {\n        warn('The sum of different panels max sizes should be equal to 100% of the container size!')\n      }\n\n      return {\n        start: {\n          min: startPanelMinMax.value.min,\n          max: Math.min(startPanelMinMax.value.max, 100 - endPanelMinChecked.value),\n        },\n        end: {\n          min: endPanelMinChecked.value,\n          max: Math.min(endPanelMinMax.value.max, 100 - startPanelMinMax.value.min),\n        },\n      }\n    })\n\n    const checkSnappingLimitsCondition = (el: number) =>\n      el >= panelsMinMax.value.start.min &&\n      el >= panelsMinMax.value.end.min &&\n      el <= panelsMinMax.value.start.max &&\n      el <= panelsMinMax.value.end.max\n\n    const snappingMarksPosition = computed(() => {\n      if (!Array.isArray(props.snapping) || !containerSize.value) { return }\n\n      let result = props.snapping.map((el) => convertToPercents(el, 'snapping'))\n\n      if (!result.every(checkSnappingLimitsCondition)) {\n        const filteredMarks = result.filter(checkSnappingLimitsCondition)\n        warn(`Some of the snapping marks (${result}) are not in allowed range (${Object.values(panelsMinMax.value.start).join('-')} / ${Object.values(panelsMinMax.value.end).join('-')}) and will be removed (${filteredMarks})!`)\n        result = filteredMarks\n      }\n\n      const checkSnappingRange = () => {\n        return result.every((el, index, array) => {\n          if (!array[index + 1]) { return true }\n          return Math.abs(el - array[index + 1]) > props.snappingRange\n        })\n      }\n\n      if (!checkSnappingRange()) {\n        warn('Distance between some snapping marks is lesser than snapping range!')\n      }\n\n      return result\n    })\n\n    const snappingRangeParsed = computed(() => convertToPercents(props.snappingRange, 'snapping'))\n\n    const splitterPosition = ref(valueComputed.value)\n    const splitterPositionComputed = computed(() => {\n      if (snappingMarksPosition.value) {\n        const nearestSnappingMark = snappingMarksPosition.value.find((el) => {\n          return splitterPosition.value + snappingRangeParsed.value > el && splitterPosition.value - snappingRangeParsed.value < el\n        })\n        if (nearestSnappingMark) { return nearestSnappingMark }\n      }\n\n      return clamp(\n        splitterPosition.value,\n        Math.max(panelsMinMax.value.start.min, 100 - panelsMinMax.value.end.max),\n        Math.min(panelsMinMax.value.start.max, 100 - panelsMinMax.value.end.min),\n      )\n    })\n\n    const {\n      isDragging,\n      startDragging,\n      currentSplitterPosition,\n    } = useSplitDragger(containerSize, splitterPositionComputed, props)\n\n    const maximizePanel = () => {\n      if (!props.maximization || props.disabled) { return }\n\n      splitterPosition.value = props.maximizeStart ? panelsMinMax.value.start.max : 100 - panelsMinMax.value.end.max\n    }\n\n    watch(valueComputed, (v) => {\n      if (v < panelsMinMax.value.start.min || v > 100 - panelsMinMax.value.end.min) {\n        warn('Incorrect `modelValue`. Check current `limits` prop value.')\n      }\n\n      splitterPosition.value = v\n    }, { immediate: true })\n\n    watch(currentSplitterPosition, (v) => {\n      splitterPosition.value = v\n    })\n\n    watch(isDragging, (v) => {\n      if (!v) { valueComputed.value = splitterPositionComputed.value }\n      document.documentElement.style.cursor = v ? 'var(--va-split-dragging-cursor)' : ''\n    })\n\n    const sizePropertyComputed = computed(() => props.vertical ? 'height' : 'width')\n    const getPanelStyle = (position: 'start' | 'end') => {\n      let sizeValue = position === 'start' ? splitterPositionComputed.value : 100 - splitterPositionComputed.value\n      if (sizeValue < 0) { sizeValue = 0 }\n      if (sizeValue > 100) { sizeValue = 100 }\n\n      return { [sizePropertyComputed.value]: `${sizeValue}%` }\n    }\n\n    const draggerStyleComputed = computed(() => {\n      if (props.disabled) { return {} }\n      if (isDragging.value) { return { cursor: 'var(--va-split-dragging-cursor)' } }\n      return { cursor: props.vertical ? 'var(--va-split-vertical-dragger-cursor)' : 'var(--va-split-horizontal-dragger-cursor)' }\n    })\n\n    const classComputed = useBem('va-split', () => ({\n      horizontal: !props.vertical,\n      vertical: props.vertical,\n      dragging: isDragging.value,\n    }))\n\n    return {\n      ...useTranslation(),\n      splitPanelsContainer,\n      containerSize,\n\n      startDragging,\n      getPanelStyle,\n      maximizePanel,\n\n      classComputed,\n      draggerStyleComputed,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n@import '../../styles/resources';\n\n.va-split {\n  position: relative;\n  display: flex;\n\n  &__dragger {\n    position: relative;\n\n    &__overlay {\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      right: 0;\n      left: 0;\n      display: var(--va-split-dragger-display);\n      z-index: 1;\n    }\n  }\n\n  &__panel {\n    overflow: var(--va-split-panel-overflow);\n\n    @include va-scroll();\n  }\n\n  &--dragging {\n    & .va-split__panel {\n      user-select: none;\n      cursor: var(--va-split-dragging-cursor);\n    }\n  }\n\n  &__dragger__default {\n    opacity: 0.7;\n  }\n\n  &:focus,\n  &:hover {\n    .va-split__dragger__default {\n      opacity: 1;\n    }\n  }\n\n  &--vertical {\n    flex-direction: column;\n\n    & > .va-split__dragger {\n      height: 0;\n\n      .va-split__dragger__overlay {\n        top: calc((var(--va-split-dragger-overlay-size) / -2));\n        height: var(--va-split-dragger-overlay-size);\n        align-items: var(--va-split-dragger-align-items);\n      }\n\n      .va-split__dragger__default {\n        width: 100%;\n      }\n    }\n  }\n\n  &--horizontal {\n    flex-direction: row;\n\n    & > .va-split__dragger {\n      width: 0;\n\n      .va-split__dragger__overlay {\n        left: calc((var(--va-split-dragger-overlay-size) / -2));\n        width: var(--va-split-dragger-overlay-size);\n        justify-content: var(--va-split-dragger-justify-content);\n      }\n\n      .va-split__dragger__default {\n        height: 100%;\n      }\n    }\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}