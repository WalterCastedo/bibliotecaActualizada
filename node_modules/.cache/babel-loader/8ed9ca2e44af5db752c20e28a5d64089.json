{"ast":null,"code":"import { unref } from \"vue\";\nimport { u as useCaptureEvent } from \"./useCaptureEvent.js\";\n\nconst checkIfElementChild = (parent, child) => {\n  if (!child) {\n    return false;\n  }\n\n  if (child.parentElement === parent) {\n    return true;\n  }\n\n  return parent.contains(child);\n};\n\nconst safeArray = a => Array.isArray(a) ? a : [a];\n\nconst useClickOutside = (elements, cb) => {\n  useCaptureEvent(\"click\", event => {\n    const clickTarget = event.target;\n    const isClickInside = safeArray(elements).some(element => unref(element) && checkIfElementChild(unref(element), clickTarget));\n\n    if (!isClickInside) {\n      cb(clickTarget);\n    }\n  });\n};\n\nexport { useClickOutside as u };","map":{"version":3,"mappings":";;;AAGA,MAAMA,sBAAsB,CAACC,MAAD,EAAsBC,KAAtB,KAAyE;EACnG,IAAI,CAACA,KAAL,EAAY;IAAS;EAAM;;EACvB,UAAMC,aAAN,KAAwBF,MAAxB,EAAgC;IAAS;EAAK;;EAE3C,cAAOG,QAAP,CAAgBF,KAAhB;AACT,CALA;;AAUA,MAAMG,YAAgBC,CAAJ,IAAyBC,MAAMC,OAAN,CAAcF,CAAd,IAAmBA,CAAnB,GAAuB,CAACA,CAAD,CAAlE;;AAEa,wBAAkB,CAACG,QAAD,EAA0DC,EAA1D,KAA4F;EACzGC,yBAAUC,KAAD,IAAuB;IAC9C,MAAMC,cAAcD,MAAME,MAA1B;IAEA,MAAMC,gBAAgBV,UAAUI,QAAV,EACnBO,IADmB,CACbC,OAAD,IAAaC,MAAMD,OAAN,KAAkBjB,oBAAoBkB,MAAMD,OAAN,CAApB,EAAmDJ,WAAnD,CADjB,CAAtB;;IAGA,IAAI,CAACE,aAAL,EAAoB;MAAEL,GAAGG,WAAH;IAAgB;EACvC,CAPe;AAQlB,CATa","names":["checkIfElementChild","parent","child","parentElement","contains","safeArray","a","Array","isArray","elements","cb","useCaptureEvent","event","clickTarget","target","isClickInside","some","element","unref"],"sources":["../../../../src/composables/useClickOutside.ts"],"sourcesContent":["import { Ref, unref } from 'vue'\nimport { useCaptureEvent } from './useCaptureEvent'\n\nconst checkIfElementChild = (parent: HTMLElement, child: HTMLElement | null | undefined): boolean => {\n  if (!child) { return false }\n  if (child.parentElement === parent) { return true }\n\n  return parent.contains(child)\n}\n\ntype MaybeRef<T> = T | Ref<T>\ntype MaybeArray<T> = T | T[]\n\nconst safeArray = <T>(a: MaybeArray<T>) => Array.isArray(a) ? a : [a]\n\nexport const useClickOutside = (elements: MaybeArray<MaybeRef<HTMLElement | undefined>>, cb: (el: HTMLElement) => void) => {\n  useCaptureEvent('click', (event: MouseEvent) => {\n    const clickTarget = event.target as HTMLElement\n\n    const isClickInside = safeArray(elements)\n      .some((element) => unref(element) && checkIfElementChild(unref(element) as HTMLElement, clickTarget))\n\n    if (!isClickInside) { cb(clickTarget) }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}