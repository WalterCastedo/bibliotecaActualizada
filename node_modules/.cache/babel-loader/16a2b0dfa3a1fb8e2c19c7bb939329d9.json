{"ast":null,"code":"import { ref, computed } from \"vue\";\nimport { u as useDocument } from \"../../../composables/useDocument.js\";\n\nconst useAnchorSelector = props => {\n  const anchorRef = ref();\n  const document = useDocument();\n  const computedAnchorRef = computed({\n    set(v) {\n      anchorRef.value = v;\n    },\n\n    get() {\n      var _a, _b, _c, _d;\n\n      if (props.anchorSelector) {\n        return (_b = (_a = document.value) == null ? void 0 : _a.querySelector(props.anchorSelector)) != null ? _b : anchorRef.value;\n      } else if (props.innerAnchorSelector && anchorRef.value) {\n        return (_d = (_c = anchorRef.value) == null ? void 0 : _c.querySelector(props.innerAnchorSelector)) != null ? _d : anchorRef.value;\n      }\n\n      return anchorRef.value;\n    }\n\n  });\n  return {\n    anchorRef: computedAnchorRef\n  };\n};\n\nexport { useAnchorSelector as u };","map":{"version":3,"mappings":";;;AAGa,0BACXA,KAD+B,IAK5B;EACH,MAAMC,YAAYC,KAAlB;EACA,MAAMC,WAAWC,aAAjB;EAEA,MAAMC,oBAAoBC,SAAkC;IAC1DC,IAAKC,CAAL,EAAiC;MAC/BP,UAAUQ,KAAV,GAAkBD,CAAlB;IACF,CAH0D;;IAI1DE,MAAO;;;MACL,IAAIV,MAAMW,cAAV,EAA0B;QACxB,OAAO,qBAASF,KAAT,wBAAgBG,aAAhB,CAA2CZ,MAAMW,cAAjD,kBAAoEV,UAAUQ,KAArF;MACS,CAFX,MAEW,UAAMI,mBAAN,IAA6BZ,UAAUQ,KAAvC,EAA8C;QACvD,OAAO,sBAAUA,KAAV,wBAAiBG,aAAjB,CAA4CZ,MAAMa,mBAAlD,kBAA0EZ,UAAUQ,KAA3F;MACF;;MACA,OAAOR,UAAUQ,KAAjB;IACF;;EAX0D,CAAlC,CAA1B;EAcO;IACLR,WAAWI;EADN;AAGT,CA1Ba","names":["props","anchorRef","ref","document","useDocument","computedAnchorRef","computed","set","v","value","get","anchorSelector","querySelector","innerAnchorSelector"],"sources":["../../../../../../src/components/va-dropdown/hooks/useAnchorSelector.ts"],"sourcesContent":["import { computed, ref, watch } from 'vue'\nimport { useDocument } from './../../../composables'\n\nexport const useAnchorSelector = (\n  props: {\n    anchorSelector: string | undefined,\n    innerAnchorSelector: string | undefined,\n  },\n) => {\n  const anchorRef = ref<HTMLElement>()\n  const document = useDocument()\n\n  const computedAnchorRef = computed<HTMLElement | undefined>({\n    set (v: HTMLElement | undefined) {\n      anchorRef.value = v\n    },\n    get () {\n      if (props.anchorSelector) {\n        return document.value?.querySelector<HTMLElement>(props.anchorSelector) ?? anchorRef.value\n      } else if (props.innerAnchorSelector && anchorRef.value) {\n        return anchorRef.value?.querySelector<HTMLElement>(props.innerAnchorSelector) ?? anchorRef.value\n      }\n      return anchorRef.value\n    },\n  })\n\n  return {\n    anchorRef: computedAnchorRef,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}