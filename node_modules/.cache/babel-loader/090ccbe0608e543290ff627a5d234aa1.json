{"ast":null,"code":"import { onMounted, onBeforeUnmount } from \"vue\";\n\nconst useScroll = (props, element, handler) => {\n  const addScrollListener = () => {\n    var _a;\n\n    (_a = element.value) == null ? void 0 : _a.addEventListener(\"scroll\", handler.value, {\n      passive: true\n    });\n  };\n\n  const removeScrollListener = () => {\n    var _a;\n\n    (_a = element.value) == null ? void 0 : _a.removeEventListener(\"scroll\", handler.value);\n  };\n\n  onMounted(() => {\n    if (!element.value) {\n      return;\n    }\n\n    element.value.style.overflowY = \"scroll\";\n\n    if (props.reverse) {\n      element.value.scrollTop = element.value.scrollHeight;\n    }\n\n    addScrollListener();\n  });\n  onBeforeUnmount(removeScrollListener);\n  return {\n    addScrollListener,\n    removeScrollListener\n  };\n};\n\nexport { useScroll as u };","map":{"version":3,"mappings":";;AAQO,MAAMA,YAAY,CACvBC,KADuB,EAEvBC,OAFuB,EAGvBC,OAHuB,KAIpB;EACH,MAAMC,oBAAoB,MAAM;;;IACtB,2CAAOC,gBAAP,CACN,QADM,EAENF,QAAQG,KAFF,EAGN;MAAEC,SAAS;IAAX,CAHM;EAIR,CALF;;EAQA,MAAMC,uBAAuB,MAAM;;;IACjC,cAAQF,KAAR,wBAAeG,mBAAf,CACE,QADF,EAEEN,QAAQG,KAFV;EAGA,CAJF;;EAOAI,UAAU,MAAM;IACV,KAACR,QAAQI,KAAT,EAAgB;MAAE;IAAO;;IAErBJ,cAAMS,KAAN,CAAYC,SAAZ,GAAwB,QAAxB;;IAER,IAAIX,MAAMY,OAAV,EAAmB;MACTX,cAAMY,SAAN,GAAkBZ,QAAQI,KAAR,CAAcS,YAAhC;IACV;;IAEkBX;EACnB,CAVD;EAYAY,gBAAgBR,oBAAhB;EAEO;IACLJ,iBADK;IAELI;EAFK;AAIT,CAtCO","names":["useScroll","props","element","handler","addScrollListener","addEventListener","value","passive","removeScrollListener","removeEventListener","onMounted","style","overflowY","reverse","scrollTop","scrollHeight","onBeforeUnmount"],"sources":["../../../../../../src/components/va-infinite-scroll/hooks/useScroll.ts"],"sourcesContent":["import { Ref, onMounted, onBeforeUnmount } from 'vue'\n\ninterface ScrollTargetProps {\n  scrollTarget: HTMLElement | string | undefined;\n  disabled: boolean;\n  reverse: boolean;\n}\n\nexport const useScroll = (\n  props: ScrollTargetProps,\n  element: Ref<HTMLElement | undefined>,\n  handler: Ref<any>,\n) => {\n  const addScrollListener = () => {\n    element.value?.addEventListener(\n      'scroll',\n      handler.value,\n      { passive: true },\n    )\n  }\n\n  const removeScrollListener = () => {\n    element.value?.removeEventListener(\n      'scroll',\n      handler.value,\n    )\n  }\n\n  onMounted(() => {\n    if (!element.value) { return }\n\n    element.value.style.overflowY = 'scroll'\n\n    if (props.reverse) {\n      element.value.scrollTop = element.value.scrollHeight\n    }\n\n    addScrollListener()\n  })\n\n  onBeforeUnmount(removeScrollListener)\n\n  return {\n    addScrollListener,\n    removeScrollListener,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}