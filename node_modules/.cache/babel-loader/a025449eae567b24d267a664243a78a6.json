{"ast":null,"code":"import { defineComponent, computed, onMounted, resolveComponent, openBlock, createBlock, withCtx, createElementVNode, createElementBlock, Fragment, renderList, renderSlot, normalizeProps, guardReactiveProps, mergeProps } from \"vue\";\nimport { p as pick_1 } from \"../../../vendor.js\";\nimport { u as useArrayRefs } from \"../../composables/useArrayRefs.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from \"../../composables/useStateful.js\";\nimport { u as useValidationProps, b as useValidation } from \"../../composables/useValidation.js\";\nimport { u as useSelectableListProps, a as useSelectableList } from \"../../composables/useSelectableList.js\";\nimport { V as VaCheckbox } from \"../va-checkbox/index.js\";\nimport { V as VaRadio } from \"../va-radio/index.js\";\nimport { V as VaSwitch } from \"../va-switch/index.js\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper.js\";\nimport { V as VaMessageListWrapper } from \"../va-input/components/VaMessageListWrapper.js\";\n\nvar VaOptionList_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \":root{--va-option-list-line-height: 1.5}.va-option-list__list{line-height:var(--va-option-list-line-height)}\\n\")();\n\nconst _sfc_main = defineComponent({\n  name: \"VaOptionList\",\n  components: {\n    VaRadio,\n    VaCheckbox,\n    VaSwitch,\n    VaMessageListWrapper\n  },\n  emits: [...useStatefulEmits],\n  props: { ...useComponentPresetProp,\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useStatefulProps,\n    type: {\n      type: String,\n      default: \"checkbox\",\n      validator: type => [\"radio\", \"checkbox\", \"switch\"].includes(type)\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    readonly: {\n      type: Boolean,\n      default: false\n    },\n    defaultValue: {\n      type: [String, Number, Object, Array]\n    },\n    name: {\n      type: String,\n      default: \"\"\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    },\n    leftLabel: {\n      type: Boolean,\n      default: false\n    },\n    modelValue: {\n      type: [String, Number, Object, Array]\n    }\n  },\n\n  setup(props, {\n    emit\n  }) {\n    const {\n      valueComputed\n    } = useStateful(props, emit, \"modelValue\", {\n      defaultValue: props.defaultValue\n    });\n    const {\n      getValue,\n      getText,\n      getTrackBy,\n      getDisabled\n    } = useSelectableList(props);\n    const {\n      itemRefs,\n      setItemRef\n    } = useArrayRefs();\n    const isRadio = computed(() => props.type === \"radio\");\n    const selectedValue = computed({\n      get() {\n        const value = isRadio.value ? null : [];\n        return valueComputed.value || value;\n      },\n\n      set(value) {\n        if (props.readonly) {\n          return;\n        }\n\n        if (isRadio.value && !Array.isArray(value)) {\n          valueComputed.value = value ? getValue(value) : value;\n        } else {\n          valueComputed.value = Array.isArray(value) ? value.map(getValue) : [value ? getValue(value) : value];\n        }\n      }\n\n    });\n\n    const getKey = option => getTrackBy(option);\n\n    const isDisabled = option => props.disabled || getDisabled(option);\n\n    const reset = () => withoutValidation(() => {\n      valueComputed.value = null;\n      emit(\"clear\");\n      resetValidation();\n    });\n\n    const focus = () => {\n      const firstActiveEl = Array.isArray(itemRefs.value) && itemRefs.value.find(el => !el.disabled);\n\n      if (firstActiveEl && typeof firstActiveEl.focus === \"function\") {\n        firstActiveEl.focus();\n      }\n    };\n\n    const {\n      computedError,\n      computedErrorMessages,\n      withoutValidation,\n      resetValidation\n    } = useValidation(props, emit, {\n      reset,\n      focus\n    });\n    const computedProps = computed(() => pick_1(props, [\"name\", \"color\", \"readonly\", \"leftLabel\"]));\n    onMounted(() => {});\n    return {\n      selectedValue,\n      computedError,\n      computedErrorMessages,\n      getValue,\n      getText,\n      getKey,\n      isDisabled,\n      reset,\n      focus,\n      setItemRef,\n      computedProps\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  class: \"va-option-list__list\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_radio = resolveComponent(\"va-radio\");\n\n  const _component_va_checkbox = resolveComponent(\"va-checkbox\");\n\n  const _component_va_switch = resolveComponent(\"va-switch\");\n\n  const _component_VaMessageListWrapper = resolveComponent(\"VaMessageListWrapper\");\n\n  return openBlock(), createBlock(_component_VaMessageListWrapper, {\n    error: _ctx.computedError,\n    \"error-messages\": _ctx.computedErrorMessages,\n    \"error-count\": _ctx.$props.errorCount\n  }, {\n    default: withCtx(() => [createElementVNode(\"ul\", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$props.options, option => {\n      return openBlock(), createElementBlock(\"li\", {\n        key: _ctx.getKey(option)\n      }, [renderSlot(_ctx.$slots, \"default\", normalizeProps(guardReactiveProps({\n        option,\n        selectedValue: _ctx.selectedValue,\n        isDisabled: _ctx.isDisabled,\n        getText: _ctx.getText,\n        getValue: _ctx.getValue\n      })), () => [_ctx.$props.type === \"radio\" ? (openBlock(), createBlock(_component_va_radio, mergeProps({\n        key: 0,\n        ref_for: true,\n        ref: _ctx.setItemRef,\n        modelValue: _ctx.selectedValue,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.selectedValue = $event),\n        label: _ctx.getText(option),\n        disabled: _ctx.isDisabled(option),\n        option: _ctx.getValue(option)\n      }, _ctx.computedProps), null, 16, [\"modelValue\", \"label\", \"disabled\", \"option\"])) : _ctx.$props.type === \"checkbox\" ? (openBlock(), createBlock(_component_va_checkbox, mergeProps({\n        key: 1,\n        ref_for: true,\n        ref: _ctx.setItemRef,\n        modelValue: _ctx.selectedValue,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectedValue = $event),\n        label: _ctx.getText(option),\n        disabled: _ctx.isDisabled(option),\n        \"array-value\": _ctx.getValue(option)\n      }, _ctx.computedProps), null, 16, [\"modelValue\", \"label\", \"disabled\", \"array-value\"])) : (openBlock(), createBlock(_component_va_switch, mergeProps({\n        key: 2,\n        ref_for: true,\n        ref: _ctx.setItemRef,\n        modelValue: _ctx.selectedValue,\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.selectedValue = $event),\n        label: _ctx.getText(option),\n        disabled: _ctx.isDisabled(option),\n        \"array-value\": _ctx.getValue(option)\n      }, _ctx.computedProps), null, 16, [\"modelValue\", \"label\", \"disabled\", \"array-value\"]))])]);\n    }), 128))])]),\n    _: 3\n  }, 8, [\"error\", \"error-messages\", \"error-count\"]);\n}\n\nvar _VaOptionList = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaOptionList as _ };\nimport './VaOptionList.css';","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","VaRadio","VaCheckbox","VaSwitch","VaMessageListWrapper","emits","useStatefulEmits","props","useComponentPresetProp","useSelectableListProps","useValidationProps","useStatefulProps","type","String","default","validator","includes","disabled","Boolean","readonly","defaultValue","Number","Object","Array","color","leftLabel","modelValue","setup","emit","valueComputed","useStateful","getValue","getText","getTrackBy","getDisabled","useSelectableList","itemRefs","setItemRef","useArrayRefs","isRadio","computed","selectedValue","get","value","set","isArray","map","getKey","option","isDisabled","withoutValidation","resetValidation","focus","firstActiveEl","find","el","computedError","computedErrorMessages","useValidation","reset","pick","onMounted","computedProps","class","_createBlock","_component_VaMessageListWrapper","error","_ctx","$props","errorCount","_createElementVNode","_createElementBlock","_Fragment","_renderList","options","key","_renderSlot","_normalizeProps","_openBlock","_component_va_radio","ref_for","ref","label","_mergeProps","_component_va_checkbox","_component_va_switch"],"sources":["../../../../../src/components/va-option-list/VaOptionList.vue"],"sourcesContent":["<template>\n  <VaMessageListWrapper\n    :error=\"computedError\"\n    :error-messages=\"computedErrorMessages\"\n    :error-count=\"$props.errorCount\"\n  >\n    <ul class=\"va-option-list__list\">\n      <li\n        v-for=\"option in $props.options\"\n        :key=\"getKey(option)\"\n      >\n        <slot v-bind=\"{ option, selectedValue, isDisabled, getText, getValue }\">\n          <va-radio\n            v-if=\"$props.type === 'radio'\"\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :option=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n          <va-checkbox\n            v-else-if=\"$props.type === 'checkbox'\"\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :array-value=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n          <va-switch\n            v-else\n            :ref=\"setItemRef\"\n            v-model=\"selectedValue\"\n            :label=\"getText(option)\"\n            :disabled=\"isDisabled(option)\"\n            :array-value=\"getValue(option)\"\n            v-bind=\"computedProps\"\n          />\n        </slot>\n      </li>\n    </ul>\n  </VaMessageListWrapper>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, PropType, onMounted } from 'vue'\nimport pick from 'lodash/pick'\n\nimport { __DEV__ } from '../../utils/env'\nimport {\n  useComponentPresetProp,\n  useSelectableList, useSelectableListProps, SelectableOption,\n  useValidation, useValidationProps,\n  useStateful, useStatefulProps, useStatefulEmits,\n  useArrayRefs,\n} from '../../composables'\n\nimport { VaMessageListWrapper } from '../va-input'\nimport { VaCheckbox } from '../va-checkbox'\nimport { VaRadio } from '../va-radio'\nimport { VaSwitch } from '../va-switch'\n\ntype OptionListValue = SelectableOption | SelectableOption[] | null\n\nexport default defineComponent({\n  name: 'VaOptionList',\n  components: {\n    VaRadio,\n    VaCheckbox,\n    VaSwitch,\n    VaMessageListWrapper,\n  },\n  emits: [...useStatefulEmits],\n  props: {\n    ...useComponentPresetProp,\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useStatefulProps,\n    type: {\n      type: String as PropType<'radio' | 'checkbox' | 'switch'>,\n      default: 'checkbox',\n      validator: (type: any) => ['radio', 'checkbox', 'switch'].includes(type),\n    },\n    disabled: ({ type: Boolean, default: false }),\n    readonly: ({ type: Boolean, default: false }),\n    defaultValue: ({ type: [String, Number, Object, Array] as PropType<OptionListValue | null> }),\n    name: ({ type: String, default: '' }),\n    color: ({ type: String, default: 'primary' }),\n    leftLabel: ({ type: Boolean, default: false }),\n    modelValue: ({ type: [String, Number, Object, Array] as PropType<OptionListValue | null> }),\n  },\n\n  setup (props, { emit }) {\n    const { valueComputed } = useStateful(props, emit, 'modelValue', { defaultValue: props.defaultValue })\n\n    const { getValue, getText, getTrackBy, getDisabled } = useSelectableList(props)\n\n    const { itemRefs, setItemRef } = useArrayRefs()\n\n    const isRadio = computed(() => props.type === 'radio')\n\n    const selectedValue = computed({\n      get () {\n        const value = isRadio.value ? null : []\n\n        return valueComputed.value || value as OptionListValue\n      },\n      set (value: OptionListValue) {\n        if (props.readonly) { return }\n\n        if (isRadio.value && !Array.isArray(value)) {\n          valueComputed.value = value ? getValue(value) : value\n        } else {\n          valueComputed.value = Array.isArray(value)\n            ? value.map(getValue)\n            : [value ? getValue(value) : value]\n        }\n      },\n    })\n\n    const getKey = (option: SelectableOption) => getTrackBy(option)\n\n    const isDisabled = (option: SelectableOption) => props.disabled || getDisabled(option)\n\n    const reset = () => withoutValidation(() => {\n      valueComputed.value = null\n      emit('clear')\n      resetValidation()\n    })\n\n    const focus = () => {\n      const firstActiveEl = Array.isArray(itemRefs.value) && itemRefs.value.find(el => !(el as HTMLInputElement).disabled)\n\n      if (firstActiveEl && typeof firstActiveEl.focus === 'function') {\n        firstActiveEl.focus()\n      }\n    }\n\n    const {\n      computedError,\n      computedErrorMessages,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus })\n\n    const computedProps = computed(() => pick(props, ['name', 'color', 'readonly', 'leftLabel']))\n\n    onMounted(() => {\n      if (__DEV__ && props.type !== 'radio' && !Array.isArray(props.modelValue)) {\n        console.warn(`Prop 'modelValue = ${props.modelValue}' has not a proper type!\\n For component property 'type = ${props.type}' it must be of type 'array'.`)\n      }\n    })\n\n    return {\n      selectedValue,\n      computedError,\n      computedErrorMessages,\n      getValue,\n      getText,\n      getKey,\n      isDisabled,\n      reset,\n      focus,\n      setItemRef,\n      computedProps,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import 'variables';\n\n.va-option-list {\n  &__list {\n    line-height: var(--va-option-list-line-height);\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}