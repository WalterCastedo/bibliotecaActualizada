{"ast":null,"code":"import { defineComponent, computed, openBlock, createElementBlock, mergeProps, createElementVNode, normalizeStyle, renderSlot, createCommentVNode } from \"vue\";\nimport { c as clamp_1 } from \"../../../vendor.js\";\nimport { u as useColors } from \"../../composables/useColors.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { u as useSizeProps, a as useSize } from \"../../composables/useSize.js\";\nimport { u as useTranslation } from \"../../composables/useTranslation.js\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper.js\";\n\nvar VaProgressCircle_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \":root{--va-progress-circle-position: relative;--va-progress-circle-overflow: hidden;--va-progress-circle-width: 80%;--va-progress-circle-height: 80%;--va-progress-circle-overlay-transition: all ease 2s;--va-progress-circle-font-size: .75rem}.va-progress-circle{position:var(--va-progress-circle-position);overflow:var(--va-progress-circle-overflow);font-family:var(--va-font-family)}.va-progress-circle__wrapper{position:absolute;top:0;left:0;bottom:0;right:0;margin:auto;transform:rotate(-90deg);width:var(--va-progress-circle-width);height:var(--va-progress-circle-height);display:flex;justify-content:center;align-items:center}.va-progress-circle--indeterminate .va-progress-circle__wrapper{-webkit-animation:va-progress-circle__wrapper--indeterminate 2s linear infinite;animation:va-progress-circle__wrapper--indeterminate 2s linear infinite}.va-progress-circle__overlay{transition:var(--va-progress-circle-overlay-transition)}.va-progress-circle--indeterminate .va-progress-circle__overlay{-webkit-animation:va-progress-circle__overlay--indeterminate 2s ease-in-out infinite;animation:va-progress-circle__overlay--indeterminate 2s ease-in-out infinite}.va-progress-circle__info{font-size:var(--va-progress-circle-font-size);position:absolute;left:50%;top:50%;transform:translate(-50%,-50%)}@-webkit-keyframes va-progress-circle__wrapper--indeterminate{to{transform:rotate(270deg)}}@keyframes va-progress-circle__wrapper--indeterminate{to{transform:rotate(270deg)}}@-webkit-keyframes va-progress-circle__overlay--indeterminate{0%{stroke-dasharray:1,125;stroke-dashoffset:0}50%{stroke-dasharray:125,125;stroke-dashoffset:-65px}to{stroke-dasharray:125,125;stroke-dashoffset:-125px}}@keyframes va-progress-circle__overlay--indeterminate{0%{stroke-dasharray:1,125;stroke-dashoffset:0}50%{stroke-dasharray:125,125;stroke-dashoffset:-65px}to{stroke-dasharray:125,125;stroke-dashoffset:-125px}}\\n\")();\n\nconst _sfc_main = defineComponent({\n  name: \"VaProgressCircle\",\n  props: { ...useSizeProps,\n    ...useComponentPresetProp,\n    modelValue: {\n      type: Number,\n      default: 0\n    },\n    indeterminate: {\n      type: Boolean,\n      default: false\n    },\n    thickness: {\n      type: Number,\n      default: 0.06\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    }\n  },\n\n  setup(props) {\n    const {\n      getColor\n    } = useColors();\n    const {\n      sizeComputed\n    } = useSize(props);\n    const cappedThickness = computed(() => clamp_1(props.thickness, 0, 1) / 2 * 100);\n    const radius = computed(() => 20 - 20 * cappedThickness.value / 100);\n    const dasharray = computed(() => 2 * Math.PI * radius.value);\n    const dashoffset = computed(() => dasharray.value * (1 - clamp_1(props.modelValue, 0, 100) / 100));\n    const colorComputed = computed(() => getColor(props.color, void 0, true));\n    const {\n      t\n    } = useTranslation();\n    return {\n      infoStyle: computed(() => ({\n        color: colorComputed.value\n      })),\n      rootStyle: computed(() => ({\n        width: sizeComputed.value,\n        height: sizeComputed.value\n      })),\n      rootClass: computed(() => ({\n        \"va-progress-circle--indeterminate\": props.indeterminate\n      })),\n      ariaAttributesComputed: computed(() => ({\n        role: \"progressbar\",\n        ariaLabel: t(\"progressState\"),\n        ariaValuenow: !props.indeterminate ? props.modelValue : void 0\n      })),\n      colorComputed,\n      radius,\n      dasharray,\n      dashoffset,\n      cappedThickness\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  class: \"va-progress-circle__wrapper\",\n  viewBox: \"0 0 40 40\"\n};\nconst _hoisted_2 = [\"r\", \"stroke\", \"stroke-width\", \"stroke-dasharray\", \"stroke-dashoffset\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", mergeProps({\n    class: [\"va-progress-circle\", _ctx.rootClass],\n    style: _ctx.rootStyle\n  }, _ctx.ariaAttributesComputed), [(openBlock(), createElementBlock(\"svg\", _hoisted_1, [createElementVNode(\"circle\", {\n    class: \"va-progress-circle__overlay\",\n    cx: \"50%\",\n    cy: \"50%\",\n    r: _ctx.radius,\n    fill: \"none\",\n    stroke: _ctx.colorComputed,\n    \"stroke-width\": _ctx.cappedThickness + \"%\",\n    \"stroke-dasharray\": _ctx.dasharray,\n    \"stroke-dashoffset\": _ctx.dashoffset\n  }, null, 8, _hoisted_2)])), _ctx.$slots.default ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    style: normalizeStyle(_ctx.infoStyle),\n    class: \"va-progress-circle__info\"\n  }, [renderSlot(_ctx.$slots, \"default\")], 4)) : createCommentVNode(\"\", true)], 16);\n}\n\nvar _VaProgressCircle = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaProgressCircle as _ };\nimport './VaProgressCircle.css';","map":{"version":3,"mappings":";;;;;;;;;;AAuCA,MAAKA,YAAaC,gBAAa;EAC7BC,MAAM,kBADuB;EAG7BC,OAAO,EACL,GAAGC,YADE;IAEL,GAAGC,sBAFE;IAGLC,YAAY;MAAEC,MAAMC,MAAR;MAAgBC,SAAS;IAAzB,CAHP;IAILC,eAAe;MAAEH,MAAMI,OAAR;MAAiBF,SAAS;IAA1B,CAJV;IAKLG,WAAW;MAAEL,MAAMC,MAAR;MAAgBC,SAAS;IAAzB,CALN;IAMLI,OAAO;MAAEN,MAAMO,MAAR;MAAgBL,SAAS;IAAzB;EANF,CAHsB;;EAY7BM,MAAOZ,KAAP,EAAc;IACN;MAAEa;IAAF,IAAeC,WAAf;IACA;MAAEC;IAAF,IAAmBC,QAAQhB,KAAR,CAAnB;IAEA,wBAAkBiB,SAAS,MAAMC,QAAMlB,MAAMS,SAAZS,EAAuB,CAAvBA,EAA0B,CAA1BA,IAA+B,CAA/BA,GAAmC,GAAlD,CAAlB;IAEN,MAAMC,SAASF,SAAS,MAAM,KAAM,KAAKG,gBAAgBC,KAArB,GAA6B,GAAlD,CAAf;IACA,MAAMC,YAAYL,SAAS,MAAM,IAAIM,KAAKC,EAAT,GAAcL,OAAOE,KAApC,CAAlB;IACA,MAAMI,aAAaR,SAAS,MAAMK,UAAUD,KAAV,IAAmB,IAAIH,QAAMlB,MAAMG,UAAZe,EAAwB,CAAxBA,EAA2B,GAA3BA,IAAkC,GAAzD,CAAf,CAAnB;IACM,sBAAgBD,SAAS,MAAMJ,SAASb,MAAMU,KAAf,EAAsB,MAAtB,EAAiC,IAAjC,CAAf,CAAhB;IAEA;MAAEgB;IAAF,IAAQC,gBAAR;IAEC;MACLC,WAAWX,SAAS;QAASP,OAAOmB,cAAcR;MAA9B,EAAT,CADN;MAELS,WAAWb,SAAS,OAAO;QACzBc,OAAOhB,aAAaM,KADK;QAEzBW,QAAQjB,aAAaM;MAFI,CAAP,CAAT,CAFN;MAMLY,WAAWhB,SAAS,OAAO;QACzB,qCAAqCjB,MAAMO;MADlB,CAAP,CAAT,CANN;MASL2B,wBAAwBjB,SAAS,OAAO;QACtCkB,MAAM,aADgC;QAEtCC,WAAWV,EAAE,eAAF,CAF2B;QAGtCW,cAAc,CAACrC,MAAMO,aAAP,GAAuBP,MAAMG,UAA7B,GAA0C;MAHlB,CAAP,CAAT,CATnB;MAeL0B,aAfK;MAgBLV,MAhBK;MAiBLG,SAjBK;MAkBLG,UAlBK;MAmBLL;IAnBK;EAqBT;;AA9C6B,CAAb,CAAlB;;;EA/BMkB,OAAM;EACNC,SAAQ;;;;;EARZ,uCA6BM,KA7BNC,aA6BM;IA5BJF,OAAK,CAAC,oBAAD,EAEGG,KAASR,SAFZ,CA4BD;IA3BHS,OAAOD;EA2BJ,CA7BNE,EAIUF,KAAsBP,sBAJhCS,GAIgC,EAE9BC,gCAeM,KAfNJ,cAeM,CAXJK,mBAUE,QAVFA,EAUE;IATAP,OAAM,6BASN;IARAQ,IAAG,KAQH;IAPAC,IAAG,KAOH;IANCC,GAAGP,WAMJ;IALAQ,MAAK,MAKL;IAJCC,QAAQT,kBAIT;IAHC,gBAAcA,KAAerB,eAAf,GAAe,GAG9B;IAFC,oBAAkBqB,cAEnB;IADC,qBAAmBA;EACpB,CAVFI,EASsB,IATtBA,EASsB,CATtBA,EASsBM,UATtBN,CAWI,CAfNL,CAF8B,GAmBtBC,YAAOnC,OAAP,IAAO8C,aADfZ,mBAMM,KANNA,EAMM;IAAAa;IAJHX,OAAKY,eAAEb,KAASb,SAAX0B,CAIF;IAHJhB,OAAM;EAGF,CANNE,EAGQ,CAENe,WAAQd,WAARc,EAAQ,SAARA,CAFM,CAHRf,EAKU,CALVA,CACQ,IAIEgB,4BAvBoB,CAJhChB,EA2BY,EA3BZA","names":["_sfc_main","defineComponent","name","props","useSizeProps","useComponentPresetProp","modelValue","type","Number","default","indeterminate","Boolean","thickness","color","String","setup","getColor","useColors","sizeComputed","useSize","computed","clamp","radius","cappedThickness","value","dasharray","Math","PI","dashoffset","t","useTranslation","infoStyle","colorComputed","rootStyle","width","height","rootClass","ariaAttributesComputed","role","ariaLabel","ariaValuenow","class","viewBox","_createElementBlock","_ctx","style","_mergeProps","_openBlock","_createElementVNode","cx","cy","r","fill","stroke","_hoisted_2","openBlock","key","_normalizeStyle","_renderSlot","_createCommentVNode"],"sources":["../../../../../src/components/va-progress-circle/VaProgressCircle.vue"],"sourcesContent":["<template>\n  <div\n    class=\"va-progress-circle\"\n    :style=\"rootStyle\"\n    :class=\"rootClass\"\n    v-bind=\"ariaAttributesComputed\"\n  >\n    <svg\n      class=\"va-progress-circle__wrapper\"\n      viewBox=\"0 0 40 40\"\n    >\n      <circle\n        class=\"va-progress-circle__overlay\"\n        cx=\"50%\"\n        cy=\"50%\"\n        :r=\"radius\"\n        fill=\"none\"\n        :stroke=\"colorComputed\"\n        :stroke-width=\"cappedThickness + '%'\"\n        :stroke-dasharray=\"dasharray\"\n        :stroke-dashoffset=\"dashoffset\"\n      />\n    </svg>\n    <div\n      v-if=\"$slots.default\"\n      :style=\"infoStyle\"\n      class=\"va-progress-circle__info\"\n    >\n      <slot />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent } from 'vue'\nimport clamp from 'lodash/clamp.js'\n\nimport { useComponentPresetProp, useColors, useSize, useSizeProps, useTranslation } from '../../composables'\n\nexport default defineComponent({\n  name: 'VaProgressCircle',\n\n  props: {\n    ...useSizeProps,\n    ...useComponentPresetProp,\n    modelValue: { type: Number, default: 0 },\n    indeterminate: { type: Boolean, default: false },\n    thickness: { type: Number, default: 0.06 },\n    color: { type: String, default: 'primary' },\n  },\n\n  setup (props) {\n    const { getColor } = useColors()\n    const { sizeComputed } = useSize(props)\n\n    const cappedThickness = computed(() => clamp(props.thickness, 0, 1) / 2 * 100)\n\n    const radius = computed(() => 20 - (20 * cappedThickness.value / 100))\n    const dasharray = computed(() => 2 * Math.PI * radius.value)\n    const dashoffset = computed(() => dasharray.value * (1 - clamp(props.modelValue, 0, 100) / 100))\n    const colorComputed = computed(() => getColor(props.color, undefined, true))\n\n    const { t } = useTranslation()\n\n    return {\n      infoStyle: computed(() => ({ color: colorComputed.value })),\n      rootStyle: computed(() => ({\n        width: sizeComputed.value,\n        height: sizeComputed.value,\n      })),\n      rootClass: computed(() => ({\n        'va-progress-circle--indeterminate': props.indeterminate,\n      })),\n      ariaAttributesComputed: computed(() => ({\n        role: 'progressbar',\n        ariaLabel: t('progressState'),\n        ariaValuenow: !props.indeterminate ? props.modelValue : undefined,\n      })),\n\n      colorComputed,\n      radius,\n      dasharray,\n      dashoffset,\n      cappedThickness,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-progress-circle {\n  position: var(--va-progress-circle-position);\n  overflow: var(--va-progress-circle-overflow); // Prevents resizing container back and forth.\n  font-family: var(--va-font-family);\n\n  &__wrapper {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n    margin: auto;\n    transform: rotate(-90deg);\n    width: var(--va-progress-circle-width);\n    height: var(--va-progress-circle-height);\n\n    @include flex-center();\n\n    @at-root {\n      .va-progress-circle--indeterminate & {\n        animation: va-progress-circle__wrapper--indeterminate 2s linear infinite;\n      }\n    }\n  }\n\n  &__overlay {\n    transition: var(--va-progress-circle-overlay-transition);\n\n    @at-root {\n      .va-progress-circle--indeterminate & {\n        animation: va-progress-circle__overlay--indeterminate 2s ease-in-out infinite;\n      }\n    }\n  }\n\n  &__info {\n    font-size: var(--va-progress-circle-font-size);\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n  }\n}\n\n@keyframes va-progress-circle__wrapper--indeterminate {\n  100% {\n    transform: rotate(270deg);\n  }\n}\n\n@keyframes va-progress-circle__overlay--indeterminate {\n  0% {\n    stroke-dasharray: 1, 125;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 125, 125;\n    stroke-dashoffset: -65px;\n  }\n\n  100% {\n    stroke-dasharray: 125, 125;\n    stroke-dashoffset: -125px;\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}