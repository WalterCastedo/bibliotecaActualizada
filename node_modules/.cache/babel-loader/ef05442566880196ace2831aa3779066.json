{"ast":null,"code":"import { u as usePlugin } from \"../utils/use-plugin.js\";\nimport { d as defineVuesticPlugin } from \"../utils/define-vuestic-plugin.js\";\nimport { G as GlobalConfigPlugin } from \"../../global-config/plugin/index.js\";\nimport { C as ColorConfigPlugin } from \"../../color/plugin/index.js\";\nimport { B as BreakpointConfigPlugin } from \"../../breakpoint/plugin/index.js\";\nimport { V as VaToastPlugin } from \"../../../components/va-toast/plugin/index.js\";\nimport { V as VaDropdownPlugin } from \"../../../components/va-dropdown/plugin/index.js\";\nimport { V as VaModalPlugin } from \"../../../components/va-modal/plugin/index.js\";\nimport { C as CachePlugin } from \"../../cache/plugin/index.js\";\nimport { v as vuesticComponents } from \"../components.js\";\nimport { s as setCurrentApp } from \"../../current-app.js\";\nconst createVuestic = defineVuesticPlugin((options = {}) => ({\n  install(app) {\n    const {\n      config\n    } = options;\n    setCurrentApp(app);\n    Object.entries(vuesticComponents).forEach(([name, component]) => {\n      app.component(name, component);\n    });\n    usePlugin(app, GlobalConfigPlugin(config));\n    usePlugin(app, CachePlugin);\n    usePlugin(app, ColorConfigPlugin(config));\n    usePlugin(app, BreakpointConfigPlugin);\n    usePlugin(app, VaDropdownPlugin);\n    usePlugin(app, VaToastPlugin);\n    usePlugin(app, VaModalPlugin);\n    setCurrentApp(null);\n  }\n\n}));\nexport { createVuestic as c };","map":{"version":3,"mappings":";;;;;;;;;;;AAkBO,MAAMA,gBAAgBC,oBAAoB,CAACC,UAA4C,EAA7C,MAAqD;EACpGC,QAASC,GAAT,EAAc;IACZ,MAAM;MAAEC;IAAF,IAAaH,OAAnB;IAEAI,cAAcF,GAAd;IAEAG,OAAOC,OAAP,CAAeC,iBAAf,EAAkCC,OAAlC,CAA0C,CAAC,CAACC,IAAD,EAAOC,SAAP,CAAD,KAAuB;MAC3DR,cAAUO,IAAV,EAAgBC,SAAhB;IACL,CAFD;IAKUC,eAAKC,mBAAmBT,MAAnB,CAAL;IACVQ,UAAUT,GAAV,EAAeW,WAAf;IACUF,eAAKG,kBAAkBX,MAAlB,CAAL;IAEVQ,UAAUT,GAAV,EAAea,sBAAf;IACAJ,UAAUT,GAAV,EAAec,gBAAf;IACAL,UAAUT,GAAV,EAAee,aAAf;IACAN,UAAUT,GAAV,EAAegB,aAAf;IAEAd,cAAc,IAAd;EACF;;AArBoG,CAArD,CAApB,CAAtB","names":["createVuestic","defineVuesticPlugin","options","install","app","config","setCurrentApp","Object","entries","vuesticComponents","forEach","name","component","usePlugin","GlobalConfigPlugin","CachePlugin","ColorConfigPlugin","BreakpointConfigPlugin","VaDropdownPlugin","VaToastPlugin","VaModalPlugin"],"sources":["../../../../../../src/services/vue-plugin/create-vuestic/create-vuestic.ts"],"sourcesContent":["import type { PartialGlobalConfig } from '../../global-config/types'\nimport { defineVuesticPlugin, usePlugin } from '../utils'\nimport { GlobalConfigPlugin, VaDropdownPlugin, VaToastPlugin, VaModalPlugin, ColorConfigPlugin, BreakpointConfigPlugin, CachePlugin } from '../plugins'\nimport * as vuesticComponents from '../components'\nimport type { VuesticComponents } from '../types/components'\nimport { setCurrentApp } from '../../current-app'\n\n// Declare all components globally\ndeclare module 'vue' {\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  export interface GlobalComponents extends VuesticComponents {}\n}\n\n/**\n * Globally register all vuestic components and plugins\n * @notice using this method will bundle all vuestic components.\n * Use `createVuesticEssential` if you want tree shaking to work.\n */\nexport const createVuestic = defineVuesticPlugin((options: { config?: PartialGlobalConfig } = {}) => ({\n  install (app) {\n    const { config } = options\n\n    setCurrentApp(app)\n\n    Object.entries(vuesticComponents).forEach(([name, component]) => {\n      app.component(name, component)\n    })\n\n    // These plugins have dependant plugins, so have to be registered first.\n    usePlugin(app, GlobalConfigPlugin(config))\n    usePlugin(app, CachePlugin)\n    usePlugin(app, ColorConfigPlugin(config))\n\n    usePlugin(app, BreakpointConfigPlugin)\n    usePlugin(app, VaDropdownPlugin)\n    usePlugin(app, VaToastPlugin)\n    usePlugin(app, VaModalPlugin)\n\n    setCurrentApp(null)\n  },\n}))\n"]},"metadata":{},"sourceType":"module"}