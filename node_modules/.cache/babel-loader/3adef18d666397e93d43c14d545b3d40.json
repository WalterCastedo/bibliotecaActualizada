{"ast":null,"code":"import { ref } from \"vue\";\nimport { i as isDate_1 } from \"../../../../vendor.js\";\n\nconst defaultParseDateFunction = text => new Date(Date.parse(text));\n\nconst isValidDate = d => isDate_1(d) && !isNaN(d.getTime());\n\nconst useDateParser = props => {\n  const isMultipleDates = text => text.includes(props.delimiter);\n\n  const isRange = text => text.includes(props.rangeDelimiter);\n\n  const isValid = ref(true);\n\n  const parseDate = text => {\n    const splitDate = text.split(\".\");\n    const valueToParse = (splitDate == null ? void 0 : splitDate.length) === 3 ? splitDate.reverse().join(\"-\") : text;\n    const date = (props.parseDate || defaultParseDateFunction)(valueToParse);\n    isValid.value = isValidDate(date);\n    return date;\n  };\n\n  const parseDateInputValue = text => {\n    isValid.value = true;\n\n    if (props.parse) {\n      return props.parse(text, isValid);\n    }\n\n    if (isMultipleDates(text)) {\n      return text.split(props.delimiter).map(parseDate);\n    }\n\n    if (isRange(text)) {\n      const [start, end] = text.split(props.rangeDelimiter).map(parseDate);\n      return {\n        start,\n        end\n      };\n    }\n\n    return parseDate(text);\n  };\n\n  return {\n    parseDateInputValue,\n    isValid\n  };\n};\n\nexport { defaultParseDateFunction as d, useDateParser as u };","map":{"version":3,"mappings":";;;AAIa,iCAA4BA,IAAD,IAAkB,IAAIC,IAAJ,CAASA,KAAKC,KAAL,CAAWF,IAAX,CAAT,CAA7C;;AAEb,MAAMG,cAAeC,CAAD,IAAaC,SAAOD,CAAPC,KAAa,CAACC,MAAMF,EAAEG,OAAF,EAAN,CAA/C;;AAEa,sBAAiBC,KAAD,IAKvB;EACJ,MAAMC,kBAAmBT,IAAD,IAAkBA,KAAKU,QAAL,CAAcF,MAAMG,SAApB,CAA1C;;EACA,MAAMC,UAAWZ,IAAD,IAAkBA,KAAKU,QAAL,CAAcF,MAAMK,cAApB,CAAlC;;EAEM,gBAAUC,IAAI,IAAJ,CAAV;;EAEA,kBAAad,IAAD,IAAkB;IAK5B,kBAAYA,KAAKe,KAAL,CAAW,GAAX,CAAZ;IACA,qBAAe,wCAAWC,MAAX,MAAsB,CAAtB,GAA0BC,UAAUC,OAAV,GAAoBC,IAApB,CAAyB,GAAzB,CAA1B,GAA0DnB,IAAzE;IAEN,MAAMoB,OAAQ,OAAMC,SAAN,IAAmBC,wBAAnB,EAA6CC,YAA7C,CAAd;IAEQC,gBAAQrB,YAAYiB,IAAZ,CAAR;IAED;EAAA,CAZH;;EAeA,4BAAuBpB,IAAD,IAAkB;IAC5CwB,QAAQC,KAAR,GAAgB,IAAhB;;IAEA,IAAIjB,MAAMN,KAAV,EAAiB;MACR,aAAMA,KAAN,CAAYF,IAAZ,EAAkBwB,OAAlB;IACT;;IAEI,oBAAgBxB,IAAhB,GAAuB;MACzB,OAAOA,KAAKe,KAAL,CAAWP,MAAMG,SAAjB,EAA4Be,GAA5B,CAAgCL,SAAhC,CAAP;IACF;;IAEI,YAAQrB,IAAR,GAAe;MACX,OAAC2B,KAAD,EAAQC,GAAR,IAAe5B,KAAKe,KAAL,CAAWP,MAAMK,cAAjB,EAAiCa,GAAjC,CAAqCL,SAArC,CAAf;MACC;QAAEM,KAAF;QAASC;MAAT;IACT;;IAEA,OAAOP,UAAUrB,IAAV,CAAP;EAAqB,CAhBjB;;EAmBC;IACL6B,mBADK;IAELL;EAFK;AAIT,CAjDa","names":["text","Date","parse","isValidDate","d","isDate","isNaN","getTime","props","isMultipleDates","includes","delimiter","isRange","rangeDelimiter","ref","split","length","splitDate","reverse","join","date","parseDate","defaultParseDateFunction","valueToParse","isValid","value","map","start","end","parseDateInputValue"],"sources":["../../../../../../src/components/va-date-input/hooks/input-text-parser.ts"],"sourcesContent":["import { DateInputRange, DateInputValue } from './../types'\nimport { Ref, ref } from 'vue'\nimport isDate from 'lodash/isDate.js'\n\nexport const defaultParseDateFunction = (text: string) => new Date(Date.parse(text))\n\nconst isValidDate = (d: Date) => isDate(d) && !isNaN(d.getTime())\n\nexport const useDateParser = (props: {\n  parse?: (input: string, isValidRef?: Ref<boolean>) => DateInputValue,\n  parseDate?: (input: string) => Date,\n  delimiter: string,\n  rangeDelimiter: string,\n}) => {\n  const isMultipleDates = (text: string) => text.includes(props.delimiter)\n  const isRange = (text: string) => text.includes(props.rangeDelimiter)\n\n  const isValid = ref(true)\n\n  const parseDate = (text: string) => {\n    /**\n     * for american locales 01.02.2000 will be parsed as 02 Jan 2000 (not 01 Feb 2000)\n     * iso 8601 (YYYY-MM-DD) solves this problem\n     */\n    const splitDate = text.split('.')\n    const valueToParse = splitDate?.length === 3 ? splitDate.reverse().join('-') : text\n\n    const date = (props.parseDate || defaultParseDateFunction)(valueToParse)\n\n    isValid.value = isValidDate(date)\n\n    return date\n  }\n\n  const parseDateInputValue = (text: string) => {\n    isValid.value = true\n\n    if (props.parse) {\n      return props.parse(text, isValid)\n    }\n\n    if (isMultipleDates(text)) {\n      return text.split(props.delimiter).map(parseDate)\n    }\n\n    if (isRange(text)) {\n      const [start, end] = text.split(props.rangeDelimiter).map(parseDate)\n      return { start, end }\n    }\n\n    return parseDate(text)\n  }\n\n  return {\n    parseDateInputValue,\n    isValid,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}