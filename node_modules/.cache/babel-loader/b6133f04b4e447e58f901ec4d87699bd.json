{"ast":null,"code":"import { ref, computed } from \"vue\";\nimport { i as isDate_1 } from \"../../../../vendor.js\";\nconst JANUARY_MONTH_INDEX = 0;\nconst DECEMBER_MONTH_INDEX = 11;\n\nconst addMonth = view => {\n  if (view.month === DECEMBER_MONTH_INDEX) {\n    return { ...view,\n      year: view.year + 1,\n      month: JANUARY_MONTH_INDEX\n    };\n  } else {\n    return { ...view,\n      month: view.month + 1\n    };\n  }\n};\n\nconst subMonth = view => {\n  if (view.month === JANUARY_MONTH_INDEX) {\n    return { ...view,\n      year: view.year - 1,\n      month: DECEMBER_MONTH_INDEX\n    };\n  } else {\n    return { ...view,\n      month: view.month - 1\n    };\n  }\n};\n\nconst getDefaultDate = modelValue => {\n  if (isDate_1(modelValue)) {\n    return modelValue;\n  }\n\n  if (isDate_1(modelValue == null ? void 0 : modelValue.start)) {\n    return modelValue.start;\n  }\n\n  if (Array.isArray(modelValue) && isDate_1(modelValue[0])) {\n    return modelValue[0];\n  }\n\n  return new Date();\n};\n\nconst useView = (props, emit, defaultOverride) => {\n  const defaultDate = getDefaultDate(props.modelValue);\n  const defaultView = {\n    type: \"day\",\n    year: defaultDate.getFullYear(),\n    month: defaultDate.getMonth(),\n    ...defaultOverride\n  };\n  const statefulView = ref(defaultView);\n  const syncView = computed({\n    get() {\n      return { ...statefulView.value,\n        ...props.view\n      };\n    },\n\n    set(view) {\n      statefulView.value = view;\n      emit(\"update:view\", view);\n    }\n\n  });\n\n  const next = () => {\n    if (syncView.value.type === \"day\") {\n      syncView.value = addMonth(syncView.value);\n    } else if (syncView.value.type === \"month\") {\n      syncView.value = { ...syncView.value,\n        year: syncView.value.year + 1\n      };\n    }\n  };\n\n  const prev = () => {\n    if (syncView.value.type === \"day\") {\n      syncView.value = subMonth(syncView.value);\n    } else if (syncView.value.type === \"month\") {\n      syncView.value = { ...syncView.value,\n        year: syncView.value.year - 1\n      };\n    }\n  };\n\n  return {\n    syncView,\n    next,\n    prev\n  };\n};\n\nexport { useView as u };","map":{"version":3,"mappings":";;AAKA,MAAMA,sBAAsB,CAA5B;AACA,MAAMC,uBAAuB,EAA7B;;AAEA,MAAMC,WAAYC,IAAD,IAA0B;EACrC,SAAKC,KAAL,KAAeH,oBAAf,EAAqC;IAChC,SAAE,GAAGE,IAAL;MAAWE,MAAMF,KAAKE,IAAL,GAAY,CAA7B;MAAgCD,OAAOJ;IAAvC;EAA2D,CADhE,MAEG;IACL,OAAO,EAAE,GAAGG,IAAL;MAAWC,OAAOD,KAAKC,KAAL,GAAa;IAA/B,CAAP;EACF;AACF,CANA;;AAQA,MAAME,WAAYH,IAAD,IAA0B;EACrC,SAAKC,KAAL,KAAeJ,mBAAf,EAAoC;IAC/B,SAAE,GAAGG,IAAL;MAAWE,MAAMF,KAAKE,IAAL,GAAY,CAA7B;MAAgCD,OAAOH;IAAvC;EAA4D,CADjE,MAEG;IACL,OAAO,EAAE,GAAGE,IAAL;MAAWC,OAAOD,KAAKC,KAAL,GAAa;IAA/B,CAAP;EACF;AACF,CANA;;AAQA,MAAMG,iBAAkBC,UAAD,IAA4C;EAC7D,aAAOA,UAAPC,GAAoB;IAAS;EAAW;;EACxC,aAAQD,yCAAoBE,KAA5BD,GAAoC;IAAE,OAAQD,WAAmBE,KAA3B;EAAiC;;EAC3E,IAAIC,MAAMC,OAAN,CAAcJ,UAAd,KAA6BC,SAAOD,WAAW,CAAX,CAAPC,CAAjC,EAAwD;IAAE,OAAOD,WAAW,CAAX,CAAP;EAAqB;;EAE/E,OAAO,IAAIK,IAAJ,EAAP;AACF,CANA;;AAQO,MAAMC,UAAU,CACrBC,KADqB,EAErBC,IAFqB,EAGrBC,eAHqB,KAIlB;EACG,oBAAcV,eAAeQ,MAAMP,UAArB,CAAd;EACN,MAAMU,cAA8B;IAClCC,MAAM,KAD4B;IAElCd,MAAMe,YAAYC,WAAZ,EAF4B;IAGlCjB,OAAOgB,YAAYE,QAAZ,EAH2B;IAIlC,GAAGL;EAJ+B,CAApC;EAOM,qBAAeM,IAAIL,WAAJ,CAAf;EAEN,MAAMM,WAAWC,SAAyB;IACxCC,MAAO;MAEL,OAAO,EAAE,GAAGC,aAAaC,KAAlB;QAAyB,GAAGb,MAAMZ;MAAlC,CAAP;IACF,CAJwC;;IAKxC0B,IAAK1B,IAAL,EAA2B;MACzBwB,aAAaC,KAAb,GAAqBzB,IAArB;MAEAa,KAAK,aAAL,EAAoBb,IAApB;IACF;;EATwC,CAAzB,CAAjB;;EAYA,MAAM2B,OAAO,MAAM;IACb,aAASF,KAAT,CAAeT,IAAf,KAAwB,KAAxB,EAA+B;MACxBK,iBAAQtB,SAASsB,SAASI,KAAlB,CAAR;IACA,CAFP,MAEO,aAASA,KAAT,CAAeT,IAAf,KAAwB,OAAxB,EAAiC;MACjCK,iBAAQ,EAAE,GAAGA,SAASI,KAAd;QAAqBvB,MAAMmB,SAASI,KAAT,CAAevB,IAAf,GAAsB;MAAjD,CAAR;IACX;EAAA,CALF;;EAQA,MAAM0B,OAAO,MAAM;IACb,aAASH,KAAT,CAAeT,IAAf,KAAwB,KAAxB,EAA+B;MACxBK,iBAAQlB,SAASkB,SAASI,KAAlB,CAAR;IACA,CAFP,MAEO,aAASA,KAAT,CAAeT,IAAf,KAAwB,OAAxB,EAAiC;MACjCK,iBAAQ,EAAE,GAAGA,SAASI,KAAd;QAAqBvB,MAAMmB,SAASI,KAAT,CAAevB,IAAf,GAAsB;MAAjD,CAAR;IACX;EAAA,CALF;;EAQO;IACLmB,QADK;IAELM,IAFK;IAGLC;EAHK;AAKT,CAhDO","names":["JANUARY_MONTH_INDEX","DECEMBER_MONTH_INDEX","addMonth","view","month","year","subMonth","getDefaultDate","modelValue","isDate","start","Array","isArray","Date","useView","props","emit","defaultOverride","defaultView","type","defaultDate","getFullYear","getMonth","ref","syncView","computed","get","statefulView","value","set","next","prev"],"sources":["../../../../../../src/components/va-date-picker/hooks/view.ts"],"sourcesContent":["import { computed, ref } from 'vue'\nimport isDate from 'lodash/isDate.js'\n\nimport { DatePickerView, DatePickerViewProp, DatePickerModelValue } from '../types'\n\nconst JANUARY_MONTH_INDEX = 0\nconst DECEMBER_MONTH_INDEX = 11\n\nconst addMonth = (view: DatePickerView) => {\n  if (view.month === DECEMBER_MONTH_INDEX) {\n    return { ...view, year: view.year + 1, month: JANUARY_MONTH_INDEX }\n  } else {\n    return { ...view, month: view.month + 1 }\n  }\n}\n\nconst subMonth = (view: DatePickerView) => {\n  if (view.month === JANUARY_MONTH_INDEX) {\n    return { ...view, year: view.year - 1, month: DECEMBER_MONTH_INDEX }\n  } else {\n    return { ...view, month: view.month - 1 }\n  }\n}\n\nconst getDefaultDate = (modelValue: DatePickerModelValue): Date => {\n  if (isDate(modelValue)) { return modelValue }\n  if (isDate((modelValue as any)?.start)) { return (modelValue as any).start }\n  if (Array.isArray(modelValue) && isDate(modelValue[0])) { return modelValue[0] }\n\n  return new Date()\n}\n\nexport const useView = (\n  props: { [key: string]: any, 'view'?: DatePickerViewProp },\n  emit: (event: any | 'update:view', newValue: DatePickerViewProp) => any,\n  defaultOverride?: DatePickerViewProp,\n) => {\n  const defaultDate = getDefaultDate(props.modelValue)\n  const defaultView: DatePickerView = {\n    type: 'day',\n    year: defaultDate.getFullYear(),\n    month: defaultDate.getMonth(),\n    ...defaultOverride,\n  }\n\n  const statefulView = ref(defaultView)\n\n  const syncView = computed<DatePickerView>({\n    get () {\n      // Merge default view and user view prop\n      return { ...statefulView.value, ...props.view }\n    },\n    set (view: DatePickerView) {\n      statefulView.value = view\n\n      emit('update:view', view)\n    },\n  })\n\n  const next = () => {\n    if (syncView.value.type === 'day') {\n      syncView.value = addMonth(syncView.value)\n    } else if (syncView.value.type === 'month') {\n      syncView.value = { ...syncView.value, year: syncView.value.year + 1 }\n    }\n  }\n\n  const prev = () => {\n    if (syncView.value.type === 'day') {\n      syncView.value = subMonth(syncView.value)\n    } else if (syncView.value.type === 'month') {\n      syncView.value = { ...syncView.value, year: syncView.value.year - 1 }\n    }\n  }\n\n  return {\n    syncView,\n    next,\n    prev,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}