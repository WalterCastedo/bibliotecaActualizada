{"ast":null,"code":"import { a as getValueByKey } from \"../utils/value-by-key.js\";\nconst useSelectableListProps = {\n  options: {\n    type: Array,\n    default: () => []\n  },\n  textBy: {\n    type: [String, Function],\n    default: \"text\"\n  },\n  valueBy: {\n    type: [String, Function],\n    default: \"\"\n  },\n  trackBy: {\n    type: [String, Function],\n    default: \"\"\n  },\n  disabledBy: {\n    type: [String, Function],\n    default: \"disabled\"\n  },\n  groupBy: {\n    type: [String, Function],\n    default: \"group\"\n  }\n};\n\nfunction useSelectableList(props) {\n  const isStringOrNumber = option => {\n    const typeOfOption = typeof option;\n    return typeOfOption === \"string\" || typeOfOption === \"number\";\n  };\n\n  const getOptionProperty = (option, selector) => {\n    return !selector || isStringOrNumber(option) ? option : getValueByKey(option, selector);\n  };\n\n  const getValue = option => getOptionProperty(option, props.valueBy);\n\n  const getOptionByValue = value => {\n    if (!props.valueBy) {\n      return value;\n    }\n\n    return props.options.find(option => value === getValue(option)) || value;\n  };\n\n  const getText = option => getOptionProperty(option, props.textBy);\n\n  const getDisabled = option => isStringOrNumber(option) ? false : getOptionProperty(option, props.disabledBy);\n\n  const getTrackBy = option => {\n    if (props.trackBy) {\n      return getOptionProperty(option, props.trackBy);\n    }\n\n    return getValue(option);\n  };\n\n  const getGroupBy = option => getOptionProperty(option, props.groupBy);\n\n  return {\n    getValue,\n    getOptionByValue,\n    getText,\n    getDisabled,\n    getTrackBy,\n    getGroupBy\n  };\n}\n\nexport { useSelectableList as a, useSelectableListProps as u };","map":{"version":3,"mappings":";AAQO,MAAMA,yBAAyB;EACpCC,SAAS;IAAEC,MAAMC,KAAR;IAA+CC,SAAS,MAAM;EAA9D,CAD2B;EAEpCC,QAAQ;IAAEH,MAAM,CAACI,MAAD,EAASC,QAAT,CAAR;IAA0DH,SAAS;EAAnE,CAF4B;EAGpCI,SAAS;IAAEN,MAAM,CAACI,MAAD,EAASC,QAAT,CAAR;IAA0DH,SAAS;EAAnE,CAH2B;EAIpCK,SAAS;IAAEP,MAAM,CAACI,MAAD,EAASC,QAAT,CAAR;IAA0DH,SAAS;EAAnE,CAJ2B;EAKpCM,YAAY;IAAER,MAAM,CAACI,MAAD,EAASC,QAAT,CAAR;IAA0DH,SAAS;EAAnE,CALwB;EAMpCO,SAAS;IAAET,MAAM,CAACI,MAAD,EAASC,QAAT,CAAR;IAA0DH,SAAS;EAAnE;AAN2B,CAA/B;;AASA,2BAA4BQ,KAA5B,EAAoF;EACnF,yBAAoBC,MAAD,IAA2D;IAClF,MAAMC,eAAe,OAAOD,MAA5B;IACO,wBAAiB,QAAjB,IAA6BC,iBAAiB,QAA9C;EAA8C,CAFjD;;EAKA,0BAAoB,CAACD,MAAD,EAA2BE,QAA3B,KAA0D;IAC3E,QAACA,QAAD,IAAaC,iBAAiBH,MAAjB,CAAb,GACHA,MADG,GAEHI,cAAcJ,MAAd,EAAsBE,QAAtB,CAFG;EAE2B,CAH9B;;EAMN,MAAMG,WAAYL,MAAD,IAA8BM,kBAAkBN,MAAlB,EAA0BD,MAAMJ,OAAhC,CAA/C;;EAEM,yBAAoBY,KAAD,IAA6B;IAChD,KAACR,MAAMJ,OAAP,EAAgB;MAAS;IAAM;;IAC5B,aAAMP,OAAN,CAAcoB,IAAd,CAAoBR,MAAD,IAA8BO,UAAUF,SAASL,MAAT,CAA3D,KAAgFO,KAAhF;EAAgF,CAFnF;;EAKN,MAAME,UAAWT,MAAD,IAA8BM,kBAAkBN,MAAlB,EAA0BD,MAAMP,MAAhC,CAA9C;;EAEM,oBAAeQ,MAAD,IAClBG,iBAAiBH,MAAjB,IAA2B,KAA3B,GAAmCM,kBAAkBN,MAAlB,EAA0BD,MAAMF,UAAhC,CAD/B;;EAGA,mBAAcG,MAAD,IAA8B;IAC/C,IAAID,MAAMH,OAAV,EAAmB;MAAS,yBAAkBI,MAAlB,EAA0BD,MAAMH,OAAhC;IAAyC;;IACrE,OAAOS,SAASL,MAAT,CAAP;EAAsB,CAFlB;;EAIN,MAAMU,aAAcV,MAAD,IAA8BM,kBAAkBN,MAAlB,EAA0BD,MAAMD,OAAhC,CAAjD;;EAEO;IACLO,QADK;IAELM,gBAFK;IAGLF,OAHK;IAILG,WAJK;IAKLC,UALK;IAMLH;EANK;AAQT","names":["useSelectableListProps","options","type","Array","default","textBy","String","Function","valueBy","trackBy","disabledBy","groupBy","props","option","typeOfOption","selector","isStringOrNumber","getValueByKey","getValue","getOptionProperty","value","find","getText","getGroupBy","getOptionByValue","getDisabled","getTrackBy"],"sources":["../../../../src/composables/useSelectableList.ts"],"sourcesContent":["import { PropType, ExtractPropTypes } from 'vue'\n\nimport { getValueByKey } from '../utils/value-by-key'\n\nexport type SelectableOption = string | number | Record<string, any>\n\ntype StringOrFunction = string | ((option: SelectableOption) => unknown)\n\nexport const useSelectableListProps = {\n  options: { type: Array as PropType<SelectableOption[]>, default: () => [] },\n  textBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'text' },\n  valueBy: { type: [String, Function] as PropType<StringOrFunction>, default: '' },\n  trackBy: { type: [String, Function] as PropType<StringOrFunction>, default: '' },\n  disabledBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'disabled' },\n  groupBy: { type: [String, Function] as PropType<StringOrFunction>, default: 'group' },\n}\n\nexport function useSelectableList (props: ExtractPropTypes<typeof useSelectableListProps>) {\n  const isStringOrNumber = (option: SelectableOption): option is (string | number) => {\n    const typeOfOption = typeof option\n    return typeOfOption === 'string' || typeOfOption === 'number'\n  }\n\n  const getOptionProperty = (option: SelectableOption, selector: StringOrFunction) => {\n    return !selector || isStringOrNumber(option)\n      ? option\n      : getValueByKey(option, selector)\n  }\n\n  const getValue = (option: SelectableOption) => getOptionProperty(option, props.valueBy)\n\n  const getOptionByValue = (value: SelectableOption) => {\n    if (!props.valueBy) { return value }\n    return props.options.find((option: SelectableOption) => value === getValue(option)) || value\n  }\n\n  const getText = (option: SelectableOption) => getOptionProperty(option, props.textBy)\n\n  const getDisabled = (option: SelectableOption) =>\n    isStringOrNumber(option) ? false : getOptionProperty(option, props.disabledBy)\n\n  const getTrackBy = (option: SelectableOption) => {\n    if (props.trackBy) { return getOptionProperty(option, props.trackBy) }\n    return getValue(option)\n  }\n  const getGroupBy = (option: SelectableOption) => getOptionProperty(option, props.groupBy)\n\n  return {\n    getValue,\n    getOptionByValue,\n    getText,\n    getDisabled,\n    getTrackBy,\n    getGroupBy,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}