{"ast":null,"code":"import { defineComponent, shallowRef, computed, ref, watch, nextTick, resolveComponent, openBlock, createBlock, mergeProps, withCtx, createVNode, createSlots, withModifiers, withKeys, createCommentVNode, renderSlot, createElementBlock, toDisplayString, normalizeProps, createTextVNode, normalizeStyle, guardReactiveProps } from \"vue\";\nimport { a as useClearableEmits, u as useClearableProps, b as useClearable } from \"../../composables/useClearable.js\";\nimport { u as useColors } from \"../../composables/useColors.js\";\nimport { u as useComponentPresetProp } from \"../../composables/useComponentPreset.js\";\nimport { u as useFocusDeep } from \"../../composables/useFocusDeep.js\";\nimport { u as useFormProps } from \"../../composables/useForm.js\";\nimport { u as useLoadingProps } from \"../../composables/useLoading.js\";\nimport { u as useMaxSelectionsProps, a as useMaxSelections } from \"../../composables/useMaxSelections.js\";\nimport { a as useValidationEmits, u as useValidationProps, b as useValidation } from \"../../composables/useValidation.js\";\nimport { u as useSelectableListProps, a as useSelectableList } from \"../../composables/useSelectableList.js\";\nimport { u as useTranslation } from \"../../composables/useTranslation.js\";\nimport { e as extractComponentProps } from \"../../utils/component-options/extract-component-options.js\";\nimport { f as filterComponentProps } from \"../../utils/component-options/filter-props.js\";\nimport { V as VaDropdown } from \"../va-dropdown/index.js\";\nimport { V as VaIcon } from \"../va-icon/index.js\";\nimport { V as VaInput } from \"../va-input/index.js\";\nimport { V as VaSelectOptionList } from \"./components/VaSelectOptionList/index.js\";\nimport { _ as _export_sfc } from \"../../../plugin-vue_export-helper.js\";\nimport { V as VaDropdownContent } from \"../va-dropdown/components/VaDropdownContent/index.js\";\nimport { V as VaInputWrapper } from \"../va-input/components/VaInputWrapper/VaInputWrapper.js\";\n\nvar VaSelect_vue_vue_type_style_index_0_lang = /* @__PURE__ */(() => \":root{--va-select-cursor: pointer;--va-select-dropdown-border-radius: 4px;--va-select-dropdown-background: var(--va-background-secondary);--va-select-box-shadow: 0 4px 8px rgba(59, 63, 73, .15);--va-select-min-width: var(--va-form-element-min-width)}.va-select{min-width:var(--va-select-min-width)}.va-select .va-input-wrapper__text{line-height:normal;flex-wrap:wrap}.va-select-anchor__input{cursor:var(--va-select-cursor);flex:1}.va-select-anchor__placeholder{color:var(--va-input-placeholder-text-color);line-height:normal;white-space:nowrap!important;overflow:hidden!important;text-overflow:ellipsis!important;flex:1}.va-select-dropdown__content{overflow:hidden;border-bottom-right-radius:var(--va-select-dropdown-border-radius);border-bottom-left-radius:var(--va-select-dropdown-border-radius);border-top-right-radius:0;border-top-left-radius:0;box-shadow:var(--va-select-box-shadow);padding:0}.va-select-dropdown__content-search-input{min-width:auto;width:100%}.va-select-dropdown__options-wrapper{background:var(--va-select-dropdown-background);overflow-y:auto;scrollbar-color:var(--va-background-element) transparent;scrollbar-width:thin}.va-select-dropdown__options-wrapper::-webkit-scrollbar{width:4px;height:4px}.va-select-dropdown__options-wrapper::-webkit-scrollbar-track{box-shadow:none;border-radius:10px}.va-select-dropdown__options-wrapper::-webkit-scrollbar-thumb{background:var(--va-background-element);opacity:.3;border-radius:2px}\\n\")();\n\nconst VaDropdownProps = extractComponentProps(VaDropdown, [\"keyboardNavigation\", \"offset\", \"stateful\", \"keepAnchorWidth\", \"closeOnContentClick\", \"innerAnchorSelector\", \"modelValue\"]);\n\nconst _sfc_main = defineComponent({\n  name: \"VaSelect\",\n  components: {\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInput,\n    VaInputWrapper\n  },\n  emits: [\"update:modelValue\", \"update-search\", \"create-new\", \"scroll-bottom\", ...useValidationEmits, ...useClearableEmits],\n  props: { ...VaDropdownProps,\n    ...useSelectableListProps,\n    ...useValidationProps,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormProps,\n    ...useComponentPresetProp,\n    modelValue: {\n      type: [String, Number, Array, Object],\n      default: \"\"\n    },\n    placement: {\n      type: String,\n      default: \"bottom\",\n      validator: placement => [\"top\", \"bottom\"].includes(placement)\n    },\n    allowCreate: {\n      type: [Boolean, String],\n      default: false,\n      validator: mode => [true, false, \"unique\"].includes(mode)\n    },\n    color: {\n      type: String,\n      default: \"primary\"\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    searchable: {\n      type: Boolean,\n      default: false\n    },\n    separator: {\n      type: String,\n      default: \", \"\n    },\n    width: {\n      type: String,\n      default: \"100%\"\n    },\n    maxHeight: {\n      type: String,\n      default: \"256px\"\n    },\n    noOptionsText: {\n      type: String,\n      default: \"$t:noOptions\"\n    },\n    hideSelected: {\n      type: Boolean,\n      default: false\n    },\n    tabindex: {\n      type: Number,\n      default: 0\n    },\n    dropdownIcon: {\n      type: [String, Object],\n      default: () => ({\n        open: \"va-arrow-down\",\n        close: \"va-arrow-up\"\n      }),\n      validator: value => {\n        if (typeof value === \"string\") {\n          return true;\n        }\n\n        const isOpenIconString = typeof value.open === \"string\";\n        const isCloseIconString = typeof value.close === \"string\";\n        return isOpenIconString && isCloseIconString;\n      }\n    },\n    virtualScroller: {\n      type: Boolean,\n      default: false\n    },\n    outline: {\n      type: Boolean,\n      default: false\n    },\n    bordered: {\n      type: Boolean,\n      default: false\n    },\n    label: {\n      type: String,\n      default: \"\"\n    },\n    placeholder: {\n      type: String,\n      default: \"\"\n    },\n    searchPlaceholderText: {\n      type: String,\n      default: \"$t:search\"\n    },\n    requiredMark: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup(props, {\n    emit\n  }) {\n    const optionList = shallowRef();\n    const input = shallowRef();\n    const searchBar = shallowRef();\n    const isInputFocused = useFocusDeep(input);\n    const isFocused = computed(() => isInputFocused.value || showDropdownContent.value);\n    const {\n      getHoverColor,\n      getColor\n    } = useColors();\n    const {\n      getOptionByValue,\n      getValue,\n      getText,\n      getTrackBy\n    } = useSelectableList(props);\n\n    const reset = () => withoutValidation(() => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : [];\n      } else {\n        valueComputed.value = props.clearValue;\n      }\n\n      searchInput.value = \"\";\n      emit(\"clear\");\n      resetValidation();\n    });\n\n    const focus = () => {\n      var _a;\n\n      if (props.disabled) {\n        return;\n      }\n\n      (_a = input.value) == null ? void 0 : _a.focus();\n    };\n\n    const {\n      validate,\n      computedError,\n      computedErrorMessages,\n      withoutValidation,\n      resetValidation\n    } = useValidation(props, emit, {\n      reset,\n      focus\n    });\n    const colorComputed = computed(() => getColor(props.color));\n    const toggleIconColor = computed(() => props.readonly ? getHoverColor(colorComputed.value) : colorComputed.value);\n\n    const onScrollBottom = () => emit(\"scroll-bottom\");\n\n    const searchInput = ref(\"\");\n    const showSearchInput = computed(() => props.searchable || props.allowCreate);\n    watch(searchInput, value => {\n      emit(\"update-search\", value);\n      hoveredOption.value = null;\n    });\n    const valueComputed = computed({\n      get() {\n        if (props.multiple) {\n          if (!props.modelValue) {\n            return [];\n          }\n\n          if (!Array.isArray(props.modelValue)) {\n            return [getOptionByValue(props.modelValue)];\n          }\n\n          return props.modelValue.map(getOptionByValue);\n        }\n\n        const value = getOptionByValue(props.modelValue);\n\n        if (Array.isArray(value)) {\n          if (value.length) {\n            return value[value.length - 1];\n          }\n        }\n\n        return value;\n      },\n\n      set(value) {\n        if (Array.isArray(value)) {\n          emit(\"update:modelValue\", value.map(getValue));\n        } else {\n          emit(\"update:modelValue\", getValue(value));\n        }\n      }\n\n    });\n    const valueComputedString = computed(() => {\n      if (!valueComputed.value && valueComputed.value !== 0) {\n        return props.clearValue;\n      }\n\n      if (typeof valueComputed.value === \"string\" || typeof valueComputed.value === \"number\") {\n        return valueComputed.value;\n      }\n\n      if (Array.isArray(valueComputed.value)) {\n        return valueComputed.value.map(value => getText(value)).join(props.separator) || props.clearValue;\n      }\n\n      return getText(valueComputed.value);\n    });\n    const isPlaceholder = computed(() => props.placeholder && !valueComputedString.value);\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur\n    } = useClearable(props, valueComputed);\n    const showClearIcon = computed(() => {\n      if (!canBeCleared.value) {\n        return false;\n      }\n\n      if (props.multiple && Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.length;\n      }\n\n      return true;\n    });\n    const toggleIcon = computed(() => {\n      if (!props.dropdownIcon) {\n        return \"\";\n      }\n\n      if (typeof props.dropdownIcon === \"string\") {\n        return props.dropdownIcon;\n      }\n\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open;\n    });\n    const filteredOptions = computed(() => {\n      if (!props.options) {\n        return [];\n      }\n\n      if (props.hideSelected) {\n        return props.options.filter(option => !checkIsOptionSelected(option));\n      }\n\n      return props.options;\n    });\n\n    const checkIsOptionSelected = option => {\n      if (!valueComputed.value) {\n        return false;\n      }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.find(valueItem => compareOptions(valueItem, option));\n      }\n\n      return compareOptions(valueComputed.value, option);\n    };\n\n    const compareOptions = (option1, option2) => {\n      const one = getValue(option1);\n      const two = getValue(option2);\n\n      if (one === two) {\n        return true;\n      }\n\n      if (typeof one === \"string\" && typeof two === \"string\") {\n        return one === two;\n      }\n\n      if (one === null || two === null) {\n        return false;\n      }\n\n      if (typeof one === \"object\" && typeof two === \"object\") {\n        return getTrackBy(one) === getTrackBy(two);\n      }\n\n      return false;\n    };\n\n    const isValueComputedArray = v => Array.isArray(v.value);\n\n    const selectOption = option => {\n      if (hoveredOption.value === null) {\n        hideAndFocus();\n        return;\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = \"\";\n      }\n\n      if (props.multiple && isValueComputedArray(valueComputed)) {\n        const {\n          exceedsMaxSelections,\n          addOption\n        } = useMaxSelections(valueComputed, ref(props.maxSelections));\n        const isSelected = checkIsOptionSelected(getValue(option));\n\n        if (isSelected) {\n          valueComputed.value = valueComputed.value.filter(optionSelected => !compareOptions(getValue(option), getValue(optionSelected)));\n        } else {\n          if (exceedsMaxSelections()) {\n            return;\n          }\n\n          valueComputed.value = addOption(option);\n        }\n      } else {\n        valueComputed.value = typeof option === \"string\" || typeof option === \"number\" ? option : { ...option\n        };\n        hideAndFocus();\n      }\n    };\n\n    const addNewOption = () => {\n      var _a;\n\n      const hasAddedOption = (_a = props.options) == null ? void 0 : _a.some(option => getText(option) === searchInput.value);\n\n      if (!(props.allowCreate === \"unique\" && hasAddedOption)) {\n        emit(\"create-new\", searchInput.value);\n        searchInput.value = \"\";\n      }\n    };\n\n    const hoveredOption = ref(null);\n\n    const selectHoveredOption = () => {\n      if (!hoveredOption.value && hoveredOption.value !== 0) {\n        return;\n      }\n\n      if (!showDropdownContent.value) {\n        showDropdown();\n        return;\n      }\n\n      selectOption(hoveredOption.value);\n    };\n\n    const selectOrAddOption = () => {\n      const allowedToCreate = !!props.allowCreate && searchInput.value !== \"\";\n\n      if (hoveredOption.value !== null) {\n        selectHoveredOption();\n      } else if (allowedToCreate) {\n        addNewOption();\n      }\n    };\n\n    const focusPreviousOption = () => {\n      var _a;\n\n      return (_a = optionList.value) == null ? void 0 : _a.focusPreviousOption();\n    };\n\n    const focusNextOption = () => {\n      var _a;\n\n      return (_a = optionList.value) == null ? void 0 : _a.focusNextOption();\n    };\n\n    const showDropdownContent = ref(false);\n    const showDropdownContentComputed = computed({\n      get: () => showDropdownContent.value,\n      set: show => {\n        show ? showDropdown() : hideDropdown();\n      }\n    });\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate);\n    });\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) {\n        return;\n      }\n\n      showDropdownContent.value = true;\n      scrollToSelected();\n      focusSearchOrOptions();\n    };\n\n    const hideDropdown = () => {\n      showDropdownContent.value = false;\n      searchInput.value = \"\";\n      validate();\n    };\n\n    const toggleDropdown = () => {\n      if (showDropdownContent.value) {\n        hideAndFocus();\n      } else {\n        showDropdown();\n      }\n    };\n\n    const onSelectClick = () => {\n      if (props.disabled || props.readonly) {\n        return;\n      }\n\n      toggleDropdown();\n    };\n\n    const hideAndFocus = () => {\n      hideDropdown();\n      isInputFocused.value = true;\n    };\n\n    const focusSearchBar = () => {\n      var _a;\n\n      (_a = searchBar.value) == null ? void 0 : _a.focus();\n    };\n\n    const focusOptionList = () => {\n      var _a, _b;\n\n      (_a = optionList.value) == null ? void 0 : _a.focus();\n      !props.modelValue && ((_b = optionList.value) == null ? void 0 : _b.focusFirstOption());\n    };\n\n    const focusSearchOrOptions = () => nextTick(() => {\n      if (showSearchInput.value) {\n        focusSearchBar();\n      } else {\n        focusOptionList();\n      }\n    });\n\n    const onInputFocus = () => {\n      isInputFocused.value = true;\n      onFocus();\n    };\n\n    const onInputBlur = () => {\n      if (showDropdownContentComputed.value) {\n        return;\n      }\n\n      onBlur();\n      isInputFocused.value ? isInputFocused.value = false : validate();\n    };\n\n    const blur = () => {\n      var _a;\n\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false;\n      }\n\n      nextTick((_a = input.value) == null ? void 0 : _a.blur);\n    };\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex);\n\n    const scrollToSelected = () => {\n      const selected = valueComputed.value;\n      const nothingSelected = typeof selected !== \"object\" && Array.isArray(selected) && !selected.length;\n\n      if (nothingSelected) {\n        return;\n      }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n      hoveredOption.value = scrollTo;\n      nextTick(() => {\n        var _a;\n\n        return (_a = optionList.value) == null ? void 0 : _a.scrollToOption(scrollTo);\n      });\n    };\n\n    let hintedSearchQuery = \"\";\n    let hintedSearchQueryTimeoutIndex;\n    const navigationKeys = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\", \"Enter\", \" \"];\n\n    const onHintedSearch = event => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return;\n      }\n\n      const isLetter = event.key.length === 1;\n      const isDeleteKey = event.key === \"Backspace\" || event.key === \"Delete\";\n      clearTimeout(hintedSearchQueryTimeoutIndex);\n\n      if (isDeleteKey) {\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : \"\";\n      } else if (isLetter) {\n        hintedSearchQuery += event.key;\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery;\n        return;\n      }\n\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()));\n\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption;\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => {\n        hintedSearchQuery = \"\";\n      }, 1e3);\n    };\n\n    const {\n      tp,\n      t\n    } = useTranslation();\n    const dropdownPropsComputed = computed(() => ({ ...filterComponentProps(VaDropdownProps).value,\n      closeOnContentClick: closeOnContentClick.value,\n      stateful: false,\n      offset: [1, 0],\n      keepAnchorWidth: true,\n      keyboardNavigation: true,\n      innerAnchorSelector: \".va-input-wrapper__field\",\n      \"aria-label\": props.modelValue ? `${t(\"selectedOption\")}: ${props.modelValue}` : t(\"noSelectedOption\")\n    }));\n    return { ...useTranslation(),\n      isFocused,\n      input,\n      optionList,\n      searchBar,\n      reset,\n      focus,\n      blur,\n      tp,\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      onSelectClick,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueComputed,\n      valueComputedString,\n      showClearIcon,\n      toggleIcon,\n      computedErrorMessages,\n      computedError,\n      filteredOptions,\n      checkIsOptionSelected,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      focusPreviousOption,\n      focusNextOption,\n      showDropdownContentComputed,\n      showDropdown,\n      hideDropdown,\n      hideAndFocus,\n      toggleDropdown,\n      toggleIconColor,\n      onHintedSearch,\n      onScrollBottom,\n      clearIconProps,\n      isPlaceholder,\n      dropdownPropsComputed\n    };\n  }\n\n});\n\nconst _hoisted_1 = {\n  key: 0,\n  class: \"va-select-anchor__placeholder\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_va_icon = resolveComponent(\"va-icon\");\n\n  const _component_va_input_wrapper = resolveComponent(\"va-input-wrapper\");\n\n  const _component_va_input = resolveComponent(\"va-input\");\n\n  const _component_va_select_option_list = resolveComponent(\"va-select-option-list\");\n\n  const _component_va_dropdown_content = resolveComponent(\"va-dropdown-content\");\n\n  const _component_va_dropdown = resolveComponent(\"va-dropdown\");\n\n  return openBlock(), createBlock(_component_va_dropdown, mergeProps({\n    ref: \"dropdown\",\n    modelValue: _ctx.showDropdownContentComputed,\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => _ctx.showDropdownContentComputed = $event),\n    class: \"va-select va-select__dropdown va-select-dropdown\"\n  }, _ctx.dropdownPropsComputed, {\n    onClose: _ctx.focus\n  }), {\n    anchor: withCtx(() => [createVNode(_component_va_input_wrapper, {\n      ref: \"input\",\n      class: \"va-select__anchor va-select-anchor__input\",\n      \"model-value\": _ctx.valueComputedString,\n      success: _ctx.$props.success,\n      error: _ctx.computedError,\n      color: _ctx.$props.color,\n      label: _ctx.$props.label,\n      loading: _ctx.$props.loading,\n      outline: _ctx.$props.outline,\n      bordered: _ctx.$props.bordered,\n      \"required-mark\": _ctx.$props.requiredMark,\n      messages: _ctx.$props.messages,\n      \"error-messages\": _ctx.computedErrorMessages,\n      focused: _ctx.isFocused,\n      tabindex: _ctx.tabIndexComputed,\n      onFocus: _ctx.onInputFocus,\n      onBlur: _ctx.onInputBlur\n    }, createSlots({\n      icon: withCtx(() => [_ctx.showClearIcon ? (openBlock(), createBlock(_component_va_icon, mergeProps({\n        key: 0,\n        role: \"button\",\n        \"aria-label\": _ctx.t(\"reset\"),\n        tabindex: \"0\"\n      }, _ctx.clearIconProps, {\n        onClick: withModifiers(_ctx.reset, [\"stop\"]),\n        onKeydown: [withKeys(withModifiers(_ctx.reset, [\"stop\"]), [\"enter\"]), withKeys(withModifiers(_ctx.reset, [\"stop\"]), [\"space\"])]\n      }), null, 16, [\"aria-label\", \"onClick\", \"onKeydown\"])) : createCommentVNode(\"\", true)]),\n      appendInner: withCtx(() => [_ctx.$slots.appendInner ? renderSlot(_ctx.$slots, \"appendInner\", {\n        key: 0\n      }) : createCommentVNode(\"\", true), createVNode(_component_va_icon, {\n        color: _ctx.toggleIconColor,\n        name: _ctx.toggleIcon\n      }, null, 8, [\"color\", \"name\"])]),\n      default: withCtx(() => [_ctx.isPlaceholder ? (openBlock(), createElementBlock(\"span\", _hoisted_1, toDisplayString(_ctx.$props.placeholder), 1)) : renderSlot(_ctx.$slots, \"content\", normalizeProps(mergeProps({\n        key: 1\n      }, {\n        valueString: _ctx.valueComputedString,\n        value: _ctx.valueComputed,\n        tabindex: _ctx.tabIndexComputed\n      })), () => [createTextVNode(toDisplayString(_ctx.valueComputedString), 1)])]),\n      _: 2\n    }, [_ctx.$slots.prepend ? {\n      name: \"prepend\",\n      fn: withCtx(() => [renderSlot(_ctx.$slots, \"prepend\")])\n    } : void 0, _ctx.$slots.append ? {\n      name: \"append\",\n      fn: withCtx(() => [renderSlot(_ctx.$slots, \"append\")])\n    } : void 0, _ctx.$slots.prependInner ? {\n      name: \"prependInner\",\n      fn: withCtx(() => [renderSlot(_ctx.$slots, \"prependInner\")])\n    } : void 0]), 1032, [\"model-value\", \"success\", \"error\", \"color\", \"label\", \"loading\", \"outline\", \"bordered\", \"required-mark\", \"messages\", \"error-messages\", \"focused\", \"tabindex\", \"onFocus\", \"onBlur\"])]),\n    default: withCtx(() => [createVNode(_component_va_dropdown_content, {\n      class: \"va-select-dropdown__content\",\n      style: normalizeStyle({\n        width: _ctx.$props.width\n      })\n    }, {\n      default: withCtx(() => [_ctx.showSearchInput ? (openBlock(), createBlock(_component_va_input, {\n        key: 0,\n        ref: \"searchBar\",\n        class: \"va-select-dropdown__content-search-input\",\n        \"aria-label\": _ctx.t(\"optionsFilter\"),\n        tabindex: _ctx.tabIndexComputed,\n        bordered: true,\n        placeholder: _ctx.tp(_ctx.$props.searchPlaceholderText),\n        modelValue: _ctx.searchInput,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.searchInput = $event),\n        onKeydown: [withKeys(withModifiers(_ctx.focusPreviousOption, [\"stop\", \"prevent\"]), [\"up\"]), withKeys(withModifiers(_ctx.focusPreviousOption, [\"stop\", \"prevent\"]), [\"left\"]), withKeys(withModifiers(_ctx.focusNextOption, [\"stop\", \"prevent\"]), [\"down\"]), withKeys(withModifiers(_ctx.focusNextOption, [\"stop\", \"prevent\"]), [\"right\"]), withKeys(withModifiers(_ctx.selectOrAddOption, [\"prevent\"]), [\"enter\"])],\n        onFocus: _cache[1] || (_cache[1] = $event => _ctx.hoveredOption = null)\n      }, null, 8, [\"aria-label\", \"tabindex\", \"placeholder\", \"modelValue\", \"onKeydown\"])) : createCommentVNode(\"\", true), createVNode(_component_va_select_option_list, {\n        ref: \"optionList\",\n        class: \"va-select-dropdown__options-wrapper\",\n        hoveredOption: _ctx.hoveredOption,\n        \"onUpdate:hoveredOption\": _cache[2] || (_cache[2] = $event => _ctx.hoveredOption = $event),\n        style: normalizeStyle({\n          maxHeight: _ctx.$props.maxHeight\n        }),\n        options: _ctx.filteredOptions,\n        \"selected-value\": _ctx.valueComputed,\n        \"get-selected-state\": _ctx.checkIsOptionSelected,\n        \"text-by\": _ctx.$props.textBy,\n        \"track-by\": _ctx.$props.trackBy,\n        \"group-by\": _ctx.$props.groupBy,\n        \"disabled-by\": _ctx.$props.disabledBy,\n        search: _ctx.searchInput,\n        \"no-options-text\": _ctx.tp(_ctx.$props.noOptionsText),\n        color: _ctx.$props.color,\n        tabindex: _ctx.tabIndexComputed,\n        \"virtual-scroller\": _ctx.$props.virtualScroller,\n        onSelectOption: _ctx.selectOption,\n        onNoPreviousOptionToHover: _ctx.focusSearchBar,\n        onKeydown: [withKeys(withModifiers(_ctx.selectHoveredOption, [\"stop\", \"prevent\"]), [\"enter\"]), withKeys(withModifiers(_ctx.selectHoveredOption, [\"stop\", \"prevent\"]), [\"space\"]), _cache[3] || (_cache[3] = withKeys(withModifiers($event => _ctx.searchBar && _ctx.searchBar.focus(), [\"stop\", \"prevent\"]), [\"tab\"])), _ctx.onHintedSearch],\n        onScrollBottom: _ctx.onScrollBottom\n      }, {\n        default: withCtx(slotData => [renderSlot(_ctx.$slots, \"option\", normalizeProps(guardReactiveProps(slotData || {})))]),\n        _: 3\n      }, 8, [\"hoveredOption\", \"style\", \"options\", \"selected-value\", \"get-selected-state\", \"text-by\", \"track-by\", \"group-by\", \"disabled-by\", \"search\", \"no-options-text\", \"color\", \"tabindex\", \"virtual-scroller\", \"onSelectOption\", \"onNoPreviousOptionToHover\", \"onKeydown\", \"onScrollBottom\"])]),\n      _: 3\n    }, 8, [\"style\"])]),\n    _: 3\n  }, 16, [\"modelValue\", \"onClose\"]);\n}\n\nvar _VaSelect = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { _VaSelect as _ };\nimport './VaSelect.css';","map":{"version":3,"mappings":"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","names":["VaDropdownProps","extractComponentProps","VaDropdown","_sfc_main","defineComponent","name","components","VaSelectOptionList","VaIcon","VaDropdownContent","VaInput","VaInputWrapper","emits","useValidationEmits","useClearableEmits","props","useSelectableListProps","useValidationProps","useLoadingProps","useMaxSelectionsProps","useClearableProps","useFormProps","useComponentPresetProp","modelValue","type","String","Number","Array","Object","default","placement","validator","includes","allowCreate","Boolean","mode","color","multiple","searchable","separator","width","maxHeight","noOptionsText","hideSelected","tabindex","dropdownIcon","open","close","value","isOpenIconString","isCloseIconString","virtualScroller","outline","bordered","label","placeholder","searchPlaceholderText","requiredMark","setup","emit","optionList","shallowRef","input","searchBar","useFocusDeep","isFocused","computed","isInputFocused","showDropdownContent","getHoverColor","getColor","useColors","getOptionByValue","getValue","getText","getTrackBy","useSelectableList","withoutValidation","valueComputed","isArray","clearValue","searchInput","resetValidation","focus","disabled","validate","computedError","computedErrorMessages","useValidation","reset","colorComputed","readonly","ref","showSearchInput","watch","hoveredOption","get","map","length","set","join","isPlaceholder","valueComputedString","canBeCleared","clearIconProps","onFocus","onBlur","useClearable","options","filter","option","checkIsOptionSelected","find","valueItem","compareOptions","option1","option2","one","two","isValueComputedArray","v","hideAndFocus","exceedsMaxSelections","addOption","useMaxSelections","maxSelections","isSelected","optionSelected","addNewOption","some","hasAddedOption","selectHoveredOption","showDropdown","selectOption","selectOrAddOption","allowedToCreate","focusPreviousOption","focusNextOption","showDropdownContentComputed","show","hideDropdown","scrollToSelected","focusSearchOrOptions","toggleDropdown","onSelectClick","focusSearchBar","focusOptionList","focusFirstOption","nextTick","onInputFocus","onInputBlur","blur","tabIndexComputed","selected","nothingSelected","scrollTo","scrollToOption","hintedSearchQuery","navigationKeys","event","key","isDeleteKey","clearTimeout","hintedSearchQueryTimeoutIndex","slice","isLetter","appropriateOption","toLowerCase","startsWith","setTimeout","tp","t","useTranslation","filterComponentProps","closeOnContentClick","stateful","offset","keepAnchorWidth","keyboardNavigation","innerAnchorSelector","showClearIcon","toggleIcon","filteredOptions","toggleIconColor","onHintedSearch","onScrollBottom","dropdownPropsComputed","class","_component_va_dropdown","_createBlock","_mergeProps","_ctx","onClose","anchor","_withCtx","_createVNode","_component_va_input_wrapper","success","$props","error","loading","messages","focused","_createSlots","icon","_component_va_icon","role","onClick","_withModifiers","onKeydown","_withKeys","createCommentVNode","appendInner","_renderSlot","_createCommentVNode","_createElementBlock","_toDisplayString","_normalizeProps","valueString","_createTextVNode","$slots","prepend","fn","append","prependInner","_component_va_dropdown_content","style","_normalizeStyle","_component_va_input","_cache","_component_va_select_option_list","textBy","trackBy","groupBy","disabledBy","search","onSelectOption","onNoPreviousOptionToHover","slotData","normalizeProps","_"],"sources":["../../../../../src/components/va-select/VaSelect.vue"],"sourcesContent":["<template>\n  <va-dropdown\n    ref=\"dropdown\"\n    v-model=\"showDropdownContentComputed\"\n    class=\"va-select va-select__dropdown va-select-dropdown\"\n    v-bind=\"dropdownPropsComputed\"\n    @close=\"focus\"\n  >\n    <template #anchor>\n      <va-input-wrapper\n        ref=\"input\"\n        class=\"va-select__anchor va-select-anchor__input\"\n        :model-value=\"valueComputedString\"\n        :success=\"$props.success\"\n        :error=\"computedError\"\n        :color=\"$props.color\"\n        :label=\"$props.label\"\n        :loading=\"$props.loading\"\n        :outline=\"$props.outline\"\n        :bordered=\"$props.bordered\"\n        :required-mark=\"$props.requiredMark\"\n        :messages=\"$props.messages\"\n        :error-messages=\"computedErrorMessages\"\n        :focused=\"isFocused\"\n        :tabindex=\"tabIndexComputed\"\n        @focus=\"onInputFocus\"\n        @blur=\"onInputBlur\"\n      >\n        <template\n          v-if=\"$slots.prepend\"\n          #prepend\n        >\n          <slot name=\"prepend\" />\n        </template>\n\n        <template\n          v-if=\"$slots.append\"\n          #append\n        >\n          <slot name=\"append\" />\n        </template>\n\n        <template\n          v-if=\"$slots.prependInner\"\n          #prependInner\n        >\n          <slot name=\"prependInner\" />\n        </template>\n\n        <template #icon>\n          <va-icon\n            v-if=\"showClearIcon\"\n            role=\"button\"\n            :aria-label=\"t('reset')\"\n            tabindex=\"0\"\n            v-bind=\"clearIconProps\"\n            @click.stop=\"reset\"\n            @keydown.enter.stop=\"reset\"\n            @keydown.space.stop=\"reset\"\n          />\n        </template>\n\n        <template #appendInner>\n          <slot\n            v-if=\"$slots.appendInner\"\n            name=\"appendInner\"\n          />\n          <va-icon\n            :color=\"toggleIconColor\"\n            :name=\"toggleIcon\"\n          />\n        </template>\n\n        <template\n          #default\n        >\n          <span\n            v-if=\"isPlaceholder\"\n            class=\"va-select-anchor__placeholder\"\n          >\n            {{ $props.placeholder }}\n          </span>\n          <slot\n            v-else\n            name=\"content\"\n            v-bind=\"{\n              valueString: valueComputedString,\n              value: valueComputed,\n              tabindex: tabIndexComputed,\n            }\"\n          >\n            {{ valueComputedString }}\n          </slot>\n        </template>\n      </va-input-wrapper>\n    </template>\n\n    <!-- Stop propagation for enter keyup event, to prevent VaDropdown closing -->\n    <va-dropdown-content\n      class=\"va-select-dropdown__content\"\n      :style=\"{ width: $props.width }\"\n    >\n      <va-input\n        v-if=\"showSearchInput\"\n        ref=\"searchBar\"\n        class=\"va-select-dropdown__content-search-input\"\n        :aria-label=\"t('optionsFilter')\"\n        :tabindex=\"tabIndexComputed\"\n        :bordered=\"true\"\n        :placeholder=\"tp($props.searchPlaceholderText)\"\n        v-model=\"searchInput\"\n        @keydown.up.stop.prevent=\"focusPreviousOption\"\n        @keydown.left.stop.prevent=\"focusPreviousOption\"\n        @keydown.down.stop.prevent=\"focusNextOption\"\n        @keydown.right.stop.prevent=\"focusNextOption\"\n        @keydown.enter.prevent=\"selectOrAddOption\"\n        @focus=\"hoveredOption = null\"\n      />\n      <va-select-option-list\n        ref=\"optionList\"\n        class=\"va-select-dropdown__options-wrapper\"\n        v-model:hoveredOption=\"hoveredOption\"\n        :style=\"{ maxHeight: $props.maxHeight }\"\n        :options=\"filteredOptions\"\n        :selected-value=\"valueComputed\"\n        :get-selected-state=\"checkIsOptionSelected\"\n        :text-by=\"$props.textBy\"\n        :track-by=\"$props.trackBy\"\n        :group-by=\"$props.groupBy\"\n        :disabled-by=\"$props.disabledBy\"\n        :search=\"searchInput\"\n        :no-options-text=\"tp($props.noOptionsText)\"\n        :color=\"$props.color\"\n        :tabindex=\"tabIndexComputed\"\n        :virtual-scroller=\"$props.virtualScroller\"\n        @select-option=\"selectOption\"\n        @no-previous-option-to-hover=\"focusSearchBar\"\n        @keydown.enter.stop.prevent=\"selectHoveredOption\"\n        @keydown.space.stop.prevent=\"selectHoveredOption\"\n        @keydown.tab.stop.prevent=\"searchBar && searchBar.focus()\"\n        @keydown=\"onHintedSearch\"\n        @scroll-bottom=\"onScrollBottom\"\n        v-slot=\"slotData\"\n      >\n        <slot name=\"option\" v-bind=\"slotData || {}\" />\n      </va-select-option-list>\n    </va-dropdown-content>\n  </va-dropdown>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, PropType, ref, computed, watch, nextTick, Ref, shallowRef } from 'vue'\n\nimport { warn } from '../../utils/console'\nimport {\n  useComponentPresetProp,\n  useSelectableList, useSelectableListProps,\n  useValidation, useValidationProps, useValidationEmits, ValidationProps,\n  useFormProps,\n  useLoadingProps,\n  useColors,\n  useMaxSelections, useMaxSelectionsProps,\n  useClearableProps, useClearable, useClearableEmits,\n  useFocusDeep,\n  useTranslation,\n} from '../../composables'\n\nimport { extractComponentProps, filterComponentProps } from '../../utils/component-options'\n\nimport { VaDropdown, VaDropdownContent } from '../va-dropdown'\nimport { VaIcon } from '../va-icon'\nimport { VaInput, VaInputWrapper } from '../va-input'\nimport { VaSelectOptionList } from './components/VaSelectOptionList'\n\nimport type { SelectDropdownIcon, SelectOption, Placement } from './types'\nimport type { DropdownOffsetProp } from '../va-dropdown/types'\n\nconst VaDropdownProps = extractComponentProps(VaDropdown,\n  ['keyboardNavigation', 'offset', 'stateful', 'keepAnchorWidth', 'closeOnContentClick', 'innerAnchorSelector', 'modelValue'],\n)\n\nexport default defineComponent({\n  name: 'VaSelect',\n\n  components: {\n    VaSelectOptionList,\n    VaIcon,\n    VaDropdown,\n    VaDropdownContent,\n    VaInput,\n    VaInputWrapper,\n  },\n\n  emits: [\n    'update:modelValue',\n    'update-search',\n    'create-new',\n    'scroll-bottom',\n    ...useValidationEmits,\n    ...useClearableEmits,\n  ],\n\n  props: {\n    ...VaDropdownProps,\n    ...useSelectableListProps,\n    ...useValidationProps as ValidationProps<SelectOption>,\n    ...useLoadingProps,\n    ...useMaxSelectionsProps,\n    ...useClearableProps,\n    ...useFormProps,\n    ...useComponentPresetProp,\n\n    modelValue: {\n      type: [String, Number, Array, Object] as PropType<SelectOption | SelectOption[]>,\n      default: '',\n    },\n\n    // Dropdown placement\n    placement: {\n      type: String as PropType<Placement>,\n      default: 'bottom',\n      validator: (placement: string) => ['top', 'bottom'].includes(placement),\n    },\n\n    allowCreate: {\n      type: [Boolean, String] as PropType<boolean | 'unique'>,\n      default: false,\n      validator: (mode: string | boolean) => [true, false, 'unique'].includes(mode),\n    },\n\n    color: { type: String, default: 'primary' },\n    multiple: { type: Boolean, default: false },\n    searchable: { type: Boolean, default: false },\n    separator: { type: String, default: ', ' },\n    width: { type: String, default: '100%' },\n    maxHeight: { type: String, default: '256px' },\n    noOptionsText: { type: String, default: '$t:noOptions' },\n    hideSelected: { type: Boolean, default: false },\n    tabindex: { type: Number, default: 0 },\n    dropdownIcon: {\n      type: [String, Object] as PropType<string | SelectDropdownIcon>,\n      default: (): SelectDropdownIcon => ({\n        open: 'va-arrow-down',\n        close: 'va-arrow-up',\n      }),\n      validator: (value: string | SelectDropdownIcon) => {\n        if (typeof value === 'string') { return true }\n        const isOpenIconString = typeof value.open === 'string'\n        const isCloseIconString = typeof value.close === 'string'\n        return isOpenIconString && isCloseIconString\n      },\n    },\n    virtualScroller: { type: Boolean, default: false },\n\n    // Input style\n    outline: { type: Boolean, default: false },\n    bordered: { type: Boolean, default: false },\n    label: { type: String, default: '' },\n    placeholder: { type: String, default: '' },\n    searchPlaceholderText: { type: String, default: '$t:search' },\n    requiredMark: { type: Boolean, default: false },\n  },\n\n  setup (props, { emit }) {\n    const optionList = shallowRef<typeof VaSelectOptionList>()\n    const input = shallowRef<typeof VaInputWrapper>()\n    const searchBar = shallowRef<typeof VaInput>()\n\n    const isInputFocused = useFocusDeep(input as any)\n    const isFocused = computed(() => isInputFocused.value || showDropdownContent.value)\n\n    const { getHoverColor, getColor } = useColors()\n    const { getOptionByValue, getValue, getText, getTrackBy } = useSelectableList(props)\n\n    /** @public */\n    const reset = () => withoutValidation(() => {\n      if (props.multiple) {\n        valueComputed.value = Array.isArray(props.clearValue) ? props.clearValue : []\n      } else {\n        valueComputed.value = props.clearValue\n      }\n\n      searchInput.value = ''\n      emit('clear')\n      resetValidation()\n    })\n\n    /** @public */\n    const focus = () => {\n      if (props.disabled) { return }\n      input.value?.focus()\n    }\n\n    const {\n      validate,\n      computedError,\n      computedErrorMessages,\n      withoutValidation,\n      resetValidation,\n    } = useValidation(props, emit, { reset, focus })\n\n    const colorComputed = computed(() => getColor(props.color))\n    const toggleIconColor = computed(() => props.readonly ? getHoverColor(colorComputed.value) : colorComputed.value)\n\n    const onScrollBottom = () => emit('scroll-bottom')\n\n    const searchInput = ref('')\n    const showSearchInput = computed(() => props.searchable || props.allowCreate)\n\n    watch(searchInput, (value) => {\n      emit('update-search', value)\n      hoveredOption.value = null\n    })\n\n    // Select value\n\n    const valueComputed = computed<SelectOption | SelectOption[]>({\n      get () {\n        if (props.multiple) {\n          if (!props.modelValue) {\n            return []\n          }\n\n          if (!Array.isArray(props.modelValue)) {\n            return [getOptionByValue(props.modelValue)]\n          }\n\n          return props.modelValue.map(getOptionByValue)\n        }\n\n        const value = getOptionByValue(props.modelValue)\n\n        if (Array.isArray(value)) {\n          warn('Model value should be a string or a number for a single Select.')\n\n          if (value.length) {\n            return value[value.length - 1]\n          }\n        }\n\n        return value\n      },\n\n      set (value: SelectOption | SelectOption[]) {\n        if (Array.isArray(value)) {\n          emit('update:modelValue', value.map(getValue))\n        } else {\n          emit('update:modelValue', getValue(value))\n        }\n      },\n    })\n\n    const valueComputedString = computed<string>(() => {\n      if (!valueComputed.value && valueComputed.value !== 0) { return props.clearValue }\n      if (typeof valueComputed.value === 'string' || typeof valueComputed.value === 'number') { return valueComputed.value }\n      if (Array.isArray(valueComputed.value)) {\n        return valueComputed.value.map((value) => getText(value)).join(props.separator) || props.clearValue\n      }\n\n      return getText(valueComputed.value)\n    })\n\n    const isPlaceholder = computed(() => props.placeholder && !valueComputedString.value)\n\n    // Icons\n\n    const {\n      canBeCleared,\n      clearIconProps,\n      onFocus,\n      onBlur,\n    } = useClearable(props, valueComputed)\n\n    const showClearIcon = computed(() => {\n      if (!canBeCleared.value) { return false }\n      if (props.multiple && Array.isArray(valueComputed.value)) { return !!valueComputed.value.length }\n      return true\n    })\n\n    const toggleIcon = computed(() => {\n      if (!props.dropdownIcon) { return '' }\n\n      if (typeof props.dropdownIcon === 'string') {\n        return props.dropdownIcon\n      }\n\n      return showDropdownContent.value ? props.dropdownIcon.close : props.dropdownIcon.open\n    })\n\n    // Options\n\n    const filteredOptions = computed(() => {\n      if (!props.options) { return [] }\n\n      if (props.hideSelected) {\n        return props.options.filter((option) => !checkIsOptionSelected(option))\n      }\n\n      return props.options\n    })\n\n    const checkIsOptionSelected = (option: SelectOption) => {\n      if (!valueComputed.value) { return false }\n\n      if (Array.isArray(valueComputed.value)) {\n        return !!valueComputed.value.find((valueItem) => compareOptions(valueItem, option))\n      }\n\n      return compareOptions(valueComputed.value, option)\n    }\n\n    const compareOptions = (option1: SelectOption, option2: SelectOption) => {\n      const one = getValue(option1)\n      const two = getValue(option2)\n\n      // identity check works nice for strings and exact matches.\n      if (one === two) {\n        return true\n      }\n      if (typeof one === 'string' && typeof two === 'string') {\n        return one === two\n      }\n      if (one === null || two === null) {\n        return false\n      }\n      if (typeof one === 'object' && typeof two === 'object') {\n        return getTrackBy(one) === getTrackBy(two)\n      }\n\n      return false\n    }\n\n    const isValueComputedArray = (v: Ref<SelectOption | SelectOption[]>): v is Ref<SelectOption[]> => Array.isArray(v.value)\n\n    const selectOption = (option: SelectOption) => {\n      if (hoveredOption.value === null) {\n        hideAndFocus()\n        return\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = ''\n      }\n\n      if (props.multiple && isValueComputedArray(valueComputed)) {\n        const { exceedsMaxSelections, addOption } = useMaxSelections(valueComputed, ref(props.maxSelections))\n\n        const isSelected = checkIsOptionSelected(getValue(option))\n\n        if (isSelected) {\n          // Unselect\n          valueComputed.value = valueComputed.value.filter((optionSelected) => !compareOptions(getValue(option), getValue(optionSelected)))\n        } else {\n          if (exceedsMaxSelections()) { return }\n          valueComputed.value = addOption(option)\n        }\n      } else {\n        valueComputed.value = typeof option === 'string' || typeof option === 'number' ? option : { ...option }\n        hideAndFocus()\n      }\n    }\n\n    const addNewOption = () => {\n      // Do not emit if option already exist and allow create is `unique`\n      const hasAddedOption = props.options?.some((option: SelectOption) => getText(option) === searchInput.value)\n\n      if (!(props.allowCreate === 'unique' && hasAddedOption)) {\n        emit('create-new', searchInput.value)\n        searchInput.value = ''\n      }\n    }\n\n    // Hovered options\n\n    const hoveredOption = ref<SelectOption | null>(null)\n\n    const selectHoveredOption = () => {\n      if (!hoveredOption.value && hoveredOption.value !== 0) { return }\n\n      if (!showDropdownContent.value) {\n        // We can not select options if they are hidden\n        showDropdown()\n        return\n      }\n\n      selectOption(hoveredOption.value)\n    }\n\n    const selectOrAddOption = () => {\n      const allowedToCreate = !!props.allowCreate && searchInput.value !== ''\n\n      if (hoveredOption.value !== null) {\n        selectHoveredOption()\n      } else if (allowedToCreate) {\n        addNewOption()\n      }\n    }\n\n    const focusPreviousOption = () => optionList.value?.focusPreviousOption()\n\n    const focusNextOption = () => optionList.value?.focusNextOption()\n\n    // Dropdown content\n\n    const showDropdownContent = ref(false)\n\n    const showDropdownContentComputed = computed({\n      get: () => showDropdownContent.value,\n      set: (show: boolean) => {\n        show ? showDropdown() : hideDropdown()\n      },\n    })\n\n    const closeOnContentClick = computed(() => {\n      return !(props.multiple || props.searchable || props.allowCreate)\n    })\n\n    const showDropdown = () => {\n      if (props.disabled || props.readonly) { return }\n\n      showDropdownContent.value = true\n      scrollToSelected()\n      focusSearchOrOptions()\n    }\n\n    const hideDropdown = () => {\n      showDropdownContent.value = false\n      searchInput.value = ''\n      validate()\n    }\n\n    const toggleDropdown = () => {\n      if (showDropdownContent.value) {\n        hideAndFocus()\n      } else {\n        showDropdown()\n      }\n    }\n\n    const onSelectClick = () => {\n      if (props.disabled || props.readonly) { return }\n      toggleDropdown()\n    }\n\n    const hideAndFocus = () => {\n      hideDropdown()\n      isInputFocused.value = true\n    }\n\n    const focusSearchBar = () => {\n      searchBar.value?.focus()\n    }\n\n    const focusOptionList = () => {\n      optionList.value?.focus()\n      !props.modelValue && optionList.value?.focusFirstOption()\n    }\n\n    const focusSearchOrOptions = () => nextTick(() => {\n      if (showSearchInput.value) {\n        focusSearchBar()\n      } else {\n        focusOptionList()\n      }\n    })\n\n    const onInputFocus = () => {\n      isInputFocused.value = true\n      onFocus()\n    }\n\n    const onInputBlur = () => {\n      if (showDropdownContentComputed.value) { return }\n\n      onBlur()\n\n      isInputFocused.value\n        ? isInputFocused.value = false\n        : validate()\n    }\n\n    /** @public */\n    const blur = () => {\n      if (showDropdownContentComputed.value) {\n        showDropdownContentComputed.value = false\n      }\n\n      nextTick(input.value?.blur)\n    }\n\n    const tabIndexComputed = computed(() => props.disabled ? -1 : props.tabindex)\n\n    const scrollToSelected = () => {\n      const selected = valueComputed.value\n      const nothingSelected = typeof selected !== 'object' && Array.isArray(selected) && !selected.length\n\n      if (nothingSelected) { return }\n\n      const scrollTo = Array.isArray(selected) ? selected[selected.length - 1] : selected\n      hoveredOption.value = scrollTo\n      nextTick(() => optionList.value?.scrollToOption(scrollTo))\n    }\n\n    // Hinted search\n\n    let hintedSearchQuery = ''\n    let hintedSearchQueryTimeoutIndex!: ReturnType<typeof setTimeout>\n    const navigationKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Enter', ' ']\n\n    // Hinted search - hover option if you typing it's value on select without search-bar\n    const onHintedSearch = (event: KeyboardEvent) => {\n      if (navigationKeys.some(key => key === event.key)) {\n        return\n      }\n\n      const isLetter: boolean = event.key.length === 1\n      const isDeleteKey: boolean = event.key === 'Backspace' || event.key === 'Delete'\n\n      clearTimeout(hintedSearchQueryTimeoutIndex)\n\n      if (isDeleteKey) {\n        // Remove last letter from query\n        hintedSearchQuery = hintedSearchQuery ? hintedSearchQuery.slice(0, -1) : ''\n      } else if (isLetter) {\n        // Add every new letter to the query\n        hintedSearchQuery += event.key\n      }\n\n      if (showSearchInput.value) {\n        searchInput.value = hintedSearchQuery\n        return\n      }\n\n      // Search for an option that matches the query\n      if (hintedSearchQuery) {\n        const appropriateOption = props.options.find(option => getText(option).toLowerCase().startsWith(hintedSearchQuery.toLowerCase()))\n        if (appropriateOption) {\n          hoveredOption.value = appropriateOption\n        }\n      }\n\n      hintedSearchQueryTimeoutIndex = setTimeout(() => { hintedSearchQuery = '' }, 1000)\n    }\n\n    const { tp, t } = useTranslation()\n\n    const dropdownPropsComputed = computed(() => ({\n      ...filterComponentProps(VaDropdownProps).value,\n      closeOnContentClick: closeOnContentClick.value,\n      stateful: false,\n      offset: [1, 0] as DropdownOffsetProp,\n      keepAnchorWidth: true,\n      keyboardNavigation: true,\n      innerAnchorSelector: '.va-input-wrapper__field',\n      'aria-label': props.modelValue ? `${t('selectedOption')}: ${props.modelValue}` : t('noSelectedOption'),\n    }))\n\n    return {\n      ...useTranslation(),\n      isFocused,\n\n      input,\n      optionList,\n      searchBar,\n\n      reset,\n      focus,\n      blur,\n\n      tp,\n\n      onInputFocus,\n      onInputBlur,\n      focusOptionList,\n      onSelectClick,\n      focusSearchBar,\n      searchInput,\n      showSearchInput,\n      hoveredOption,\n      tabIndexComputed,\n      valueComputed,\n      valueComputedString,\n      showClearIcon,\n      toggleIcon,\n      computedErrorMessages,\n      computedError,\n      filteredOptions,\n      checkIsOptionSelected,\n      selectOption,\n      selectOrAddOption,\n      selectHoveredOption,\n      focusPreviousOption,\n      focusNextOption,\n      showDropdownContentComputed,\n      showDropdown,\n      hideDropdown,\n      hideAndFocus,\n      toggleDropdown,\n      toggleIconColor,\n      onHintedSearch,\n      onScrollBottom,\n      clearIconProps,\n      isPlaceholder,\n      dropdownPropsComputed,\n    }\n  },\n})\n</script>\n\n<style lang=\"scss\">\n@import \"../../styles/resources\";\n@import \"variables\";\n\n.va-select {\n  min-width: var(--va-select-min-width);\n\n  & .va-input-wrapper__text {\n    line-height: normal;\n    flex-wrap: wrap;\n  }\n}\n\n.va-select-anchor {\n  &__input {\n    cursor: var(--va-select-cursor);\n    flex: 1;\n  }\n\n  &__placeholder {\n    color: var(--va-input-placeholder-text-color);\n    line-height: normal;\n    white-space: nowrap !important;\n    overflow: hidden !important;\n    text-overflow: ellipsis !important;\n    flex: 1;\n  }\n}\n\n.va-select-dropdown {\n  &__content {\n    overflow: hidden;\n    border-bottom-right-radius: var(--va-select-dropdown-border-radius);\n    border-bottom-left-radius: var(--va-select-dropdown-border-radius);\n    border-top-right-radius: 0;\n    border-top-left-radius: 0;\n    box-shadow: var(--va-select-box-shadow);\n    padding: 0;\n  }\n\n  &__content-search-input {\n    min-width: auto;\n    width: 100%;\n  }\n\n  &__options-wrapper {\n    background: var(--va-select-dropdown-background);\n    overflow-y: auto;\n\n    @include va-scroll(var(--va-background-element));\n  }\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}