{"ast":null,"code":"import { computed, ref, watch } from \"vue\";\n\nfunction useSyncProp(propName, props, emit, defaultValue) {\n  if (defaultValue === void 0) {\n    return [computed({\n      set(value) {\n        emit(`update:${propName}`, value);\n      },\n\n      get() {\n        return props[propName];\n      }\n\n    })];\n  }\n\n  const currentValue = props[propName];\n  const statefulValue = ref(currentValue === void 0 ? defaultValue : currentValue);\n  watch(() => props[propName], newVal => {\n    if (newVal === void 0) {\n      return;\n    }\n\n    statefulValue.value = newVal;\n  });\n  return [computed({\n    set(value) {\n      statefulValue.value = value;\n      emit(`update:${propName}`, value);\n    },\n\n    get() {\n      return props[propName] === void 0 ? statefulValue.value : props[propName];\n    }\n\n  })];\n}\n\nexport { useSyncProp as u };","map":{"version":3,"mappings":";;AAyBG,+BAAoBA,KAApB,EAAkCC,IAAlC,EAA8CC,YAA9C,EAAwF;EACzF,IAAIA,iBAAiB,MAArB,EAAgC;IACvB,QACLC,SAAsB;MACpBC,IAAKC,KAAL,EAAyB;QAClBJ,eAAUK,UAAV,EAAsBD,KAAtB;MACP,CAHoB;;MAIpBE,MAAO;QACL,OAAOP,MAAMM,QAAN,CAAP;MACF;;IANoB,CAAtB,CADK;EAUT;;EAEA,MAAME,eAAeR,MAAMM,QAAN,CAArB;EACA,MAAMG,gBAAgBC,IAAIF,iBAAiB,MAAjB,GAA6BN,YAA7B,GAA4CM,YAAhD,CAAtB;EAEAG,MAAM,MAAMX,MAAMM,QAAN,CAAZ,EAA8BM,MAAD,IAAY;IACvC,IAAIA,WAAW,MAAf,EAA0B;MAAE;IAAO;;IAEnCH,cAAcJ,KAAd,GAAsBO,MAAtB;EACD,CAJD;EAMO,QACLT,SAAsB;IACpBC,IAAKC,KAAL,EAAyB;MACvBI,cAAcJ,KAAd,GAAsBA,KAAtB;MACKJ,eAAUK,UAAV,EAAsBD,KAAtB;IACP,CAJoB;;IAKpBE,MAAoB;MAClB,OAAQP,MAAMM,QAAN,MAAoB,MAApB,GAAgCG,cAAcJ,KAA9C,GAAsDL,MAAMM,QAAN,CAA9D;IACF;;EAPoB,CAAtB,CADK;AAWT","names":["props","emit","defaultValue","computed","set","value","propName","get","currentValue","statefulValue","ref","watch","newVal"],"sources":["../../../../src/composables/useSyncProp.ts"],"sourcesContent":["import { ref, computed, watch, UnwrapRef } from 'vue'\n\n/**\n * Returns computed that emits update:${propName} on edit.\n *\n * @tutorial\n * ```\n * const [prop] = useSyncProp('name', props, emit)\n *\n * prop.value = 'New name'\n *\n * $nextTick(() => console.log(prop.value)) // 'New name'\n * ```\n *\n * @notice\n * Be careful, that property is not updating in current render\n * cycle. Be sure to use $nextTick if you need to use this property after change.\n */\nexport function useSyncProp<\n  T,\n  PropName extends string,\n  Props extends { [key in PropName]?: T },\n  Emit extends (event: any, newValue: Props[PropName]) => any,\n  DefaultValue extends Props[PropName],\n  ReturnValue extends DefaultValue extends undefined ? Props[PropName] : DefaultValue\n> (propName: PropName, props: Props, emit: Emit, defaultValue?: NonNullable<DefaultValue>) {\n  if (defaultValue === undefined) {\n    return [\n      computed<ReturnValue>({\n        set (value: ReturnValue) {\n          emit(`update:${propName}`, value)\n        },\n        get () {\n          return props[propName] as ReturnValue\n        },\n      }),\n    ]\n  }\n\n  const currentValue = props[propName]\n  const statefulValue = ref(currentValue === undefined ? defaultValue : currentValue)\n\n  watch(() => props[propName], (newVal) => {\n    if (newVal === undefined) { return }\n\n    statefulValue.value = newVal as UnwrapRef<ReturnValue>\n  })\n\n  return [\n    computed<ReturnValue>({\n      set (value: ReturnValue) {\n        statefulValue.value = value as UnwrapRef<ReturnValue>\n        emit(`update:${propName}`, value)\n      },\n      get (): ReturnValue {\n        return (props[propName] === undefined ? statefulValue.value : props[propName]) as ReturnValue\n      },\n    }),\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}