{"ast":null,"code":"import { inject as inject$1 } from \"vue\";\nlet app;\n\nconst setCurrentApp = instance => {\n  app = instance;\n};\n\nconst getCurrentApp = () => app;\n\nconst inject = (key, value) => {\n  var _a;\n\n  const app2 = (_a = getCurrentApp()) == null ? void 0 : _a._context.provides[key];\n  return app2 || inject$1(key, value);\n};\n\nexport { inject as i, setCurrentApp as s };","map":{"version":3,"mappings":";AAMA,IAAIA,GAAJ;;AAEa,sBAAiBC,QAAD,IAA0B;EAAQD;AAAS,CAA3D;;AACN,MAAME,gBAAgB,MAAMF,GAA5B;;AAGM,eAAU,CAACG,GAAD,EAAcC,KAAd,KAA8B;;;EACnD,MAAMC,OAAM,6CAAiBC,QAAjB,CAA0BC,QAA1B,CAAmCJ,GAAnC,CAAZ;EAEO,eAAOK,SAAUL,GAAVK,EAAeJ,KAAfI,CAAP;AACT,CAJa","names":["app","instance","getCurrentApp","key","value","app2","_context","provides","vueInject"],"sources":["../../../../src/services/current-app.ts"],"sourcesContent":["import type { App } from 'vue'\nimport { inject as vueInject } from 'vue'\n\n/**\n * Similar to `getCurrentInstance` but for plugins, so we can use inject in plugins.\n */\nlet app: App | null\n\nexport const setCurrentApp = (instance: App | null) => { app = instance }\nexport const getCurrentApp = () => app\n\n/** Wrapper around vue inject, so it can be used in plugins */\nexport const inject = ((key: string, value?: any) => {\n  const app = getCurrentApp()?._context.provides[key]\n\n  return app || vueInject(key, value)\n}) as unknown as typeof vueInject\n"]},"metadata":{},"sourceType":"module"}