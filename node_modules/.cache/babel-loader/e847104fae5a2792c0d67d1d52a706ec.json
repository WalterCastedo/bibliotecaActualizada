{"ast":null,"code":"import { V as VaModal } from \"./VaModal.js\";\nimport { h, render, nextTick } from \"vue\";\n\nconst getNodeProps = vNode => {\n  var _a;\n\n  return ((_a = vNode.component) == null ? void 0 : _a.props) || {};\n};\n\nconst destroy = (el, vNode) => {\n  if (el) {\n    render(null, el);\n    el.remove();\n  }\n\n  el = null;\n};\n\nconst mount = (component, {\n  props,\n  appContext\n} = {}) => {\n  var _a;\n\n  const el = document == null ? void 0 : document.createElement(\"div\");\n  let vNode;\n\n  const onClose = event => {\n    var _a2;\n\n    (_a2 = props == null ? void 0 : props.onClose) == null ? void 0 : _a2.call(props, event);\n    destroy(el);\n  };\n\n  const onUpdateModelValue = value => {\n    var _a2;\n\n    (_a2 = props == null ? void 0 : props[\"onUpdate:modelValue\"]) == null ? void 0 : _a2.call(props, value);\n\n    if ((props == null ? void 0 : props.withoutTransitions) && !value) {\n      nextTick(() => {\n        destroy(el);\n      });\n    }\n  };\n\n  vNode = h(component, { ...props,\n    stateful: (_a = props == null ? void 0 : props.stateful) != null ? _a : true,\n    modelValue: true,\n    onClose,\n    \"onUpdate:modelValue\": onUpdateModelValue\n  });\n\n  if (appContext) {\n    vNode.appContext = appContext;\n  }\n\n  if (el) {\n    render(vNode, el);\n  }\n\n  return {\n    vNode,\n    el\n  };\n};\n\nconst getModalOptions = options => typeof options === \"string\" ? {\n  message: options\n} : options;\n\nconst createModalInstance = (customProps, appContext) => {\n  const {\n    vNode,\n    el\n  } = mount(VaModal, {\n    appContext,\n    props: getModalOptions(customProps)\n  });\n\n  if (el && vNode.el && getNodeProps(vNode)) {\n    document.body.appendChild(el.childNodes[0]);\n  }\n\n  return vNode;\n};\n\nexport { createModalInstance as c };","map":{"version":3,"mappings":";;;AAMA,MAAMA,eAAgBC,KAAD,IAA2C;;;EACtD,oBAAMC,SAAN,wBAAiBC,KAAjB,KAAsD,EAAtD;AACV,CAFA;;AAIA,MAAMC,UAAU,CAACC,EAAD,EAAqCJ,KAArC,KAA6D;EAC3E,IAAII,EAAJ,EAAQ;IACNC,OAAO,IAAP,EAAaD,EAAb;IACAA,GAAGE,MAAH;EACF;;EAEKF;AAEP,CARA;;AAUA,MAAMG,QAAQ,CACZN,SADY,EAEZ;EAAEC,KAAF;EAASM;AAAT,IAA2E,EAF/D,KAG2B;;;EACjC,WAA8BC,qCAAUC,aAAV,CAAwB,KAAxB,CAA9B;EAGF;;EAGE,gBAAWC,KAAD,IAAwB;;;IACtC,sCAAOC,OAAP,qCAAiBD,KAAjB;IACAR,QAAQC,EAAR;EAAiB,CAFb;;EAMA,2BAAsBS,KAAD,IAAoB;;;IAC7C,sCAAQ,qBAAR,sCAAiCA,KAAjC;;IAEI,oCAAOC,kBAAP,KAA6B,CAACD,KAA9B,EAAqC;MACvCE,SAAS,MAAM;QACbZ,QAAQC,EAAR;MACD,CAFD;IAGF;EAAA,CAPI;;EAUNJ,QAAQgB,EAAEf,SAAF,EAAa,EACnB,GAAGC,KADgB;IAEnBe,UAAU,qCAAOA,QAAP,iBAAmB,IAFV;IAGnBC,YAAY,IAHO;IAInBN,OAJmB;IAKnB,uBAAuBO;EALJ,CAAb,CAAR;;EAQA,IAAIX,UAAJ,EAAgB;IACdR,MAAMQ,UAAN,GAAmBA,UAAnB;EACF;;EAEA,IAAIJ,EAAJ,EAAQ;IACNC,OAAOL,KAAP,EAAcI,EAAd;EACF;;EAEO;IAAEJ,KAAF;IAASI;EAAT;AACT,CA3CA;;AA6CA,MAAMgB,kBAAmBC,OAAD,IAAkD,OAAOA,OAAP,KAAmB,QAAnB,GACtE;EAAEC,SAASD;AAAX,CADsE,GAEtEA,OAFJ;;AAIa,4BAAsB,CAACE,WAAD,EAAqCf,UAArC,KAAwE;EACnG;IAAER,KAAF;IAASI;EAAT,IAAgBG,MAAMiB,OAAN,EAAe;IAAEhB,UAAF;IAAcN,OAAOkB,gBAAgBG,WAAhB;EAArB,CAAf,CAAhB;;EAEN,IAAInB,MAAMJ,MAAMI,EAAZ,IAAkBL,aAAaC,KAAb,CAAtB,EAA2C;IACzCS,SAASgB,IAAT,CAAcC,WAAd,CAA0BtB,GAAGuB,UAAH,CAAc,CAAd,CAA1B;EACF;;EAEO;AACT,CARa","names":["getNodeProps","vNode","component","props","destroy","el","render","remove","mount","appContext","document","createElement","event","onClose","value","withoutTransitions","nextTick","h","stateful","modelValue","onUpdateModelValue","getModalOptions","options","message","customProps","VaModal","body","appendChild","childNodes"],"sources":["../../../../../src/components/va-modal/modal.ts"],"sourcesContent":["import { VaModal } from './VaModal'\nimport type { ModalOptions } from './types'\nimport { VNode, render, AppContext, h, nextTick } from 'vue'\n\ntype OptionKeys = keyof ModalOptions;\n\nconst getNodeProps = (vNode: VNode): Record<OptionKeys, any> => {\n  return (vNode.component?.props as Record<OptionKeys, any>) || {}\n}\n\nconst destroy = (el: HTMLElement | null | undefined, vNode: VNode | null) => {\n  if (el) {\n    render(null, el)\n    el.remove()\n  }\n\n  el = null\n  vNode = null\n}\n\nconst mount = (\n  component: any,\n  { props, appContext }: { props?: ModalOptions; appContext?: AppContext } = {},\n): { vNode: VNode; el?: HTMLElement } => {\n  const el: HTMLElement | undefined = document?.createElement('div')\n\n  // eslint-disable-next-line prefer-const\n  let vNode: VNode | null\n\n  // handling the case when 'withoutTransitions = false'\n  const onClose = (event: HTMLElement) => {\n    props?.onClose?.(event)\n    destroy(el, vNode)\n  }\n\n  // handling the case when 'withoutTransitions = true'\n  const onUpdateModelValue = (value: boolean) => {\n    props?.['onUpdate:modelValue']?.(value)\n\n    if (props?.withoutTransitions && !value) {\n      nextTick(() => { // this is required for all handlers to execute\n        destroy(el, vNode)\n      })\n    }\n  }\n\n  vNode = h(component, {\n    ...props,\n    stateful: props?.stateful ?? true,\n    modelValue: true,\n    onClose,\n    'onUpdate:modelValue': onUpdateModelValue,\n  })\n\n  if (appContext) {\n    vNode.appContext = appContext\n  }\n\n  if (el) {\n    render(vNode, el)\n  }\n\n  return { vNode, el }\n}\n\nconst getModalOptions = (options: string | ModalOptions): ModalOptions => typeof options === 'string'\n  ? { message: options }\n  : options\n\nexport const createModalInstance = (customProps: ModalOptions | string, appContext?: AppContext): VNode => {\n  const { vNode, el } = mount(VaModal, { appContext, props: getModalOptions(customProps) })\n\n  if (el && vNode.el && getNodeProps(vNode)) {\n    document.body.appendChild(el.childNodes[0])\n  }\n\n  return vNode\n}\n"]},"metadata":{},"sourceType":"module"}