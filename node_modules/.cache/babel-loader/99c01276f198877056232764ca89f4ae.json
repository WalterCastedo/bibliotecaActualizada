{"ast":null,"code":"const useTimeFormatter = props => {\n  const formatDate = date => {\n    if (!date) {\n      return \"\";\n    }\n\n    if (props.ampm) {\n      return date.toLocaleTimeString(\"en-US\");\n    }\n\n    return date.toLocaleTimeString(\"en-GB\");\n  };\n\n  const sliceTime = (time, start, end) => time.split(\":\").slice(start, end).join(\":\");\n\n  const formatWithView = date => {\n    if (props.view === \"seconds\") {\n      return formatDate(date);\n    }\n\n    const [time, period] = formatDate(date).split(\" \");\n\n    if (props.view === \"minutes\") {\n      if (!period) {\n        return sliceTime(time, 0, 2);\n      }\n\n      return [sliceTime(time, 0, 2), period].join(\" \");\n    }\n\n    if (props.view === \"hours\") {\n      if (!period) {\n        return sliceTime(time, 0, 1);\n      }\n\n      return [sliceTime(time, 0, 1), period].join(\" \");\n    }\n\n    return \"\";\n  };\n\n  return {\n    format: date => props.format ? props.format(date) : formatWithView(date)\n  };\n};\n\nexport { useTimeFormatter as u };","map":{"version":3,"mappings":"AAAa,yBAAoBA,KAAD,IAI1B;EACE,mBAAcC,IAAD,IAAiB;IAClC,IAAI,CAACA,IAAL,EAAW;MAAS;IAAG;;IAEvB,IAAID,MAAME,IAAV,EAAgB;MACP,YAAKC,kBAAL,CAAwB,OAAxB;IACT;;IAEO,YAAKA,kBAAL,CAAwB,OAAxB;EAA+B,CAPlC;;EAUN,MAAMC,YAAY,CAACC,IAAD,EAAeC,KAAf,EAA8BC,GAA9B,KAA8CF,KAAKG,KAAL,CAAW,GAAX,EAAgBC,KAAhB,CAAsBH,KAAtB,EAA6BC,GAA7B,EAAkCG,IAAlC,CAAuC,GAAvC,CAAhE;;EAEM,uBAAkBT,IAAD,IAAiB;IAClC,UAAMU,IAAN,KAAe,SAAf,EAA0B;MAC5B,OAAOC,WAAWX,IAAX,CAAP;IACF;;IAEA,MAAM,CAACI,IAAD,EAAOQ,MAAP,IAAiBD,WAAWX,IAAX,EAAiBO,KAAjB,CAAuB,GAAvB,CAAvB;;IAEI,UAAMG,IAAN,KAAe,SAAf,EAA0B;MAC5B,IAAI,CAACE,MAAL,EAAa;QAAS,iBAAUR,IAAV,EAAgB,CAAhB,EAAmB,CAAnB;MAAsB;;MAErC,QAACD,UAAUC,IAAV,EAAgB,CAAhB,EAAmB,CAAnB,CAAD,EAAwBQ,MAAxB,EAAgCH,IAAhC,CAAqC,GAArC;IACT;;IAEI,UAAMC,IAAN,KAAe,OAAf,EAAwB;MAC1B,IAAI,CAACE,MAAL,EAAa;QAAS,iBAAUR,IAAV,EAAgB,CAAhB,EAAmB,CAAnB;MAAsB;;MAErC,QAACD,UAAUC,IAAV,EAAgB,CAAhB,EAAmB,CAAnB,CAAD,EAAwBQ,MAAxB,EAAgCH,IAAhC,CAAqC,GAArC;IACT;;IAEO;EAAA,CAnBH;;EAsBC;IACLI,QAASb,IAAD,IAAiBD,MAAMc,MAAN,GAAed,MAAMc,MAAN,CAAab,IAAb,CAAf,GAAoCc,eAAed,IAAf;EADxD;AAGT,CA1Ca","names":["props","date","ampm","toLocaleTimeString","sliceTime","time","start","end","split","slice","join","view","formatDate","period","format","formatWithView"],"sources":["../../../../../../src/components/va-time-input/hooks/time-text-formatter.ts"],"sourcesContent":["export const useTimeFormatter = (props: {\n  ampm?: boolean,\n  view?: 'hours' | 'minutes' | 'seconds'\n  format?: (date?: Date) => string\n}) => {\n  const formatDate = (date?: Date) => {\n    if (!date) { return '' }\n\n    if (props.ampm) {\n      return date.toLocaleTimeString('en-US')\n    }\n\n    return date.toLocaleTimeString('en-GB')\n  }\n\n  const sliceTime = (time: string, start: number, end: number) => time.split(':').slice(start, end).join(':')\n\n  const formatWithView = (date?: Date) => {\n    if (props.view === 'seconds') {\n      return formatDate(date)\n    }\n\n    const [time, period] = formatDate(date).split(' ')\n\n    if (props.view === 'minutes') {\n      if (!period) { return sliceTime(time, 0, 2) }\n\n      return [sliceTime(time, 0, 2), period].join(' ')\n    }\n\n    if (props.view === 'hours') {\n      if (!period) { return sliceTime(time, 0, 1) }\n\n      return [sliceTime(time, 0, 1), period].join(' ')\n    }\n\n    return ''\n  }\n\n  return {\n    format: (date?: Date) => props.format ? props.format(date) : formatWithView(date),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}