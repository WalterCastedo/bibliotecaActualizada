{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { computed, getCurrentInstance } from \"vue\";\nimport { a as useGlobalConfig } from \"../services/global-config/global-config.js\";\nconst sizesConfig = {\n  defaultSize: 48,\n  sizes: {\n    small: 32,\n    medium: 48,\n    large: 64\n  }\n};\nconst fontSizesConfig = {\n  defaultSize: 1,\n  sizes: {\n    small: 0.75,\n    medium: 1,\n    large: 1.25\n  }\n};\nconst useSizeProps = {\n  size: {\n    type: [String, Number],\n    default: \"\",\n    validator: size => {\n      return typeof size === \"string\" || typeof size === \"number\";\n    }\n  },\n  sizesConfig: {\n    type: Object,\n    default: () => sizesConfig\n  },\n  fontSizesConfig: {\n    type: Object,\n    default: () => fontSizesConfig\n  }\n};\nconst fontRegex = /(?<fontSize>\\d+)(?<extension>px|rem)/i;\n\nconst convertToRem = px => px / 16 - 0.5;\n\nconst useSize = (props, componentName = (_a => (_a = getCurrentInstance()) == null ? void 0 : _a.type.name)()) => {\n  const {\n    getGlobalConfig\n  } = useGlobalConfig();\n  const sizesConfigGlobal = computed(() => {\n    var _a2, _b;\n\n    return componentName ? (_b = (_a2 = getGlobalConfig().components) == null ? void 0 : _a2[componentName]) == null ? void 0 : _b.sizesConfig : void 0;\n  });\n  const sizeComputed = computed(() => {\n    var _a2, _b, _c;\n\n    const {\n      defaultSize,\n      sizes\n    } = props.sizesConfig;\n    const defaultSizeGlobal = (_a2 = sizesConfigGlobal.value) == null ? void 0 : _a2.defaultSize;\n\n    if (!props.size) {\n      return `${defaultSizeGlobal || defaultSize}px`;\n    }\n\n    if (typeof props.size === \"string\") {\n      const sizeFromGlobalConfig = (_c = (_b = sizesConfigGlobal.value) == null ? void 0 : _b.sizes) == null ? void 0 : _c[props.size];\n      const sizeFromProps = sizes[props.size];\n\n      if (sizeFromGlobalConfig) {\n        return `${sizeFromGlobalConfig}px`;\n      }\n\n      if (sizeFromProps) {\n        return `${sizeFromProps}px`;\n      }\n\n      return props.size;\n    }\n\n    return `${props.size}px`;\n  });\n  const fontSizeInRem = computed(() => {\n    const {\n      defaultSize,\n      sizes\n    } = props.fontSizesConfig;\n\n    if (!props.size) {\n      return defaultSize;\n    }\n\n    if (typeof props.size === \"string\") {\n      if (props.size in sizes) {\n        return sizes[props.size];\n      }\n\n      const fontSizeParsed = props.size.match(fontRegex);\n\n      if (!fontSizeParsed || !fontSizeParsed.groups) {\n        throw new Error(\"Size prop should be either valid string or number\");\n      }\n\n      const {\n        extension,\n        fontSize\n      } = fontSizeParsed.groups;\n      return extension === \"rem\" ? +fontSize : convertToRem(+fontSize);\n    }\n\n    return convertToRem(props.size);\n  });\n  const fontSizeComputed = computed(() => `${fontSizeInRem.value}rem`);\n  return {\n    sizeComputed,\n    fontSizeComputed,\n    fontSizeInRem\n  };\n};\n\nexport { useSize as a, useSizeProps as u };","map":{"version":3,"mappings":";;;AAKO,MAAMA,cAA0B;EACrCC,aAAa,EADwB;EAErCC,OAAO;IACLC,OAAO,EADF;IAELC,QAAQ,EAFH;IAGLC,OAAO;EAHF;AAF8B,CAAhC;AASA,MAAMC,kBAA8B;EACzCL,aAAa,CAD4B;EAEzCC,OAAO;IACLC,OAAO,IADF;IAELC,QAAQ,CAFH;IAGLC,OAAO;EAHF;AAFkC,CAApC;AAqBA,MAAME,eAAe;EAC1BC,MAAM;IACJC,MAAM,CAACC,MAAD,EAASC,MAAT,CADF;IAEJC,SAAS,EAFL;IAGJC,WAAYL,IAAD,IAA2B;MACpC,OAAO,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,QAAnD;IACF;EALI,CADoB;EAS1BR,aAAa;IACXS,MAAMK,MADK;IAEXF,SAAS,MAAMZ;EAFJ,CATa;EAc1BM,iBAAiB;IACfG,MAAMK,MADS;IAEfF,SAAS,MAAMN;EAFA;AAdS,CAArB;AAoBP,MAAMS,YAAY,uCAAlB;;AAEA,MAAMC,eAAgBC,EAAD,IAAgBA,KAAK,EAAL,GAAU,GAA/C;;AAEO,MAAMC,UAAU,CACrBC,KADqB,EAErBC,gBAAoC,yDAAsBX,IAAtB,CAA2BY,IAA3B,GAFf,KAGlB;EACG;IAAEC;EAAF,IAAsBC,iBAAtB;EAEA,0BAAoBC,SAAqB,MAAM;;;IACnD,OAAOJ,gBACF,+BAAkBK,UAAlB,yBAAuCL,aAAvC,yBAA+EpB,WAD7E,GAEH,MAFJ;EAGD,CAJyB,CAApB;EAMA,qBAAewB,SAAiB,MAAM;;;IACpC;MAAEvB,WAAF;MAAeC;IAAf,IAAyBiB,MAAMnB,WAA/B;IACA,0BAAoB,yBAAkB0B,KAAlB,yBAAyBzB,WAA7C;;IAEF,KAACkB,MAAMX,IAAP,EAAa;MAAE,OAAO,GAAGmB,qBAAqB1B,eAA/B;IAA+C;;IAE9D,WAAOkB,MAAMX,IAAb,KAAsB,QAAtB,EAAgC;MAClC,MAAMoB,uBAAuB,8BAAkBF,KAAlB,wBAAyBxB,KAAzB,wBAAiCiB,MAAMX,IAAvC,CAA7B;MACM,sBAAgBN,MAAMiB,MAAMX,IAAZ,CAAhB;;MAEN,IAAIoB,oBAAJ,EAA0B;QAAE,OAAO,GAAGA,wBAAV;MAAmC;;MAC/D,IAAIC,aAAJ,EAAmB;QAAE,OAAO,GAAGA,iBAAV;MAA4B;;MAEjD,OAAOV,MAAMX,IAAb;IACF;;IAEA,OAAO,GAAGW,MAAMX,QAAhB;EACD,CAjBoB,CAAf;EAmBA,sBAAgBgB,SAAiB,MAAM;IACrC;MAAEvB,WAAF;MAAeC;IAAf,IAAyBiB,MAAMb,eAA/B;;IAEF,KAACa,MAAMX,IAAP,EAAa;MAAS;IAAY;;IAElC,WAAOW,MAAMX,IAAb,KAAsB,QAAtB,EAAgC;MAC9B,UAAMA,IAAN,IAAcN,KAAd,EAAqB;QAAE,OAAOA,MAAMiB,MAAMX,IAAZ,CAAP;MAAyB;;MAEpD,MAAMsB,iBAAiBX,MAAMX,IAAN,CAAWuB,KAAX,CAAiBhB,SAAjB,CAAvB;;MACA,IAAI,CAACe,cAAD,IAAmB,CAACA,eAAeE,MAAvC,EAA+C;QACvC,UAAIC,KAAJ,CAAU,mDAAV;MACR;;MAEM;QAAEC,SAAF;QAAaC;MAAb,IAA0BL,eAAeE,MAAzC;MACN,OAAOE,cAAc,KAAd,GAAsB,CAACC,QAAvB,GAAkCnB,aAAa,CAACmB,QAAd,CAAzC;IACF;;IAEO,oBAAahB,MAAMX,IAAnB;EACR,CAlBqB,CAAhB;EAoBN,MAAM4B,mBAAmBZ,SAAiB,MAAM,GAAGa,cAAcX,UAAxC,CAAzB;EAEO;IACLY,YADK;IAELF,gBAFK;IAGLC;EAHK;AAKT,CA1DO","names":["sizesConfig","defaultSize","sizes","small","medium","large","fontSizesConfig","useSizeProps","size","type","String","Number","default","validator","Object","fontRegex","convertToRem","px","useSize","props","componentName","name","getGlobalConfig","useGlobalConfig","computed","components","value","defaultSizeGlobal","sizeFromGlobalConfig","sizeFromProps","fontSizeParsed","match","groups","Error","extension","fontSize","fontSizeComputed","fontSizeInRem","sizeComputed"],"sources":["../../../../src/composables/useSize.ts"],"sourcesContent":["import { computed, getCurrentInstance, PropType } from 'vue'\n\nimport { useGlobalConfig, SizeConfig } from '../services/global-config/global-config'\nimport type { VuesticComponentName } from '../services/vue-plugin/types/components'\n\nexport const sizesConfig: SizeConfig = {\n  defaultSize: 48,\n  sizes: {\n    small: 32,\n    medium: 48,\n    large: 64,\n  },\n}\n\nexport const fontSizesConfig: SizeConfig = {\n  defaultSize: 1,\n  sizes: {\n    small: 0.75,\n    medium: 1,\n    large: 1.25,\n  },\n}\n\ninterface SizeProps {\n  size: string | number;\n  sizesConfig: Record<string, any>;\n  fontSizesConfig: Record<string, any>;\n}\n\n/**\n * You could add these props to any component by destructuring them inside props option.\n * @example\n * props: { ...useSizeProps, componentsOwnProp, etc. }\n * It's better to add props at the beginning, to make sure that Component own props will be used instead in case of collision\n */\nexport const useSizeProps = {\n  size: {\n    type: [String, Number],\n    default: '',\n    validator: (size: string | number) => {\n      return typeof size === 'string' || typeof size === 'number'\n    },\n  },\n\n  sizesConfig: {\n    type: Object as PropType<Record<string, any>>,\n    default: () => sizesConfig,\n  },\n\n  fontSizesConfig: {\n    type: Object as PropType<Record<string, any>>,\n    default: () => fontSizesConfig,\n  },\n}\n\nconst fontRegex = /(?<fontSize>\\d+)(?<extension>px|rem)/i\n\nconst convertToRem = (px: number) => px / 16 - 0.5\n\nexport const useSize = (\n  props: SizeProps,\n  componentName: string | undefined = getCurrentInstance()?.type.name,\n) => {\n  const { getGlobalConfig } = useGlobalConfig()\n\n  const sizesConfigGlobal = computed<SizeConfig>(() => {\n    return componentName\n      ? (getGlobalConfig().components as any)?.[componentName as VuesticComponentName]?.sizesConfig\n      : undefined\n  })\n\n  const sizeComputed = computed<string>(() => {\n    const { defaultSize, sizes } = props.sizesConfig\n    const defaultSizeGlobal = sizesConfigGlobal.value?.defaultSize\n\n    if (!props.size) { return `${defaultSizeGlobal || defaultSize}px` }\n\n    if (typeof props.size === 'string') {\n      const sizeFromGlobalConfig = sizesConfigGlobal.value?.sizes?.[props.size]\n      const sizeFromProps = sizes[props.size]\n\n      if (sizeFromGlobalConfig) { return `${sizeFromGlobalConfig}px` }\n      if (sizeFromProps) { return `${sizeFromProps}px` }\n\n      return props.size\n    }\n\n    return `${props.size}px`\n  })\n\n  const fontSizeInRem = computed<number>(() => {\n    const { defaultSize, sizes } = props.fontSizesConfig\n\n    if (!props.size) { return defaultSize }\n\n    if (typeof props.size === 'string') {\n      if (props.size in sizes) { return sizes[props.size] }\n\n      const fontSizeParsed = props.size.match(fontRegex)\n      if (!fontSizeParsed || !fontSizeParsed.groups) {\n        throw new Error('Size prop should be either valid string or number')\n      }\n\n      const { extension, fontSize } = fontSizeParsed.groups\n      return extension === 'rem' ? +fontSize : convertToRem(+fontSize)\n    }\n\n    return convertToRem(props.size)\n  })\n\n  const fontSizeComputed = computed<string>(() => `${fontSizeInRem.value}rem`)\n\n  return {\n    sizeComputed,\n    fontSizeComputed,\n    fontSizeInRem,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}