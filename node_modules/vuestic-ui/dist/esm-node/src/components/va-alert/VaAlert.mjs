import { defineComponent, computed, resolveComponent, openBlock, createBlock, Transition, withCtx, createElementVNode, normalizeStyle, normalizeClass, createElementBlock, renderSlot, createVNode, createCommentVNode, createTextVNode, toDisplayString, withKeys } from "vue";
import { g as generateUniqueId } from "../../utils/uuid.mjs";



import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";



import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useTranslation } from "../../composables/useTranslation.mjs";
import { u as useAlertStyles } from "./useAlertStyles.mjs";
import { V as VaIcon } from "../va-icon/index.mjs";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
var VaAlert_vue_vue_type_style_index_0_lang = /* @__PURE__ */ (() => ':root{--va-alert-position: relative;--va-alert-display: flex;--va-alert-align-items: center;--va-alert-margin-y: .25rem;--va-alert-padding-x: .75rem;--va-alert-padding-y: .75rem;--va-alert-padding-y-dense: .25rem;--va-alert-border-width: 0;--va-alert-border-radius: 4px;--va-alert-box-shadow: var(--va-box-shadow);--va-alert-color: transparent;--va-alert-title-font-weight: 600;--va-alert-top-border-radius: 4px 4px 0 0;--va-alert-right-border-radius: 0 4px 4px 0;--va-alert-bottom-border-radius: 0 0 4px 4px;--va-alert-left-border-radius: 4px 0 0 4px;--va-badge-margin-right: .5rem;--va-badge-padding-x: .5rem;--va-badge-padding-y: .125rem;--va-badge-border-radius: .5rem;--va-badge-font-size: .625rem;--va-badge-letter-spacing: .0625rem;--va-alert-close-padding-x: .5rem;--va-alert-close-padding-y: .0625rem;--va-alert-close-font-size: 1rem;--va-alert-stripe-border-size: var(--va-stripe-border-size)}.va-alert{position:var(--va-alert-position);padding:var(--va-alert-padding-y) var(--va-alert-padding-x);margin:var(--va-alert-margin-y) auto;display:var(--va-alert-display);align-items:var(--va-alert-align-items);border:var(--va-alert-border-width, var(--va-control-border)) solid transparent;border-radius:var(--va-alert-border-radius, var(--va-block-border-radius));font-family:var(--va-font-family)}.va-alert__border{content:"";position:absolute}.va-alert__border--top{border-radius:var(--va-alert-top-border-radius);width:100%;height:var(--va-alert-stripe-border-size);top:0;left:0}.va-alert__border--right{border-radius:var(--va-alert-right-border-radius);height:100%;width:var(--va-alert-stripe-border-size);bottom:0;right:0}.va-alert__border--bottom{border-radius:var(--va-alert-bottom-border-radius);width:100%;height:var(--va-alert-stripe-border-size);bottom:0;left:0}.va-alert__border--left{border-radius:var(--va-alert-left-border-radius);height:100%;width:var(--va-alert-stripe-border-size);bottom:0;left:0}.va-alert__icon{display:flex;align-items:center;padding-right:var(--va-alert-padding-x)}.va-alert__title{display:flex;align-items:center}.va-alert__content{display:flex;flex-direction:column;justify-content:center;flex-grow:1;color:var(--va-alert-color)}.va-alert:focus-visible{outline:2px solid var(--va-focus)!important;border-radius:"inherit"}.va-alert__close{padding-left:var(--va-alert-close-padding-x);font-size:var(--va-alert-close-font-size)}.va-alert__close--closeable{display:flex;align-items:center;cursor:pointer}.va-alert__close--closeable:focus-visible{outline:2px solid var(--va-focus)!important;border-radius:"inherit"}@media (max-width: 575.98px){.va-alert__content{flex-direction:column;align-items:flex-start}.va-alert__close{align-self:flex-start;display:flex;align-items:flex-start;padding:0 var(--va-alert-close-padding-x) 0 0;margin:0}}\n')();
const _sfc_main = defineComponent({
  name: "VaAlert",
  components: { VaIcon },
  emits: useStatefulEmits,
  props: {
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: Boolean, default: true },
    color: { type: String, default: "primary" },
    textColor: { type: String, default: "" },
    title: { type: String, default: "" },
    description: { type: String, default: "" },
    icon: { type: String, default: "" },
    closeText: { type: String, default: "" },
    closeable: { type: Boolean, default: false },
    dense: { type: Boolean, default: false },
    outline: { type: Boolean, default: false },
    center: { type: Boolean, default: false },
    borderColor: { type: String, default: "" },
    border: {
      type: String,
      default: "",
      validator: (value) => ["top", "right", "bottom", "left", ""].includes(value)
    }
  },
  setup(props, { slots, emit }) {
    const alertStyles = useAlertStyles(props);
    const { valueComputed } = useStateful(props, emit);
    const hide = () => {
      valueComputed.value = false;
    };
    const hasIcon = computed(() => props.icon || slots.icon);
    const hasTitle = computed(() => props.title || slots.title);
    const borderClass = computed(() => `va-alert__border--${props.border}`);
    const closeIcon = computed(() => props.closeText || "close");
    const uniqueId = computed(generateUniqueId);
    const titleIdComputed = computed(() => `aria-title-${uniqueId.value}`);
    const descriptionIdComputed = computed(() => `aria-description-${uniqueId.value}`);
    return {
      ...useTranslation(),
      ...alertStyles,
      valueComputed,
      hasIcon,
      hasTitle,
      borderClass,
      closeIcon,
      hide,
      titleIdComputed,
      descriptionIdComputed
    };
  }
});
const _hoisted_1 = ["role", "aria-labelledby", "aria-describedby"];
const _hoisted_2 = ["id"];
const _hoisted_3 = ["id"];
const _hoisted_4 = {
  key: 1,
  class: "va-alert__close"
};
const _hoisted_5 = ["aria-label"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  return _ctx.valueComputed ? (openBlock(), createBlock(Transition, {
    key: 0,
    name: "fade"
  }, {
    default: withCtx(() => [
      createElementVNode("div", {
        class: "va-alert",
        style: normalizeStyle(_ctx.alertStyle),
        role: _ctx.closeable ? "alertdialog" : "alert",
        "aria-labelledby": _ctx.titleIdComputed,
        "aria-describedby": _ctx.descriptionIdComputed
      }, [
        createElementVNode("div", {
          style: normalizeStyle(_ctx.borderStyle),
          class: normalizeClass([_ctx.borderClass, "va-alert__border"])
        }, null, 6),
        _ctx.hasIcon ? (openBlock(), createElementBlock("div", {
          key: 0,
          style: normalizeStyle(_ctx.contentStyle),
          class: "va-alert__icon",
          "aria-hidden": "true"
        }, [
          renderSlot(_ctx.$slots, "icon", {}, () => [
            createVNode(_component_va_icon, { name: _ctx.icon }, null, 8, ["name"])
          ])
        ], 4)) : createCommentVNode("", true),
        createElementVNode("div", {
          style: normalizeStyle(_ctx.contentStyle),
          class: "va-alert__content"
        }, [
          _ctx.hasTitle ? (openBlock(), createElementBlock("div", {
            key: 0,
            style: normalizeStyle(_ctx.titleStyle),
            class: "va-alert__title",
            id: _ctx.titleIdComputed
          }, [
            renderSlot(_ctx.$slots, "title", {}, () => [
              createTextVNode(toDisplayString(_ctx.title), 1)
            ])
          ], 12, _hoisted_2)) : createCommentVNode("", true),
          createElementVNode("span", { id: _ctx.descriptionIdComputed }, [
            renderSlot(_ctx.$slots, "default", {}, () => [
              createTextVNode(toDisplayString(_ctx.$props.description), 1)
            ])
          ], 8, _hoisted_3)
        ], 4),
        _ctx.closeable ? (openBlock(), createElementBlock("div", _hoisted_4, [
          createElementVNode("div", {
            role: "button",
            class: "va-alert__close--closeable",
            tabindex: "0",
            "aria-label": _ctx.closeText || _ctx.t("closeAlert"),
            style: normalizeStyle(_ctx.contentStyle),
            onClick: _cache[0] || (_cache[0] = (...args) => _ctx.hide && _ctx.hide(...args)),
            onKeydown: [
              _cache[1] || (_cache[1] = withKeys((...args) => _ctx.hide && _ctx.hide(...args), ["space"])),
              _cache[2] || (_cache[2] = withKeys((...args) => _ctx.hide && _ctx.hide(...args), ["enter"]))
            ]
          }, [
            renderSlot(_ctx.$slots, "close", {}, () => [
              !_ctx.closeText ? (openBlock(), createBlock(_component_va_icon, {
                key: 0,
                name: _ctx.closeIcon,
                size: "small"
              }, null, 8, ["name"])) : createCommentVNode("", true),
              createTextVNode(" " + toDisplayString(_ctx.closeText), 1)
            ])
          ], 44, _hoisted_5)
        ])) : createCommentVNode("", true)
      ], 12, _hoisted_1)
    ]),
    _: 3
  })) : createCommentVNode("", true);
}
var _VaAlert = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaAlert as _ };
//# sourceMappingURL=VaAlert.mjs.map
