import { defineComponent, computed, toRef, resolveComponent, openBlock, createBlock, resolveDynamicComponent, normalizeClass, normalizeStyle, withCtx, createElementVNode, mergeProps, toHandlers, createCommentVNode, renderSlot, withModifiers, withKeys } from "vue";
import { p as pick_1 } from "../../../vendor.mjs";
import { a as getBoxShadowColor, b as getFocusColor, c as getHoverColor } from "../../services/color/utils.mjs";
import { u as useBem } from "../../composables/useBem.mjs";
import { a as useColorProps, u as useColors } from "../../composables/useColors.mjs";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.mjs";


import { u as useHover } from "../../composables/useHover.mjs";

import { u as useKeyboardOnlyFocus } from "../../composables/useKeyboardOnlyFocus.mjs";

import { u as useRouterLinkProps, a as useRouterLink } from "../../composables/useRouterLink.mjs";
import { u as useStatefulEmits, a as useStatefulProps, b as useStateful } from "../../composables/useStateful.mjs";
import { u as useTextColor } from "../../composables/useTextColor.mjs";
import { u as useTranslation } from "../../composables/useTranslation.mjs";
import { V as VaIcon } from "../va-icon/index.mjs";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.mjs";
var VaChip_vue_vue_type_style_index_0_lang = /* @__PURE__ */ (() => ":root{--va-chip-display: inline-flex;--va-chip-border: .125rem solid transparent;--va-chip-position: relative;--va-chip-border-radius: 2rem;--va-chip-width: auto;--va-chip-height: auto;--va-chip-min-width: initial;--va-chip-min-height: initial;--va-chip-padding: 0 .3rem;--va-chip-color: #ffffff;--va-chip-cursor: default;--va-chip-font-size: 1rem;--va-chip-vertical-align: middle;--va-chip-inner-display: inline-flex;--va-chip-inner-align-items: center;--va-chip-inner-width: 100%;--va-chip-hover-opacity: .85;--va-chip-content-display: flex;--va-chip-content-width: var(--va-chip-inner-width, 100%);--va-chip-content-align-items: center;--va-chip-content-justify-content: center;--va-chip-content-padding: 0 .3rem;--va-chip-content-line-height: 1.6;--va-chip-square-border-radius: .2rem;--va-chip-sm-height: 1.5rem;--va-chip-sm-font-size: .875rem;--va-chip-lg-height: 2.5rem;--va-chip-lg-font-size: 1.25rem}.va-chip{display:var(--va-chip-display);border:var(--va-chip-border, var(--va-control-border));position:var(--va-chip-position);border-radius:var(--va-chip-border-radius);width:var(--va-chip-width);height:var(--va-chip-height);min-width:var(--va-chip-min-width);min-height:var(--va-chip-min-height);padding:var(--va-chip-padding);color:var(--va-chip-color);cursor:var(--va-chip-cursor);font-size:var(--va-chip-font-size);font-family:var(--va-font-family);vertical-align:var(--va-chip-vertical-align)}.va-chip__inner{display:var(--va-chip-inner-display);align-items:var(--va-chip-inner-align-items);width:var(--va-chip-inner-width);vertical-align:inherit}.va-chip:hover:not(.va-chip--readonly){opacity:var(--va-chip-hover-opacity)}.va-chip__content{display:var(--va-chip-content-display);justify-content:var(--va-chip-content-justify-content);align-items:var(--va-chip-content-align-items);padding:var(--va-chip-content-padding);line-height:var(--va-chip-content-line-height);width:var(--va-chip-content-width)}.va-chip__close-icon{cursor:pointer}.va-chip--disabled .va-chip__close-icon{cursor:default!important}.va-chip--square{border-radius:var(--va-chip-square-border-radius, var(--va-square-border-radius))}.va-chip--small{height:var(--va-chip-sm-height);font-size:var(--va-chip-sm-font-size)}.va-chip--large{height:var(--va-chip-lg-height);font-size:var(--va-chip-lg-font-size)}.va-chip.va-chip--disabled{cursor:default;opacity:.4;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}\n")();
const _sfc_main = defineComponent({
  name: "VaChip",
  components: { VaIcon },
  emits: [...useStatefulEmits, "focus"],
  props: {
    ...useRouterLinkProps,
    ...useColorProps,
    ...useStatefulProps,
    ...useComponentPresetProp,
    modelValue: { type: Boolean, default: true },
    closeable: { type: Boolean, default: false },
    outline: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    readonly: { type: Boolean, default: false },
    square: { type: Boolean, default: false },
    shadow: { type: Boolean, default: false },
    flat: { type: Boolean, default: false },
    icon: { type: String, default: "" },
    tag: { type: String, default: "span" },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["small", "medium", "large"].includes(value)
    }
  },
  setup(props, { emit }) {
    const { getColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const borderColor = computed(() => props.outline ? colorComputed.value : "");
    const isTransparentBackground = computed(() => Boolean(props.outline || props.flat));
    const { textColorComputed } = useTextColor(toRef(props, "color"), isTransparentBackground);
    const size = {
      small: "0.875rem",
      medium: "1rem",
      large: "1.25rem"
    };
    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
    const shadowStyle = computed(() => {
      if (!props.shadow || props.flat || props.outline || props.disabled || hasKeyboardFocus.value) {
        return;
      }
      return `0 0.125rem 0.19rem 0 ${getBoxShadowColor(colorComputed.value)}`;
    });
    const { valueComputed } = useStateful(props, emit);
    const { tagComputed, hrefComputed } = useRouterLink(props);
    const { isHovered, onMouseEnter, onMouseLeave } = useHover();
    return {
      ...useTranslation(),
      keyboardFocusListeners,
      valueComputed,
      hrefComputed,
      tagComputed,
      onMouseEnter,
      onMouseLeave,
      isHovered,
      close: () => {
        if (!props.disabled) {
          valueComputed.value = false;
        }
      },
      iconSize: computed(() => size[props.size]),
      tabIndexComputed: computed(() => props.disabled ? -1 : 0),
      computedClass: useBem("va-chip", () => ({
        ...pick_1(props, ["disabled", "readonly", "square"]),
        small: props.size === "small",
        large: props.size === "large"
      })),
      computedStyle: computed(() => {
        const result = {
          color: textColorComputed.value,
          borderColor: borderColor.value,
          background: "",
          boxShadow: shadowStyle.value
        };
        if (props.outline || props.flat) {
          if (hasKeyboardFocus.value) {
            result.background = getFocusColor(colorComputed.value);
          } else if (!props.readonly && isHovered.value) {
            result.background = getHoverColor(colorComputed.value);
          }
        } else {
          result.background = colorComputed.value;
        }
        return result;
      })
    };
  }
});
const _hoisted_1 = { class: "va-chip__content" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  return _ctx.valueComputed ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.tagComputed), {
    key: 0,
    class: normalizeClass(["va-chip", _ctx.computedClass]),
    href: _ctx.hrefComputed,
    target: _ctx.target,
    to: _ctx.to,
    replace: _ctx.replace,
    exact: _ctx.exact,
    "active-class": _ctx.activeClass,
    "exact-active-class": _ctx.exactActiveClass,
    style: normalizeStyle(_ctx.computedStyle)
  }, {
    default: withCtx(() => [
      createElementVNode("span", mergeProps({
        class: "va-chip__inner",
        onFocus: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("focus")),
        onMouseenter: _cache[1] || (_cache[1] = (...args) => _ctx.onMouseEnter && _ctx.onMouseEnter(...args)),
        onMouseleave: _cache[2] || (_cache[2] = (...args) => _ctx.onMouseLeave && _ctx.onMouseLeave(...args))
      }, toHandlers(_ctx.keyboardFocusListeners)), [
        _ctx.icon ? (openBlock(), createBlock(_component_va_icon, {
          key: 0,
          class: "va-chip__icon",
          name: _ctx.icon,
          size: _ctx.iconSize
        }, null, 8, ["name", "size"])) : createCommentVNode("", true),
        createElementVNode("span", _hoisted_1, [
          renderSlot(_ctx.$slots, "default")
        ]),
        _ctx.closeable ? (openBlock(), createBlock(_component_va_icon, {
          key: 1,
          role: "button",
          name: "va-close",
          class: "va-chip__close-icon",
          "aria-label": _ctx.t("close"),
          tabindex: _ctx.tabIndexComputed,
          size: _ctx.iconSize,
          onClick: withModifiers(_ctx.close, ["stop"]),
          onKeydown: [
            withKeys(withModifiers(_ctx.close, ["stop"]), ["enter"]),
            withKeys(withModifiers(_ctx.close, ["stop"]), ["space"])
          ]
        }, null, 8, ["aria-label", "tabindex", "size", "onClick", "onKeydown"])) : createCommentVNode("", true)
      ], 16)
    ]),
    _: 3
  }, 8, ["href", "target", "to", "replace", "exact", "active-class", "exact-active-class", "class", "style"])) : createCommentVNode("", true);
}
var _VaChip = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaChip as _ };
//# sourceMappingURL=VaChip.mjs.map
