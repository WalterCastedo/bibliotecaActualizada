{"version":3,"file":"useVirtualScrollerSizes.mjs","sources":["../../../../../src/components/va-virtual-scroller/useVirtualScrollerSizes.ts"],"sourcesContent":["import {\n  PropType,\n  ExtractPropTypes,\n  ref,\n  Ref,\n  shallowRef,\n  computed,\n  watch,\n  onMounted,\n  getCurrentInstance,\n} from 'vue'\n\nimport { useEvent } from '../../composables'\nimport { warn } from '../../utils/console'\n\n// TODO: Move this to composable?\nexport const isParsableMeasure = (value: unknown): value is string => {\n  if (typeof value === 'string') {\n    return (!isNaN(+value) ||\n      value.endsWith('px') ||\n      value.endsWith('rem'))\n  }\n  return false\n}\n\nexport const isParsablePositiveMeasure = (value: unknown) => {\n  if (typeof value === 'number') {\n    return value >= 0\n  }\n  return isParsableMeasure(value) && parseInt(value) >= 0\n}\n\nconst validateSizeProp = (v: number | string, propName: string) => {\n  const isProperValue = isParsablePositiveMeasure(v)\n\n  !isProperValue &&\n  warn(`[va-virtual-scroller] ${propName} should be number or parsable int greater or equal to 0. Provided: ${v}.`)\n\n  return isProperValue\n}\n\nexport const useVirtualScrollerSizesProps = {\n  horizontal: { type: Boolean, default: false },\n  itemSize: {\n    type: [Number, String] as PropType<string | number>,\n    default: 0,\n    validator: (v: number | string) => { return validateSizeProp(v, 'itemSize') },\n  },\n  wrapperSize: {\n    type: [Number, String] as PropType<string | number>,\n    default: 100,\n    validator: (v: number | string) => { return validateSizeProp(v, 'wrapperSize') },\n  },\n}\n\nexport const useVirtualScrollerSizes = (\n  props: ExtractPropTypes<typeof useVirtualScrollerSizesProps>,\n  scrollPosition: Ref<number>,\n) => {\n  const list = shallowRef<HTMLElement>()\n  const wrapper = shallowRef<HTMLElement>()\n\n  const parseSizeValue = (value: number | string) => {\n    if (typeof value === 'string') {\n      const parsedValue = parseInt(value)\n\n      if (isNaN(parsedValue)) { return 0 }\n\n      return value.endsWith('rem') ? parsedValue * pageFontSize.value : parsedValue\n    }\n    return value\n  }\n\n  const wrapperSize = computed(() => {\n    return parseSizeValue(props.wrapperSize)\n  })\n\n  const pageFontSize = ref(16)\n  const handleWindowResize = () => {\n    pageFontSize.value = parseFloat(getComputedStyle(document.documentElement).fontSize)\n  }\n  useEvent('resize', handleWindowResize, true)\n\n  const itemSizeCalculated = ref(0)\n  const calcAverageItemsSize = () => {\n    if (!list.value) { return }\n\n    const sizes: number[] = []\n    const itemsList = list.value.children\n    const itemsAmount = itemsList.length\n\n    for (let i = 0; i < itemsAmount; i++) {\n      const currentChild = list.value.children.item(i)\n      currentChild && sizes.push(currentChild[props.horizontal ? 'clientWidth' : 'clientHeight'])\n    }\n\n    itemSizeCalculated.value = itemsAmount\n      ? Math.trunc(sizes.reduce((acc, el) => acc + el, 0) / (itemsAmount - 1))\n      : 0\n  }\n\n  const instance = getCurrentInstance()\n  onMounted(() => {\n    if (!list.value) { list.value = instance?.parent?.refs?.list as HTMLElement | undefined }\n    calcAverageItemsSize()\n  })\n  watch(scrollPosition, calcAverageItemsSize)\n  watch(wrapperSize, calcAverageItemsSize)\n\n  let oldItemSize = 0\n  const itemSize = computed(() => {\n    const sizeParsed = parseSizeValue(props.itemSize)\n\n    const result = Math.max(sizeParsed, itemSizeCalculated.value, 1)\n    const diff = Math.abs(((oldItemSize / result) * 100) - 100)\n\n    /**\n     * 5 - empirically derived number, some kind of debounce but without freezes.\n     * While recalculating rendered items average size, if difference is too small, this can cause list 'shaking' because of algorithm:\n     * `rendering items -> calculating their size -> rebuilding list total size -> items offset -> rendering items`\n     * This smoothing is intended to prevent such cases.\n     */\n    if (diff > 5 || oldItemSize === 0) {\n      oldItemSize = result\n      return result\n    }\n\n    return oldItemSize\n  })\n\n  return { list, wrapper, itemSize, wrapperSize }\n}\n"],"names":[],"mappings":";;;;;;;;AAgBa,MAAA,oBAAoB,CAAC,UAAoC;AAChE,MAAA,OAAO,UAAU,UAAU;AACrB,WAAA,CAAC,MAAM,CAAC,KAAK,KACnB,MAAM,SAAS,IAAI,KACnB,MAAM,SAAS,KAAK;AAAA,EACxB;AACO,SAAA;AACT;AAEa,MAAA,4BAA4B,CAAC,UAAmB;AACvD,MAAA,OAAO,UAAU,UAAU;AAC7B,WAAO,SAAS;AAAA,EAClB;AACA,SAAO,kBAAkB,KAAK,KAAK,SAAS,KAAK,KAAK;AACxD;AAEA,MAAM,mBAAmB,CAAC,GAAoB,aAAqB;AAC3D,QAAA,gBAAgB,0BAA0B,CAAC;AAK1C,SAAA;AACT;AAEO,MAAM,+BAA+B;AAAA,EAC1C,YAAY,EAAE,MAAM,SAAS,SAAS,MAAM;AAAA,EAC5C,UAAU;AAAA,IACR,MAAM,CAAC,QAAQ,MAAM;AAAA,IACrB,SAAS;AAAA,IACT,WAAW,CAAC,MAAuB;AAAS,aAAA,iBAAiB,CAAa;AAAA,IAAE;AAAA,EAC9E;AAAA,EACA,aAAa;AAAA,IACX,MAAM,CAAC,QAAQ,MAAM;AAAA,IACrB,SAAS;AAAA,IACT,WAAW,CAAC,MAAuB;AAAS,aAAA,iBAAiB,CAAgB;AAAA,IAAE;AAAA,EACjF;AACF;AAEa,MAAA,0BAA0B,CACrC,OACA,mBACG;AACH,QAAM,OAAO;AACb,QAAM,UAAU;AAEV,QAAA,iBAAiB,CAAC,UAA2B;AAC7C,QAAA,OAAO,UAAU,UAAU;AACvB,YAAA,cAAc,SAAS,KAAK;AAE9B,UAAA,MAAM,WAAW,GAAG;AAAS,eAAA;AAAA,MAAE;AAEnC,aAAO,MAAM,SAAS,KAAK,IAAI,cAAc,aAAa,QAAQ;AAAA,IACpE;AACO,WAAA;AAAA,EAAA;AAGH,QAAA,cAAc,SAAS,MAAM;AAC1B,WAAA,eAAe,MAAM,WAAW;AAAA,EAAA,CACxC;AAEK,QAAA,eAAe,IAAI,EAAE;AAC3B,QAAM,qBAAqB,MAAM;AAC/B,iBAAa,QAAQ,WAAW,iBAAiB,SAAS,eAAe,EAAE,QAAQ;AAAA,EAAA;AAE5E,WAAA,UAAU,oBAAoB,IAAI;AAErC,QAAA,qBAAqB,IAAI,CAAC;AAChC,QAAM,uBAAuB,MAAM;AAC7B,QAAA,CAAC,KAAK,OAAO;AAAE;AAAA,IAAO;AAE1B,UAAM,QAAkB,CAAA;AAClB,UAAA,YAAY,KAAK,MAAM;AAC7B,UAAM,cAAc,UAAU;AAE9B,aAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACpC,YAAM,eAAe,KAAK,MAAM,SAAS,KAAK,CAAC;AAC/C,sBAAgB,MAAM,KAAK,aAAa,MAAM,aAAa,gBAAgB,eAAe;AAAA,IAC5F;AAEA,uBAAmB,QAAQ,cACvB,KAAK,MAAM,MAAM,OAAO,CAAC,KAAK,OAAO,MAAM,IAAI,CAAC,IAAK,eAAc,EAAE,IACrE;AAAA,EAAA;AAGN,QAAM,WAAW;AACjB,YAAU,MAAM;;AACV,QAAA,CAAC,KAAK,OAAO;AAAO,WAAA,QAAQ,iDAAU,WAAV,mBAAkB,SAAlB,mBAAwB;AAAA,IAAgC;AACnE;EAAA,CACtB;AACD,QAAM,gBAAgB,oBAAoB;AAC1C,QAAM,aAAa,oBAAoB;AAEvC,MAAI,cAAc;AACZ,QAAA,WAAW,SAAS,MAAM;AACxB,UAAA,aAAa,eAAe,MAAM,QAAQ;AAEhD,UAAM,SAAS,KAAK,IAAI,YAAY,mBAAmB,OAAO,CAAC;AAC/D,UAAM,OAAO,KAAK,IAAM,cAAc,SAAU,MAAO,GAAG;AAQtD,QAAA,OAAO,KAAK,gBAAgB,GAAG;AACnB,oBAAA;AACP,aAAA;AAAA,IACT;AAEO,WAAA;AAAA,EAAA,CACR;AAED,SAAO,EAAE,MAAM,SAAS,UAAU,YAAY;AAChD;;"}