import { ref, watch, onBeforeUnmount, unref } from "vue";
const useIntersectionObserver = (cb, options = {}, targetsList = ref([])) => {
  const observer = ref();
  const disconnectObserver = () => {
    var _a;
    (_a = observer.value) == null ? void 0 : _a.disconnect();
  };
  const observeTarget = (target) => {
    var _a;
    const disclosedTarget = unref(target);
    disclosedTarget && ((_a = observer.value) == null ? void 0 : _a.observe(disclosedTarget));
  };
  const observeAll = (targets) => {
    const disclosedTargets = unref(targets);
    disclosedTargets.forEach(observeTarget);
  };
  const initObserver = () => {
    observer.value = new IntersectionObserver(cb, unref(options));
  };
  watch([targetsList, options], ([newList, newOptions], [oldList, oldOptions]) => {
    disconnectObserver();
    if (newOptions !== oldOptions) {
      if (newList.length) {
        initObserver();
        observeAll(newList);
      }
      return;
    }
    if (newList.length) {
      if (!observer.value) {
        initObserver();
      }
      observeAll(newList);
    }
  }, { immediate: true });
  onBeforeUnmount(disconnectObserver);
  return observer;
};
export { useIntersectionObserver as u };
//# sourceMappingURL=useIntersectionObserver.mjs.map
