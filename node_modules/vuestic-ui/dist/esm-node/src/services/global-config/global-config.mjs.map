{"version":3,"file":"global-config.mjs","sources":["../../../../../src/services/global-config/global-config.ts"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep.js'\nimport { ref, getCurrentInstance } from 'vue'\nimport { GlobalConfig, GlobalConfigUpdater, PartialGlobalConfig, ProvidedGlobalConfig } from './types'\nimport { getComponentsDefaultConfig } from '../component-config'\nimport { getIconDefaultConfig } from '../icon'\nimport { getColorDefaultConfig } from '../color'\nimport { getI18nConfigDefaults } from '../i18n'\nimport { getBreakpointDefaultConfig } from '../breakpoint'\nimport { getGlobalProperty } from '../vue-plugin/utils'\nimport { inject } from '../current-app'\nimport { mergeDeep } from '../../utils/merge-deep'\n\nexport const GLOBAL_CONFIG = Symbol('GLOBAL_CONFIG')\n\nexport const createGlobalConfig = () => {\n  const globalConfig = ref<GlobalConfig>({\n    colors: getColorDefaultConfig(),\n    icons: getIconDefaultConfig(),\n    components: getComponentsDefaultConfig(),\n    breakpoint: getBreakpointDefaultConfig(),\n    i18n: getI18nConfigDefaults(),\n  })\n\n  const getGlobalConfig = (): GlobalConfig => globalConfig.value\n  const setGlobalConfig = (updater: GlobalConfig | GlobalConfigUpdater<GlobalConfig>) => {\n    const config = typeof updater === 'function' ? updater(globalConfig.value) : updater\n    globalConfig.value = cloneDeep(config)\n  }\n\n  const mergeGlobalConfig = (updater: PartialGlobalConfig | GlobalConfigUpdater<PartialGlobalConfig>) => {\n    const config = typeof updater === 'function' ? updater(globalConfig.value) : updater\n    globalConfig.value = mergeDeep(cloneDeep(globalConfig.value), config)\n  }\n\n  return {\n    getGlobalConfig,\n    setGlobalConfig,\n    mergeGlobalConfig,\n    globalConfig,\n  }\n}\n\n/** Use this function if you don't want to throw error if hook used outside setup function by useGlobalConfig */\nexport function useGlobalConfigSafe () {\n  return inject<ProvidedGlobalConfig>(GLOBAL_CONFIG)\n}\n\nexport function useGlobalConfig (): ProvidedGlobalConfig {\n  const injected = inject<ProvidedGlobalConfig>(GLOBAL_CONFIG)\n\n  if (!injected) {\n    // TODO: Hotfix, maybe deal with inject\n    const vm = getCurrentInstance()\n    if (!vm) { throw new Error('useGlobalConfig must be called in setup function') }\n\n    const config = getGlobalProperty(vm.appContext, '$vaConfig')\n\n    if (!config) {\n      throw new Error('Vuestic GlobalConfigPlugin is not registered')\n    }\n\n    return config\n  }\n\n  return injected\n}\n\nexport * from './types'\n"],"names":["cloneDeep"],"mappings":";;;;;;;;;;;;AAYa,MAAA,gBAAgB,OAAO,eAAe;AAE5C,MAAM,qBAAqB,MAAM;AACtC,QAAM,eAAe,IAAkB;AAAA,IACrC,QAAQ,sBAAsB;AAAA,IAC9B,OAAO,qBAAqB;AAAA,IAC5B,YAAY,2BAA2B;AAAA,IACvC,YAAY,2BAA2B;AAAA,IACvC,MAAM,sBAAsB;AAAA,EAAA,CAC7B;AAEK,QAAA,kBAAkB,MAAoB,aAAa;AACnD,QAAA,kBAAkB,CAAC,YAA8D;AACrF,UAAM,SAAS,OAAO,YAAY,aAAa,QAAQ,aAAa,KAAK,IAAI;AAChE,iBAAA,QAAQA,YAAU,MAAM;AAAA,EAAA;AAGjC,QAAA,oBAAoB,CAAC,YAA4E;AACrG,UAAM,SAAS,OAAO,YAAY,aAAa,QAAQ,aAAa,KAAK,IAAI;AAC7E,iBAAa,QAAQ,UAAUA,YAAU,aAAa,KAAK,GAAG,MAAM;AAAA,EAAA;AAG/D,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;AAGuC,+BAAA;AACrC,SAAO,OAA6B,aAAa;AACnD;AAEyD,2BAAA;AACjD,QAAA,WAAW,OAA6B,aAAa;AAE3D,MAAI,CAAC,UAAU;AAEb,UAAM,KAAK;AACX,QAAI,CAAC,IAAI;AAAQ,YAAA,IAAI,MAAM,kDAAkD;AAAA,IAAE;AAE/E,UAAM,SAAS,kBAAkB,GAAG,YAAY,WAAW;AAE3D,QAAI,CAAC,QAAQ;AACL,YAAA,IAAI,MAAM,8CAA8C;AAAA,IAChE;AAEO,WAAA;AAAA,EACT;AAEO,SAAA;AACT;;"}