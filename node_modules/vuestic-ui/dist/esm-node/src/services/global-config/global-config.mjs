import { j as cloneDeep_1 } from "../../../vendor.mjs";
import { getCurrentInstance, ref } from "vue";
import { g as getComponentsDefaultConfig } from "../component-config/config/default.mjs";

import { g as getIconDefaultConfig } from "../icon/config/default.mjs";
import { g as getColorDefaultConfig } from "../color/config/default.mjs";

import { g as getI18nConfigDefaults } from "../i18n/config/default.mjs";
import { g as getBreakpointDefaultConfig } from "../breakpoint/index.mjs";
import { g as getGlobalProperty } from "../vue-plugin/utils/global-properties.mjs";
import { i as inject } from "../current-app.mjs";
import { m as mergeDeep } from "../../utils/merge-deep.mjs";
const GLOBAL_CONFIG = Symbol("GLOBAL_CONFIG");
const createGlobalConfig = () => {
  const globalConfig = ref({
    colors: getColorDefaultConfig(),
    icons: getIconDefaultConfig(),
    components: getComponentsDefaultConfig(),
    breakpoint: getBreakpointDefaultConfig(),
    i18n: getI18nConfigDefaults()
  });
  const getGlobalConfig = () => globalConfig.value;
  const setGlobalConfig = (updater) => {
    const config = typeof updater === "function" ? updater(globalConfig.value) : updater;
    globalConfig.value = cloneDeep_1(config);
  };
  const mergeGlobalConfig = (updater) => {
    const config = typeof updater === "function" ? updater(globalConfig.value) : updater;
    globalConfig.value = mergeDeep(cloneDeep_1(globalConfig.value), config);
  };
  return {
    getGlobalConfig,
    setGlobalConfig,
    mergeGlobalConfig,
    globalConfig
  };
};
function useGlobalConfigSafe() {
  return inject(GLOBAL_CONFIG);
}
function useGlobalConfig() {
  const injected = inject(GLOBAL_CONFIG);
  if (!injected) {
    const vm = getCurrentInstance();
    if (!vm) {
      throw new Error("useGlobalConfig must be called in setup function");
    }
    const config = getGlobalProperty(vm.appContext, "$vaConfig");
    if (!config) {
      throw new Error("Vuestic GlobalConfigPlugin is not registered");
    }
    return config;
  }
  return injected;
}
export { GLOBAL_CONFIG as G, useGlobalConfig as a, createGlobalConfig as c, useGlobalConfigSafe as u };
//# sourceMappingURL=global-config.mjs.map
