import { PropType } from 'vue';
import { ButtonOption } from './types';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    options: {
        type: PropType<ButtonOption[]>;
        required: true;
    };
    activeButtonTextColor: {
        type: StringConstructor;
    };
    toggleColor: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    replace: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    tag: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    type: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        required: true;
        default: "small" | "medium" | "large";
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    icon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    backgroundOpacity: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    hoverBehavior: {
        type: PropType<"mask" | "opacity">;
        required: true;
        default: "mask" | "opacity";
    };
    hoverOpacity: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    pressedBehavior: {
        type: PropType<"mask" | "opacity">;
        required: true;
        default: "mask" | "opacity";
    };
    pressedOpacity: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    plain: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    textOpacity: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    target: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    href: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    append: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    to: {
        type: PropType<string | Record<string, any>>;
        required: true;
        default: string | Record<string, any>;
    };
    exact: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    activeClass: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    exactActiveClass: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    loading: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    textColor: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    borderColor: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    gradient: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    round: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    iconRight: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    iconColor: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    pressedMaskColor: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    hoverMaskColor: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    grow: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
}, {
    buttonGroupPropsComputed: import("vue").ComputedRef<import("lodash").Omit<Readonly<import("@vue/shared").LooseRequired<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        options: {
            type: PropType<ButtonOption[]>;
            required: true;
        };
        activeButtonTextColor: {
            type: StringConstructor;
        };
        toggleColor: {
            type: StringConstructor;
            default: string;
        };
        preset: {
            type: StringConstructor;
            default: undefined;
        };
        replace: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        tag: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        color: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        type: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        size: {
            type: PropType<"small" | "medium" | "large">;
            required: true;
            default: "small" | "medium" | "large";
        };
        sizesConfig: {
            type: PropType<Record<string, any>>;
            required: true;
            default: Record<string, any>;
        };
        fontSizesConfig: {
            type: PropType<Record<string, any>>;
            required: true;
            default: Record<string, any>;
        };
        icon: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        disabled: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        backgroundOpacity: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        hoverBehavior: {
            type: PropType<"mask" | "opacity">;
            required: true;
            default: "mask" | "opacity";
        };
        hoverOpacity: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        pressedBehavior: {
            type: PropType<"mask" | "opacity">;
            required: true;
            default: "mask" | "opacity";
        };
        pressedOpacity: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        plain: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        textOpacity: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        target: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        href: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        append: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        to: {
            type: PropType<string | Record<string, any>>;
            required: true;
            default: string | Record<string, any>;
        };
        exact: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        activeClass: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        exactActiveClass: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        loading: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        textColor: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        borderColor: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        gradient: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        round: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        iconRight: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        iconColor: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        pressedMaskColor: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        hoverMaskColor: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        grow: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }>>, "modelValue" | "options" | "activeButtonTextColor" | "toggleColor">>;
    getButtonProps: (option?: ButtonOption) => {
        icon: string | undefined;
        iconRight: string | undefined;
    };
    changeValue: (value: any) => void;
    isToggled: (value: any) => boolean;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    options: {
        type: PropType<ButtonOption[]>;
        required: true;
    };
    activeButtonTextColor: {
        type: StringConstructor;
    };
    toggleColor: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    replace: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    tag: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    color: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    type: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    size: {
        type: PropType<"small" | "medium" | "large">;
        required: true;
        default: "small" | "medium" | "large";
    };
    sizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    fontSizesConfig: {
        type: PropType<Record<string, any>>;
        required: true;
        default: Record<string, any>;
    };
    icon: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    backgroundOpacity: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    hoverBehavior: {
        type: PropType<"mask" | "opacity">;
        required: true;
        default: "mask" | "opacity";
    };
    hoverOpacity: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    pressedBehavior: {
        type: PropType<"mask" | "opacity">;
        required: true;
        default: "mask" | "opacity";
    };
    pressedOpacity: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    plain: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    textOpacity: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    target: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    href: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    append: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    to: {
        type: PropType<string | Record<string, any>>;
        required: true;
        default: string | Record<string, any>;
    };
    exact: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    activeClass: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    exactActiveClass: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    loading: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    textColor: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    borderColor: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    gradient: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    round: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    iconRight: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    iconColor: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    pressedMaskColor: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    hoverMaskColor: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    grow: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    replace: boolean;
    tag: string;
    color: string;
    type: string;
    preset: string;
    size: "small" | "medium" | "large";
    sizesConfig: Record<string, any>;
    fontSizesConfig: Record<string, any>;
    modelValue: string | number;
    icon: string;
    disabled: boolean;
    backgroundOpacity: number;
    hoverBehavior: "mask" | "opacity";
    hoverOpacity: number;
    pressedBehavior: "mask" | "opacity";
    pressedOpacity: number;
    plain: boolean;
    textOpacity: number;
    target: string;
    href: string;
    append: boolean;
    to: string | Record<string, any>;
    exact: boolean;
    activeClass: string;
    exactActiveClass: string;
    loading: boolean;
    textColor: string;
    borderColor: string;
    gradient: boolean;
    round: boolean;
    iconRight: string;
    iconColor: string;
    pressedMaskColor: string;
    hoverMaskColor: string;
    grow: boolean;
    toggleColor: string;
}>;
export default _default;
