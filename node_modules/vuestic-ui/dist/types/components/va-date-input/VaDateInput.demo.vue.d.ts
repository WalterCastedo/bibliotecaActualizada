declare const _default: {
    components: {
        VaButton: import("vue").DefineComponent<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: NumberConstructor;
                default: number;
            };
            backgroundOpacity: {
                type: NumberConstructor;
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: NumberConstructor;
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }, {
            focus: () => void;
            blur: () => void;
            button: import("vue").ShallowRef<HTMLElement | undefined>;
            tagComputed: import("vue").ComputedRef<string>;
            computedClass: {
                [x: `va-button--${string}`]: boolean;
            } & {
                readonly asObject: import("vue").ComputedRef<{
                    [x: `va-button--${string}`]: boolean;
                }>;
                readonly asArray: import("vue").ComputedRef<`va-button--${string}`[]>;
                readonly asString: import("vue").ComputedRef<string>;
            };
            computedStyle: import("vue").ComputedRef<{
                color: string;
                background?: string | undefined;
                opacity?: number | undefined;
                'background-clip'?: "text" | undefined;
                '-webkit-background-clip'?: "text" | undefined;
                borderColor: string;
            }>;
            textColorComputed: import("vue").ComputedRef<string>;
            loaderSizeComputed: import("vue").ComputedRef<string>;
            attributesComputed: import("vue").ComputedRef<{
                'aria-disabled': boolean;
                disabled: boolean;
                type?: any;
                tabindex?: number | undefined;
                target?: string | undefined;
                href?: any;
                to?: string | Record<string, any> | undefined;
                replace?: boolean | undefined;
                append?: boolean | undefined;
                activeClass?: string | undefined;
                exact?: boolean | undefined;
                exactActiveClass?: string | undefined;
            }>;
            wrapperClassComputed: import("vue").ComputedRef<{
                'va-button__content--loading': boolean;
            }>;
            iconAttributesComputed: import("vue").ComputedRef<{
                size: "small" | "medium" | "large";
                color: string;
            }>;
            backgroundColor: import("vue").ComputedRef<string>;
            backgroundMaskColor: import("vue").ComputedRef<string>;
            backgroundMaskOpacity: import("vue").ComputedRef<number>;
            backgroundColorOpacity: import("vue").ComputedRef<number>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: NumberConstructor;
                default: number;
            };
            backgroundOpacity: {
                type: NumberConstructor;
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: NumberConstructor;
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, {
            replace: boolean;
            tag: string;
            color: string;
            type: string;
            preset: string;
            size: "small" | "medium" | "large";
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            icon: string;
            disabled: boolean;
            backgroundOpacity: number;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: number;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            plain: boolean;
            textOpacity: number;
            target: string;
            href: string;
            append: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            loading: boolean;
            textColor: string;
            borderColor: string;
            gradient: boolean;
            block: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            pressedMaskColor: string;
            hoverMaskColor: string;
        }>;
        VaDateInput: import("vue").DefineComponent<{
            clearValue: {
                type: import("vue").PropType<import("./types").DateInputModelValue>;
                default: undefined;
            };
            modelValue: {
                type: import("vue").PropType<import("./types").DateInputModelValue>;
            };
            resetOnClose: {
                type: BooleanConstructor;
                default: boolean;
            };
            isOpen: {
                type: BooleanConstructor;
                default: undefined;
            };
            format: {
                type: import("vue").PropType<(date: import("./types").DateInputModelValue) => string>;
            };
            formatDate: {
                type: import("vue").PropType<(date: Date) => string>;
                default: (d: Date) => string;
            };
            parse: {
                type: import("vue").PropType<(input: string) => import("./types").DateInputValue>;
            };
            parseDate: {
                type: import("vue").PropType<(input: string) => Date>;
            };
            parseValue: {
                type: import("vue").PropType<(date: import("./types").DateInputModelValue) => import("../va-date-picker/types").DatePickerModelValue>;
            };
            delimiter: {
                type: StringConstructor;
                default: string;
            };
            rangeDelimiter: {
                type: StringConstructor;
                default: string;
            };
            manualInput: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            leftIcon: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<((v: any) => any)[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<((v: import("./types").DateInputModelValue) => any)[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            type: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerType>;
                required: true;
                default: import("../va-date-picker/types").DatePickerType;
            };
            mode: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                required: true;
                default: import("../va-date-picker/types").DatePickerMode;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightWeekend: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightToday: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            monthNames: {
                type: import("vue").PropType<string[]>;
                required: true;
                default: string[];
            };
            weekdayNames: {
                type: import("vue").PropType<string[]>;
                required: true;
                default: string[];
            };
            firstWeekday: {
                type: import("vue").PropType<"Monday" | "Sunday">;
                required: true;
                default: "Monday" | "Sunday";
            };
            hideWeekDays: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            showOtherMonths: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            startYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            endYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            view: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerView | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:modelValue": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            textColor: {
                type: import("vue").PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedDays: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            weekends: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:view": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedMonths: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedYears: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            weekendsColor: {
                type: import("vue").PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            label: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            background: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            outline: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            bordered: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            requiredMark: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            counterValue: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            maxLength: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            onClick: {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            placement: {
                type: import("vue").PropType<import("..").Placement>;
                required: true;
                default: import("..").Placement;
            };
            offset: {
                type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
                required: true;
                default: import("../va-dropdown/types").DropdownOffsetProp;
            };
            keepAnchorWidth: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autoPlacement: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stickToEdges: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            anchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            innerAnchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            preventOverflow: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            isContentHoverable: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnContentClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnClickOutside: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnAnchorClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            hoverOverTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            hoverOutTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            cursor: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            trigger: {
                type: import("vue").PropType<"click" | "hover" | "dblclick" | "none" | "right-click">;
                required: true;
                default: "click" | "hover" | "dblclick" | "none" | "right-click";
            };
            keyboardNavigation: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            target: {
                type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
                required: false;
                default: undefined;
            };
        }, {
            t: (key: string, values?: Record<string, string | number | boolean | undefined> | undefined) => string;
            datePicker: import("vue").Ref<import("vue").DefineComponent<{
                modelValue: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                };
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    default: string[];
                };
                weekdayNames: {
                    type: import("vue").PropType<string[]>;
                    default: string[];
                };
                view: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                };
                type: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerType>;
                    default: string;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: undefined;
                };
                weekendsColor: {
                    type: StringConstructor;
                    default: undefined;
                };
                mode: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                    required: true;
                    default: import("../va-date-picker/types").DatePickerMode;
                };
                highlightToday: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                startYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                endYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                allowedYears: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:modelValue": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                allowedMonths: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                highlightWeekend: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                firstWeekday: {
                    type: import("vue").PropType<"Monday" | "Sunday">;
                    required: true;
                    default: "Monday" | "Sunday";
                };
                hideWeekDays: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                showOtherMonths: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                allowedDays: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                weekends: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                textColor: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:view": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                stateful: {
                    type: import("vue").PropType<boolean>;
                    default: boolean;
                };
            }, {
                dayPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                    readonly: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerView;
                    };
                    color: {
                        type: import("vue").PropType<string>;
                        required: true;
                        default: string;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerMode;
                    };
                    highlightWeekend: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    highlightToday: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                        default: string[];
                    };
                    weekdayNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                        default: string[];
                    };
                    firstWeekday: {
                        type: import("vue").PropType<"Monday" | "Sunday">;
                        required: true;
                        default: "Monday" | "Sunday";
                    };
                    hideWeekDays: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    showOtherMonths: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                        required: false;
                        default: undefined;
                    };
                    allowedDays: {
                        type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    weekends: {
                        type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onUpdate:modelValue": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onHover:day": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onClick:day": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                }>>;
                headerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                    disabled: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    monthNames: {
                        type: import("vue").PropType<unknown[]>;
                        required: true;
                        default: unknown[];
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView | undefined>;
                        required: false;
                        default: undefined;
                    };
                    color: {
                        type: import("vue").PropType<string | undefined>;
                        required: false;
                        default: undefined;
                    };
                    textColor: {
                        type: import("vue").PropType<string | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onUpdate:view": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                }>>;
                monthPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                    readonly: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerView;
                    };
                    color: {
                        type: import("vue").PropType<string>;
                        required: true;
                        default: string;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerMode;
                    };
                    highlightToday: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                        default: string[];
                    };
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                        required: false;
                        default: undefined;
                    };
                    allowedMonths: {
                        type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onUpdate:modelValue": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onHover:month": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onClick:month": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                }>>;
                yearPickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                    readonly: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerView;
                    };
                    color: {
                        type: import("vue").PropType<string>;
                        required: true;
                        default: string;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        required: true;
                        default: import("../va-date-picker/types").DatePickerMode;
                    };
                    highlightToday: {
                        type: import("vue").PropType<boolean>;
                        required: true;
                        default: boolean;
                    };
                    startYear: {
                        type: import("vue").PropType<number>;
                        required: true;
                        default: number;
                    };
                    endYear: {
                        type: import("vue").PropType<number>;
                        required: true;
                        default: number;
                    };
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                        required: false;
                        default: undefined;
                    };
                    allowedYears: {
                        type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onUpdate:modelValue": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onHover:year": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                    "onClick:year": {
                        type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                        required: false;
                        default: undefined;
                    };
                }>>;
                syncView: import("vue").WritableComputedRef<import("../va-date-picker/types").DatePickerView>;
                classComputed: import("vue").ComputedRef<{
                    'va-date-picker_without-week-days': boolean;
                    'va-date-picker_disabled': boolean;
                }>;
                valueComputed: import("vue").WritableComputedRef<any>;
                onDayModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
                onMonthClick: (date: Date) => void;
                onMonthModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
                onYearClick: (date: Date) => void;
                onYearModelValueUpdate: (modelValue: import("../va-date-picker/types").DatePickerModelValue) => void;
                styleComputed: import("vue").ComputedRef<{
                    color: string;
                }>;
                currentPicker: import("vue").Ref<import("vue").DefineComponent<{
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    weekdayNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    firstWeekday: {
                        type: import("vue").PropType<"Monday" | "Sunday">;
                        default: string;
                    };
                    hideWeekDays: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    showOtherMonths: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    allowedDays: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                    };
                    weekends: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                    };
                    highlightWeekend: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }, {
                    hoveredIndex: import("vue").Ref<number>;
                    calendarDates: import("vue").ComputedRef<Date[]>;
                    onClick: (date: Date) => void;
                    isToday: (date: Date) => boolean;
                    isSelected: (date: Date) => boolean;
                    isInRange: (date: Date) => boolean;
                    isOtherMonth: (date: Date) => boolean;
                    isDateDisabled: (date: Date) => boolean;
                    isDateWeekend: (date: Date) => boolean;
                    containerAttributes: {
                        onFocus: () => void;
                        onKeydown: (e: KeyboardEvent) => void;
                        onBlur: () => void;
                        onMousedown: () => void;
                        tabindex: number;
                    };
                    weekdayNamesComputed: import("vue").ComputedRef<string[]>;
                    focusedCellIndex: import("vue").Ref<number>;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:day" | "click:day")[], "update:modelValue" | "hover:day" | "click:day", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    weekdayNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    firstWeekday: {
                        type: import("vue").PropType<"Monday" | "Sunday">;
                        default: string;
                    };
                    hideWeekDays: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    showOtherMonths: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    allowedDays: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                    };
                    weekends: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                    };
                    highlightWeekend: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    "onHover:day"?: ((...args: any[]) => any) | undefined;
                    "onClick:day"?: ((...args: any[]) => any) | undefined;
                }, {
                    readonly: boolean;
                    view: import("../va-date-picker/types").DatePickerView;
                    color: string;
                    mode: import("../va-date-picker/types").DatePickerMode;
                    highlightWeekend: boolean;
                    highlightToday: boolean;
                    firstWeekday: "Monday" | "Sunday";
                    hideWeekDays: boolean;
                    showOtherMonths: boolean;
                }> | import("vue").DefineComponent<{
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    allowedMonths: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                        default: undefined;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }, {
                    months: import("vue").ComputedRef<Date[]>;
                    hoveredIndex: import("vue").Ref<number>;
                    onClick: (date: Date) => void;
                    isToday: (date: Date) => boolean;
                    isSelected: (date: Date) => boolean;
                    isInRange: (date: Date) => boolean;
                    isDisabled: (date: Date) => boolean;
                    containerAttributes: {
                        onFocus: () => void;
                        onKeydown: (e: KeyboardEvent) => void;
                        onBlur: () => void;
                        onMousedown: () => void;
                        tabindex: number;
                    };
                    focusedCellIndex: import("vue").Ref<number>;
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:month" | "click:month")[], "update:modelValue" | "hover:month" | "click:month", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    monthNames: {
                        type: import("vue").PropType<string[]>;
                        required: true;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    allowedMonths: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                        default: undefined;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    "onHover:month"?: ((...args: any[]) => any) | undefined;
                    "onClick:month"?: ((...args: any[]) => any) | undefined;
                }, {
                    readonly: boolean;
                    view: import("../va-date-picker/types").DatePickerView;
                    color: string;
                    mode: import("../va-date-picker/types").DatePickerMode;
                    highlightToday: boolean;
                    allowedMonths: (date: Date) => boolean;
                }> | import("vue").DefineComponent<{
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    allowedYears: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                        default: undefined;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    startYear: {
                        type: NumberConstructor;
                        default: number;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    endYear: {
                        type: NumberConstructor;
                        default: () => number;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }, {
                    hoveredIndex: import("vue").Ref<number>;
                    years: import("vue").ComputedRef<Date[]>;
                    rootNode: import("vue").ShallowRef<HTMLElement | undefined>;
                    onClick: (date: Date) => void;
                    isToday: (date: Date) => boolean;
                    isSelected: (date: Date) => boolean;
                    isInRange: (date: Date) => boolean;
                    isYearDisabled: (year: Date) => boolean;
                    focusedCellIndex: import("vue").Ref<number>;
                    containerAttributes: {
                        onFocus: () => void;
                        onKeydown: (e: KeyboardEvent) => void;
                        onBlur: () => void;
                        onMousedown: () => void;
                        tabindex: number;
                    };
                }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "hover:year" | "click:year")[], "update:modelValue" | "hover:year" | "click:year", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                    modelValue: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    };
                    allowedYears: {
                        type: import("vue").PropType<(date: Date) => boolean>;
                        default: undefined;
                    };
                    highlightToday: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    startYear: {
                        type: NumberConstructor;
                        default: number;
                    };
                    mode: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                        default: string;
                    };
                    view: {
                        type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                        default: () => {
                            type: string;
                        };
                    };
                    endYear: {
                        type: NumberConstructor;
                        default: () => number;
                    };
                    readonly: {
                        type: BooleanConstructor;
                        default: boolean;
                    };
                    color: {
                        type: StringConstructor;
                        default: string;
                    };
                }>> & {
                    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
                    "onHover:year"?: ((...args: any[]) => any) | undefined;
                    "onClick:year"?: ((...args: any[]) => any) | undefined;
                }, {
                    readonly: boolean;
                    view: import("../va-date-picker/types").DatePickerView;
                    color: string;
                    mode: import("../va-date-picker/types").DatePickerMode;
                    highlightToday: boolean;
                    allowedYears: (date: Date) => boolean;
                    startYear: number;
                    endYear: number;
                }> | undefined>;
                textColorComputed: import("vue").ComputedRef<string>;
                focusCurrentPicker: () => any;
                isPickerReadonly: (pickerName: "day" | "year" | "month") => boolean;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                };
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    default: string[];
                };
                weekdayNames: {
                    type: import("vue").PropType<string[]>;
                    default: string[];
                };
                view: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerView>;
                };
                type: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerType>;
                    default: string;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                color: {
                    type: StringConstructor;
                    default: undefined;
                };
                weekendsColor: {
                    type: StringConstructor;
                    default: undefined;
                };
                mode: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                    required: true;
                    default: import("../va-date-picker/types").DatePickerMode;
                };
                highlightToday: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                startYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                endYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                allowedYears: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:modelValue": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                allowedMonths: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                highlightWeekend: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                firstWeekday: {
                    type: import("vue").PropType<"Monday" | "Sunday">;
                    required: true;
                    default: "Monday" | "Sunday";
                };
                hideWeekDays: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                showOtherMonths: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                allowedDays: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                weekends: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                textColor: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:view": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                preset: {
                    type: StringConstructor;
                    default: undefined;
                };
                stateful: {
                    type: import("vue").PropType<boolean>;
                    default: boolean;
                };
            }>> & {
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            }, {
                readonly: boolean;
                color: string;
                type: import("../va-date-picker/types").DatePickerType;
                preset: string;
                mode: import("../va-date-picker/types").DatePickerMode;
                "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
                disabled: boolean;
                stateful: boolean;
                textColor: string | undefined;
                highlightWeekend: boolean;
                highlightToday: boolean;
                "onHover:day": ((...args: any[]) => any) | undefined;
                "onClick:day": ((...args: any[]) => any) | undefined;
                monthNames: string[];
                weekdayNames: string[];
                firstWeekday: "Monday" | "Sunday";
                hideWeekDays: boolean;
                showOtherMonths: boolean;
                allowedDays: ((date: Date) => boolean) | undefined;
                weekends: ((date: Date) => boolean) | undefined;
                "onUpdate:view": ((...args: any[]) => any) | undefined;
                "onHover:month": ((...args: any[]) => any) | undefined;
                "onClick:month": ((...args: any[]) => any) | undefined;
                allowedMonths: ((date: Date) => boolean) | undefined;
                "onHover:year": ((...args: any[]) => any) | undefined;
                "onClick:year": ((...args: any[]) => any) | undefined;
                allowedYears: ((date: Date) => boolean) | undefined;
                startYear: number;
                endYear: number;
                weekendsColor: string;
            }> | undefined>;
            valueText: import("vue").ComputedRef<string>;
            valueWithoutText: import("vue").WritableComputedRef<import("./types").DateInputValue>;
            valueComputed: import("vue").WritableComputedRef<string | {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleDateString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleTimeString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                [Symbol.toPrimitive]: {
                    (hint: "default"): string;
                    (hint: "string"): string;
                    (hint: "number"): number;
                    (hint: string): string | number;
                };
            } | (string | {
                toString: () => string;
                toDateString: () => string;
                toTimeString: () => string;
                toLocaleString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleDateString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                toLocaleTimeString: {
                    (): string;
                    (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                };
                valueOf: () => number;
                getTime: () => number;
                getFullYear: () => number;
                getUTCFullYear: () => number;
                getMonth: () => number;
                getUTCMonth: () => number;
                getDate: () => number;
                getUTCDate: () => number;
                getDay: () => number;
                getUTCDay: () => number;
                getHours: () => number;
                getUTCHours: () => number;
                getMinutes: () => number;
                getUTCMinutes: () => number;
                getSeconds: () => number;
                getUTCSeconds: () => number;
                getMilliseconds: () => number;
                getUTCMilliseconds: () => number;
                getTimezoneOffset: () => number;
                setTime: (time: number) => number;
                setMilliseconds: (ms: number) => number;
                setUTCMilliseconds: (ms: number) => number;
                setSeconds: (sec: number, ms?: number | undefined) => number;
                setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                setDate: (date: number) => number;
                setUTCDate: (date: number) => number;
                setMonth: (month: number, date?: number | undefined) => number;
                setUTCMonth: (month: number, date?: number | undefined) => number;
                setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                toUTCString: () => string;
                toISOString: () => string;
                toJSON: (key?: any) => string;
                [Symbol.toPrimitive]: {
                    (hint: "default"): string;
                    (hint: "string"): string;
                    (hint: "number"): number;
                    (hint: string): string | number;
                };
            })[] | {
                start?: string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | null | undefined;
                end?: string | {
                    toString: () => string;
                    toDateString: () => string;
                    toTimeString: () => string;
                    toLocaleString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleDateString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    toLocaleTimeString: {
                        (): string;
                        (locales?: string | string[] | undefined, options?: Intl.DateTimeFormatOptions | undefined): string;
                    };
                    valueOf: () => number;
                    getTime: () => number;
                    getFullYear: () => number;
                    getUTCFullYear: () => number;
                    getMonth: () => number;
                    getUTCMonth: () => number;
                    getDate: () => number;
                    getUTCDate: () => number;
                    getDay: () => number;
                    getUTCDay: () => number;
                    getHours: () => number;
                    getUTCHours: () => number;
                    getMinutes: () => number;
                    getUTCMinutes: () => number;
                    getSeconds: () => number;
                    getUTCSeconds: () => number;
                    getMilliseconds: () => number;
                    getUTCMilliseconds: () => number;
                    getTimezoneOffset: () => number;
                    setTime: (time: number) => number;
                    setMilliseconds: (ms: number) => number;
                    setUTCMilliseconds: (ms: number) => number;
                    setSeconds: (sec: number, ms?: number | undefined) => number;
                    setUTCSeconds: (sec: number, ms?: number | undefined) => number;
                    setMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCMinutes: (min: number, sec?: number | undefined, ms?: number | undefined) => number;
                    setHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setUTCHours: (hours: number, min?: number | undefined, sec?: number | undefined, ms?: number | undefined) => number;
                    setDate: (date: number) => number;
                    setUTCDate: (date: number) => number;
                    setMonth: (month: number, date?: number | undefined) => number;
                    setUTCMonth: (month: number, date?: number | undefined) => number;
                    setFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    setUTCFullYear: (year: number, month?: number | undefined, date?: number | undefined) => number;
                    toUTCString: () => string;
                    toISOString: () => string;
                    toJSON: (key?: any) => string;
                    [Symbol.toPrimitive]: {
                        (hint: "default"): string;
                        (hint: "string"): string;
                        (hint: "number"): number;
                        (hint: string): string | number;
                    };
                } | null | undefined;
            } | undefined>;
            isOpenSync: import("vue").WritableComputedRef<boolean | undefined>;
            onInputTextChanged: ({ target }: Event) => void;
            isFocused: import("vue").Ref<boolean>;
            input: import("vue").ShallowRef<HTMLInputElement | undefined>;
            inputWrapperProps: import("vue").ComputedRef<{
                focused: boolean;
                error: boolean;
                errorMessages: string[];
                readonly: boolean;
                label: string;
                color: string;
                disabled: boolean;
                success: boolean;
                errorCount: string | number;
                messages: string | string[];
                immediateValidation: boolean;
                background: string;
                outline: boolean;
                bordered: boolean;
                requiredMark: boolean;
                onClick?: ((...args: any[]) => any) | undefined;
                modelValue?: undefined;
                counterValue?: number | undefined;
                rules?: ((v: any) => any)[] | undefined;
                "onClick-prepend"?: ((...args: any[]) => any) | undefined;
                "onClick-append"?: ((...args: any[]) => any) | undefined;
                "onClick-prepend-inner"?: ((...args: any[]) => any) | undefined;
                "onClick-append-inner"?: ((...args: any[]) => any) | undefined;
                maxLength?: number | undefined;
            }>;
            inputListeners: import("vue").ComputedRef<{
                focus: () => void;
                blur: () => void;
            }>;
            inputAttributesComputed: import("vue").ComputedRef<{
                'aria-invalid': boolean;
                'aria-errormessage': string;
                readonly: boolean;
                disabled: boolean;
                tabindex: number;
                value: string;
                ariaLabel: string;
                ariaRequired: boolean;
                ariaDisabled: boolean;
                ariaReadOnly: boolean;
            }>;
            datePickerProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                [x: string & `on${string}`]: {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                readonly: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                type: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerType>;
                    required: true;
                    default: import("../va-date-picker/types").DatePickerType;
                };
                mode: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                    required: true;
                    default: import("../va-date-picker/types").DatePickerMode;
                };
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                stateful: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                highlightWeekend: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                highlightToday: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                monthNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                    default: string[];
                };
                weekdayNames: {
                    type: import("vue").PropType<string[]>;
                    required: true;
                    default: string[];
                };
                firstWeekday: {
                    type: import("vue").PropType<"Monday" | "Sunday">;
                    required: true;
                    default: "Monday" | "Sunday";
                };
                hideWeekDays: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                showOtherMonths: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                startYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                endYear: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                view: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerView | undefined>;
                    required: false;
                    default: undefined;
                };
                color: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                preset: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:modelValue": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                modelValue: {
                    type: import("vue").PropType<import("../va-date-picker/types").DatePickerModelValue>;
                    required: false;
                    default: undefined;
                };
                textColor: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:day": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                allowedDays: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                weekends: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onUpdate:view": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:month": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                allowedMonths: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onHover:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                "onClick:year": {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                allowedYears: {
                    type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                    required: false;
                    default: undefined;
                };
                weekendsColor: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
            }>>;
            dropdownPropsComputed: import("vue").ComputedRef<{
                offset: import("../va-dropdown/types").DropdownOffsetProp;
                stateful: boolean;
                keyboardNavigation: boolean;
                closeOnContentClick: boolean;
                innerAnchorSelector: string;
                readonly: boolean;
                disabled: boolean;
                placement: import("..").Placement;
                keepAnchorWidth: boolean;
                autoPlacement: boolean;
                stickToEdges: boolean;
                anchorSelector: string;
                preventOverflow: boolean;
                isContentHoverable: boolean;
                closeOnClickOutside: boolean;
                closeOnAnchorClick: boolean;
                hoverOverTimeout: number;
                hoverOutTimeout: number;
                cursor: boolean;
                trigger: "click" | "hover" | "dblclick" | "none" | "right-click";
                preset?: string | undefined;
                modelValue?: boolean | undefined;
                target?: import("../../composables").MaybeHTMLElementOrSelector;
            }>;
            filterSlots: import("vue").ComputedRef<string[]>;
            canBeCleared: import("vue").ComputedRef<boolean>;
            clearIconProps: import("vue").ComputedRef<{
                name: string;
                color: string;
                size: string;
            }>;
            iconProps: import("vue").ComputedRef<{
                role: string;
                ariaHidden: boolean;
                size: string;
                name: string;
                color: string;
                tabindex: number;
            }>;
            cursorStyleComputed: import("vue").ComputedRef<{
                cursor?: undefined;
            } | {
                cursor: string;
            }>;
            hideAndFocus: () => void;
            toggleDropdown: (event: Event | KeyboardEvent) => void;
            showDropdown: () => void;
            focusInputOrPicker: () => void;
            focusDatePicker: () => void;
            reset: () => void;
            focus: () => void;
            blur: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            clearValue: {
                type: import("vue").PropType<import("./types").DateInputModelValue>;
                default: undefined;
            };
            modelValue: {
                type: import("vue").PropType<import("./types").DateInputModelValue>;
            };
            resetOnClose: {
                type: BooleanConstructor;
                default: boolean;
            };
            isOpen: {
                type: BooleanConstructor;
                default: undefined;
            };
            format: {
                type: import("vue").PropType<(date: import("./types").DateInputModelValue) => string>;
            };
            formatDate: {
                type: import("vue").PropType<(date: Date) => string>;
                default: (d: Date) => string;
            };
            parse: {
                type: import("vue").PropType<(input: string) => import("./types").DateInputValue>;
            };
            parseDate: {
                type: import("vue").PropType<(input: string) => Date>;
            };
            parseValue: {
                type: import("vue").PropType<(date: import("./types").DateInputModelValue) => import("../va-date-picker/types").DatePickerModelValue>;
            };
            delimiter: {
                type: StringConstructor;
                default: string;
            };
            rangeDelimiter: {
                type: StringConstructor;
                default: string;
            };
            manualInput: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            leftIcon: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<((v: any) => any)[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<((v: import("./types").DateInputModelValue) => any)[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            type: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerType>;
                required: true;
                default: import("../va-date-picker/types").DatePickerType;
            };
            mode: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerMode>;
                required: true;
                default: import("../va-date-picker/types").DatePickerMode;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightWeekend: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            highlightToday: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            monthNames: {
                type: import("vue").PropType<string[]>;
                required: true;
                default: string[];
            };
            weekdayNames: {
                type: import("vue").PropType<string[]>;
                required: true;
                default: string[];
            };
            firstWeekday: {
                type: import("vue").PropType<"Monday" | "Sunday">;
                required: true;
                default: "Monday" | "Sunday";
            };
            hideWeekDays: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            showOtherMonths: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            startYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            endYear: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            view: {
                type: import("vue").PropType<import("../va-date-picker/types").DatePickerView | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:modelValue": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            textColor: {
                type: import("vue").PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:day": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedDays: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            weekends: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onUpdate:view": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:month": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedMonths: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            "onHover:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick:year": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            allowedYears: {
                type: import("vue").PropType<((date: Date) => boolean) | undefined>;
                required: false;
                default: undefined;
            };
            weekendsColor: {
                type: import("vue").PropType<string | undefined>;
                required: false;
                default: undefined;
            };
            label: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            background: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            outline: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            bordered: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            focused: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            requiredMark: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            counterValue: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            maxLength: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            onClick: {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-prepend-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            "onClick-append-inner": {
                type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                required: false;
                default: undefined;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            placement: {
                type: import("vue").PropType<import("..").Placement>;
                required: true;
                default: import("..").Placement;
            };
            offset: {
                type: import("vue").PropType<import("../va-dropdown/types").DropdownOffsetProp>;
                required: true;
                default: import("../va-dropdown/types").DropdownOffsetProp;
            };
            keepAnchorWidth: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autoPlacement: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            stickToEdges: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            anchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            innerAnchorSelector: {
                type: import("vue").PropType<string>;
                required: true;
                default: string;
            };
            preventOverflow: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            isContentHoverable: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnContentClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnClickOutside: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            closeOnAnchorClick: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            hoverOverTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            hoverOutTimeout: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            cursor: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            trigger: {
                type: import("vue").PropType<"click" | "hover" | "dblclick" | "none" | "right-click">;
                required: true;
                default: "click" | "hover" | "dblclick" | "none" | "right-click";
            };
            keyboardNavigation: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            target: {
                type: import("vue").PropType<import("../../composables").MaybeHTMLElementOrSelector>;
                required: false;
                default: undefined;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            readonly: boolean;
            label: string;
            view: import("../va-date-picker/types").DatePickerView | undefined;
            color: string;
            type: import("../va-date-picker/types").DatePickerType;
            preset: string;
            onClick: ((...args: any[]) => any) | undefined;
            mode: import("../va-date-picker/types").DatePickerMode;
            "onUpdate:modelValue": ((...args: any[]) => any) | undefined;
            icon: string;
            disabled: boolean;
            clearable: boolean;
            stateful: boolean;
            success: boolean;
            target: import("../../composables").MaybeHTMLElementOrSelector;
            error: boolean;
            placement: import("..").Placement;
            offset: import("../va-dropdown/types").DropdownOffsetProp;
            keepAnchorWidth: boolean;
            autoPlacement: boolean;
            stickToEdges: boolean;
            counterValue: number | undefined;
            errorMessages: string | string[];
            errorCount: string | number;
            rules: ((v: import("./types").DateInputModelValue) => any)[];
            messages: string | string[];
            immediateValidation: boolean;
            background: string;
            textColor: string | undefined;
            outline: boolean;
            bordered: boolean;
            leftIcon: boolean;
            anchorSelector: string;
            innerAnchorSelector: string;
            preventOverflow: boolean;
            isContentHoverable: boolean;
            closeOnContentClick: boolean;
            closeOnClickOutside: boolean;
            closeOnAnchorClick: boolean;
            hoverOverTimeout: number;
            hoverOutTimeout: number;
            cursor: boolean;
            trigger: "click" | "hover" | "dblclick" | "none" | "right-click";
            keyboardNavigation: boolean;
            "onClick-prepend": ((...args: any[]) => any) | undefined;
            "onClick-append": ((...args: any[]) => any) | undefined;
            "onClick-prepend-inner": ((...args: any[]) => any) | undefined;
            "onClick-append-inner": ((...args: any[]) => any) | undefined;
            maxLength: number | undefined;
            focused: boolean;
            requiredMark: boolean;
            clearableIcon: string;
            clearValue: import("./types").DateInputModelValue;
            manualInput: boolean;
            highlightWeekend: boolean;
            highlightToday: boolean;
            "onHover:day": ((...args: any[]) => any) | undefined;
            "onClick:day": ((...args: any[]) => any) | undefined;
            monthNames: string[];
            weekdayNames: string[];
            firstWeekday: "Monday" | "Sunday";
            hideWeekDays: boolean;
            showOtherMonths: boolean;
            allowedDays: ((date: Date) => boolean) | undefined;
            weekends: ((date: Date) => boolean) | undefined;
            "onUpdate:view": ((...args: any[]) => any) | undefined;
            "onHover:month": ((...args: any[]) => any) | undefined;
            "onClick:month": ((...args: any[]) => any) | undefined;
            allowedMonths: ((date: Date) => boolean) | undefined;
            "onHover:year": ((...args: any[]) => any) | undefined;
            "onClick:year": ((...args: any[]) => any) | undefined;
            allowedYears: ((date: Date) => boolean) | undefined;
            startYear: number;
            endYear: number;
            weekendsColor: string | undefined;
            resetOnClose: boolean;
            isOpen: boolean;
            formatDate: (date: Date) => string;
            delimiter: string;
            rangeDelimiter: string;
        }>;
        VaChip: import("vue").DefineComponent<{
            modelValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            closeable: {
                type: BooleanConstructor;
                default: boolean;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            square: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
            flat: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (value: string) => boolean;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
        }, {
            keyboardFocusListeners: {
                mousedown: () => void;
                focus: () => void;
                blur: () => void;
            };
            valueComputed: import("vue").WritableComputedRef<any>;
            hrefComputed: import("vue").ComputedRef<any>;
            tagComputed: import("vue").ComputedRef<string>;
            onMouseEnter: () => void;
            onMouseLeave: () => void;
            isHovered: import("vue").Ref<boolean>;
            close: () => void;
            iconSize: import("vue").ComputedRef<string>;
            tabIndexComputed: import("vue").ComputedRef<0 | -1>;
            computedClass: {
                [x: `va-chip--${string}`]: boolean;
            } & {
                readonly asObject: import("vue").ComputedRef<{
                    [x: `va-chip--${string}`]: boolean;
                }>;
                readonly asArray: import("vue").ComputedRef<`va-chip--${string}`[]>;
                readonly asString: import("vue").ComputedRef<string>;
            };
            computedStyle: import("vue").ComputedRef<{
                color: string;
                borderColor: string;
                background: string;
                boxShadow: string | undefined;
            }>;
            tp: <Key extends string | undefined>(key: Key) => Key;
            t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: BooleanConstructor;
                default: boolean;
            };
            closeable: {
                type: BooleanConstructor;
                default: boolean;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            square: {
                type: BooleanConstructor;
                default: boolean;
            };
            shadow: {
                type: BooleanConstructor;
                default: boolean;
            };
            flat: {
                type: BooleanConstructor;
                default: boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            tag: {
                type: StringConstructor;
                default: string;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (value: string) => boolean;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            readonly: boolean;
            replace: boolean;
            flat: boolean;
            tag: string;
            color: string;
            preset: string;
            size: "small" | "medium" | "large";
            modelValue: boolean;
            icon: string;
            disabled: boolean;
            stateful: boolean;
            shadow: boolean;
            target: string;
            href: string;
            append: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            closeable: boolean;
            outline: boolean;
            square: boolean;
        }>;
    };
    data(): {
        value: Date;
        range: {
            start: Date;
            end: Date;
        };
        dates: Date[];
        dayView: {
            type: string;
            month: number;
            year: number;
        };
        string: string;
        strings: (string | number)[];
        stringRange: {
            start: string;
            end: number;
        };
        validationRules1: ((value: Date) => boolean)[];
        validationRules2: ((value: Date) => true | "Should be 10th day")[];
        isOpen: boolean;
    };
    methods: {
        resetModelValue(): void;
        setModelValue(): void;
        focusDateInput(): void;
        blurDateInput(): void;
    };
};
export default _default;
