export declare const VaCardContent: import("vue").DefineComponent<{}, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
export declare const VaCardTitle: import("vue").DefineComponent<{
    textColor: {
        type: StringConstructor;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    titleStyles: import("vue").ComputedRef<{
        color: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    textColor: {
        type: StringConstructor;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>>, {
    preset: string;
}>;
export declare const VaCardActions: import("vue").DefineComponent<{
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    align: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    classComputed: {
        [x: `va-card__actions--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-card__actions--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-card__actions--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    alignComputed: import("vue").ComputedRef<{
        display: string;
        flexDirection: "column" | "row";
        justifyContent: string;
        alignItems: string;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    align: {
        type: StringConstructor;
        default: string;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    vertical: boolean;
    preset: string;
    align: string;
}>;
export declare const VaCardBlock: import("vue").DefineComponent<{
    horizontal: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    classComputed: import("vue").ComputedRef<{
        'va-card-block--horizontal': boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    horizontal: {
        type: BooleanConstructor;
        default: boolean;
    };
}>>, {
    horizontal: boolean;
}>;
export declare const VaCard: import("vue").DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    stripeColor: {
        type: StringConstructor;
        default: string;
    };
    gradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    textColor: {
        type: StringConstructor;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: string;
    };
    replace: {
        type: BooleanConstructor;
        default: boolean;
    };
    append: {
        type: BooleanConstructor;
        default: boolean;
    };
    exact: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: string;
    };
}, {
    classComputed: {
        [x: `va-card--${string}`]: boolean;
    } & {
        readonly asObject: import("vue").ComputedRef<{
            [x: `va-card--${string}`]: boolean;
        }>;
        readonly asArray: import("vue").ComputedRef<`va-card--${string}`[]>;
        readonly asString: import("vue").ComputedRef<string>;
    };
    cardStyles: import("vue").ComputedRef<{
        background: string;
        color: string;
    }>;
    stripeStyles: import("vue").ComputedRef<{
        background: string;
    }>;
    tagComputed: import("vue").ComputedRef<string>;
    hrefComputed: import("vue").ComputedRef<any>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    square: {
        type: BooleanConstructor;
        default: boolean;
    };
    outlined: {
        type: BooleanConstructor;
        default: boolean;
    };
    bordered: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    href: {
        type: StringConstructor;
        default: string;
    };
    target: {
        type: StringConstructor;
        default: string;
    };
    stripe: {
        type: BooleanConstructor;
        default: boolean;
    };
    stripeColor: {
        type: StringConstructor;
        default: string;
    };
    gradient: {
        type: BooleanConstructor;
        default: boolean;
    };
    textColor: {
        type: StringConstructor;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
    to: {
        type: import("vue").PropType<string | Record<string, any>>;
        default: string;
    };
    replace: {
        type: BooleanConstructor;
        default: boolean;
    };
    append: {
        type: BooleanConstructor;
        default: boolean;
    };
    exact: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeClass: {
        type: StringConstructor;
        default: string;
    };
    exactActiveClass: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    replace: boolean;
    tag: string;
    color: string;
    preset: string;
    disabled: boolean;
    target: string;
    href: string;
    append: boolean;
    to: string | Record<string, any>;
    exact: boolean;
    activeClass: string;
    exactActiveClass: string;
    gradient: boolean;
    square: boolean;
    bordered: boolean;
    outlined: boolean;
    stripe: boolean;
    stripeColor: string;
}>;
