import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    items: {
        type: PropType<any[]>;
        required: true;
    };
    autoscroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoscrollInterval: {
        type: NumberConstructor;
        default: number;
    };
    autoscrollPauseDuration: {
        type: NumberConstructor;
        default: number;
    };
    infinite: {
        type: BooleanConstructor;
        default: boolean;
    };
    fadeKeyframe: {
        type: StringConstructor;
        default: string;
    };
    arrows: {
        type: BooleanConstructor;
        default: boolean;
    };
    indicators: {
        type: BooleanConstructor;
        default: boolean;
    };
    indicatorTrigger: {
        type: PropType<"click" | "hover">;
        default: string;
        validator: (value: string) => boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
    effect: {
        type: PropType<"fade" | "transition">;
        default: string;
        validator: (value: string) => boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    ratio: {
        type: NumberConstructor;
    };
    draggable: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    src: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    alt: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    contain: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    preset: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    onError: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    onLoaded: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    swipable: {
        type: BooleanConstructor;
        default: boolean;
    };
    swipeDistance: {
        type: NumberConstructor;
        default: number;
    };
    swipeDirection: {
        type: PropType<"all" | "horizontal" | "vertical" | ("" | "left" | "right" | "up" | "down")>;
        default: string;
    };
}, {
    slidesContainer: import("vue").ShallowRef<HTMLElement | undefined>;
    tp: <Key extends string | undefined>(key: Key) => Key;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
    computedColor: import("vue").ComputedRef<string>;
    computedHoverColor: import("vue").ComputedRef<string>;
    computedActiveColor: import("vue").ComputedRef<string>;
    vaImageProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
        draggable: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        src: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        alt: {
            type: PropType<string>;
            required: true;
            default: string;
        };
        ratio: {
            type: PropType<number>;
            required: true;
            default: number;
        };
        contain: {
            type: PropType<boolean>;
            required: true;
            default: boolean;
        };
        preset: {
            type: PropType<string | undefined>;
            required: false;
            default: undefined;
        };
        onError: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
        onLoaded: {
            type: PropType<((...args: any[]) => any) | undefined>;
            required: false;
            default: undefined;
        };
    }>>;
    doShowNextButton: import("vue").ComputedRef<boolean>;
    doShowPrevButton: import("vue").ComputedRef<boolean>;
    computedSlidesStyle: import("vue").ComputedRef<{
        transition: string;
    } | {
        transform: string;
    }>;
    slideStyleComputed: import("vue").ComputedRef<{
        animation: string | undefined;
    }>;
    goTo: (index: number) => void;
    prev: () => void;
    next: () => void;
    slides: import("vue").ComputedRef<any[]>;
    isObjectSlides: import("vue").ComputedRef<boolean | 0>;
    isCurrentSlide: (index: number) => boolean;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
    };
    items: {
        type: PropType<any[]>;
        required: true;
    };
    autoscroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoscrollInterval: {
        type: NumberConstructor;
        default: number;
    };
    autoscrollPauseDuration: {
        type: NumberConstructor;
        default: number;
    };
    infinite: {
        type: BooleanConstructor;
        default: boolean;
    };
    fadeKeyframe: {
        type: StringConstructor;
        default: string;
    };
    arrows: {
        type: BooleanConstructor;
        default: boolean;
    };
    indicators: {
        type: BooleanConstructor;
        default: boolean;
    };
    indicatorTrigger: {
        type: PropType<"click" | "hover">;
        default: string;
        validator: (value: string) => boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: StringConstructor;
        default: string;
    };
    effect: {
        type: PropType<"fade" | "transition">;
        default: string;
        validator: (value: string) => boolean;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    ratio: {
        type: NumberConstructor;
    };
    draggable: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    src: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    alt: {
        type: PropType<string>;
        required: true;
        default: string;
    };
    contain: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    preset: {
        type: PropType<string | undefined>;
        required: false;
        default: undefined;
    };
    onError: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    onLoaded: {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    stateful: {
        type: PropType<boolean>;
        default: boolean;
    };
    swipable: {
        type: BooleanConstructor;
        default: boolean;
    };
    swipeDistance: {
        type: NumberConstructor;
        default: number;
    };
    swipeDirection: {
        type: PropType<"all" | "horizontal" | "vertical" | ("" | "left" | "right" | "up" | "down")>;
        default: string;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    effect: "fade" | "transition";
    vertical: boolean;
    color: string;
    preset: string | undefined;
    modelValue: number;
    stateful: boolean;
    height: string;
    draggable: boolean;
    swipable: boolean;
    swipeDistance: number;
    swipeDirection: "all" | "horizontal" | "vertical" | ("" | "left" | "right" | "up" | "down");
    src: string;
    alt: string;
    onError: ((...args: any[]) => any) | undefined;
    onLoaded: ((...args: any[]) => any) | undefined;
    contain: boolean;
    autoscroll: boolean;
    autoscrollInterval: number;
    autoscrollPauseDuration: number;
    infinite: boolean;
    fadeKeyframe: string;
    arrows: boolean;
    indicators: boolean;
    indicatorTrigger: "click" | "hover";
}>;
export default _default;
