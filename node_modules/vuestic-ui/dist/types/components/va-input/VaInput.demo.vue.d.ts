declare const _default: {
    components: {
        VaInputValidation: import("vue").DefineComponent<{}, {
            value: import("vue").Ref<string>;
        }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{}>>, {}>;
        VaInput: import("vue").DefineComponent<{
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            tabindex: {
                type: NumberConstructor;
                default: number;
            };
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: import("vue").PropType<"textarea" | "text" | "password" | (string & Record<never, never>)>;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            pattern: {
                type: StringConstructor;
            };
            inputmode: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            counter: {
                type: BooleanConstructor;
                default: boolean;
            };
            maxLength: {
                type: NumberConstructor;
                default: undefined;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: boolean;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autosize: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            minRows: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            maxRows: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            mask: {
                type: import("vue").PropType<string | Record<string, number[]>>;
                default: string;
            };
            returnRaw: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            clearValue: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<((v: any) => any)[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<((v: string) => any)[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
        }, {
            input: import("vue").ShallowRef<HTMLInputElement | import("vue").DefineComponent<{
                modelValue: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                };
                placeholder: {
                    type: StringConstructor;
                };
                autosize: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                minRows: {
                    type: NumberConstructor;
                    default: number;
                    validator: (val: number) => boolean;
                };
                maxRows: {
                    type: NumberConstructor;
                    validator: (val: number) => boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }, {
                textarea: import("vue").ShallowRef<HTMLTextAreaElement | undefined>;
                computedStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
                listeners: Record<string, any>;
                computedProps: import("vue").ComputedRef<{
                    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
                    readonly?: boolean | undefined;
                    modelValue?: string | number | undefined;
                    disabled?: boolean | undefined;
                    placeholder?: string | undefined;
                    autosize?: boolean | undefined;
                    minRows?: number | undefined;
                    maxRows?: number | undefined;
                }>;
                focus: () => void;
                blur: () => void;
            }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                modelValue: {
                    type: (StringConstructor | NumberConstructor)[];
                    default: string;
                };
                placeholder: {
                    type: StringConstructor;
                };
                autosize: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                minRows: {
                    type: NumberConstructor;
                    default: number;
                    validator: (val: number) => boolean;
                };
                maxRows: {
                    type: NumberConstructor;
                    validator: (val: number) => boolean;
                };
                disabled: {
                    type: BooleanConstructor;
                    default: boolean;
                };
                readonly: {
                    type: BooleanConstructor;
                    default: boolean;
                };
            }>> & {
                [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
            }, {
                readonly: boolean;
                modelValue: string | number;
                disabled: boolean;
                autosize: boolean;
                minRows: number;
            }> | undefined>;
            inputEvents: {
                onFocus: (e: Event) => void;
                onBlur: (e: Event) => void;
                onInput: (event: Event) => void;
            };
            valueLengthComputed: import("vue").ComputedRef<number | undefined>;
            computedChildAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
            computedInputAttributes: import("vue").ComputedRef<import("vue").InputHTMLAttributes>;
            textareaProps: import("vue").ComputedRef<import("vue").ExtractPropTypes<{
                [x: string & `on${string}`]: {
                    type: import("vue").PropType<((...args: any[]) => any) | undefined>;
                    required: false;
                    default: undefined;
                };
                readonly: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                modelValue: {
                    type: import("vue").PropType<string | number>;
                    required: true;
                    default: string | number;
                };
                disabled: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                autosize: {
                    type: import("vue").PropType<boolean>;
                    required: true;
                    default: boolean;
                };
                minRows: {
                    type: import("vue").PropType<number>;
                    required: true;
                    default: number;
                };
                placeholder: {
                    type: import("vue").PropType<string | undefined>;
                    required: false;
                    default: undefined;
                };
                maxRows: {
                    type: import("vue").PropType<number | undefined>;
                    required: false;
                    default: undefined;
                };
            }>>;
            computedValue: import("vue").ComputedRef<string | number>;
            tabIndexComputed: import("vue").ComputedRef<number>;
            computedError: import("vue").WritableComputedRef<boolean>;
            computedErrorMessages: import("vue").WritableComputedRef<string[]>;
            isFocused: import("vue").WritableComputedRef<boolean | undefined>;
            canBeCleared: import("vue").ComputedRef<boolean>;
            clearIconProps: import("vue").ComputedRef<{
                name: string;
                color: string;
                size: string;
            }>;
            fieldListeners: Record<string, any>;
            filterSlots: import("vue").ComputedRef<string[]>;
            reset: () => void;
            focus: () => void;
            blur: () => void;
            tp: <Key extends string | undefined>(key: Key) => Key;
            t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            placeholder: {
                type: StringConstructor;
                default: string;
            };
            tabindex: {
                type: NumberConstructor;
                default: number;
            };
            modelValue: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: import("vue").PropType<"textarea" | "text" | "password" | (string & Record<never, never>)>;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            inputClass: {
                type: StringConstructor;
                default: string;
            };
            pattern: {
                type: StringConstructor;
            };
            inputmode: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            counter: {
                type: BooleanConstructor;
                default: boolean;
            };
            maxLength: {
                type: NumberConstructor;
                default: undefined;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            outline: {
                type: BooleanConstructor;
                default: boolean;
            };
            bordered: {
                type: BooleanConstructor;
                default: boolean;
            };
            requiredMark: {
                type: BooleanConstructor;
                default: boolean;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            readonly: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            disabled: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            autosize: {
                type: import("vue").PropType<boolean>;
                required: true;
                default: boolean;
            };
            minRows: {
                type: import("vue").PropType<number>;
                required: true;
                default: number;
            };
            maxRows: {
                type: import("vue").PropType<number | undefined>;
                required: false;
                default: undefined;
            };
            mask: {
                type: import("vue").PropType<string | Record<string, number[]>>;
                default: string;
            };
            returnRaw: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearable: {
                type: BooleanConstructor;
                default: boolean;
            };
            clearableIcon: {
                type: StringConstructor;
                default: string;
            };
            clearValue: {
                type: StringConstructor;
                default: string;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<((v: any) => any)[]>;
                default: () => any;
            } & {
                type: import("vue").PropType<((v: string) => any)[]>;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            readonly: boolean;
            label: string;
            mask: string | Record<string, number[]>;
            color: string;
            type: "textarea" | "text" | "password" | (string & Record<never, never>);
            preset: string;
            tabindex: number;
            modelValue: string | number;
            disabled: boolean;
            clearable: boolean;
            success: boolean;
            error: boolean;
            ariaLabel: string;
            errorMessages: string | string[];
            errorCount: string | number;
            rules: ((v: string) => any)[];
            messages: string | string[];
            immediateValidation: boolean;
            loading: boolean;
            outline: boolean;
            bordered: boolean;
            maxLength: number;
            requiredMark: boolean;
            placeholder: string;
            autosize: boolean;
            minRows: number;
            maxRows: number | undefined;
            inputClass: string;
            inputmode: string;
            counter: boolean;
            returnRaw: boolean;
            clearableIcon: string;
            clearValue: string;
        }>;
        VaButton: import("vue").DefineComponent<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: NumberConstructor;
                default: number;
            };
            backgroundOpacity: {
                type: NumberConstructor;
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: NumberConstructor;
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }, {
            focus: () => void;
            blur: () => void;
            button: import("vue").ShallowRef<HTMLElement | undefined>;
            tagComputed: import("vue").ComputedRef<string>;
            computedClass: {
                [x: `va-button--${string}`]: boolean;
            } & {
                readonly asObject: import("vue").ComputedRef<{
                    [x: `va-button--${string}`]: boolean;
                }>;
                readonly asArray: import("vue").ComputedRef<`va-button--${string}`[]>;
                readonly asString: import("vue").ComputedRef<string>;
            };
            computedStyle: import("vue").ComputedRef<{
                color: string;
                background?: string | undefined;
                opacity?: number | undefined;
                'background-clip'?: "text" | undefined;
                '-webkit-background-clip'?: "text" | undefined;
                borderColor: string;
            }>;
            textColorComputed: import("vue").ComputedRef<string>;
            loaderSizeComputed: import("vue").ComputedRef<string>;
            attributesComputed: import("vue").ComputedRef<{
                'aria-disabled': boolean;
                disabled: boolean;
                type?: any;
                tabindex?: number | undefined;
                target?: string | undefined;
                href?: any;
                to?: string | Record<string, any> | undefined;
                replace?: boolean | undefined;
                append?: boolean | undefined;
                activeClass?: string | undefined;
                exact?: boolean | undefined;
                exactActiveClass?: string | undefined;
            }>;
            wrapperClassComputed: import("vue").ComputedRef<{
                'va-button__content--loading': boolean;
            }>;
            iconAttributesComputed: import("vue").ComputedRef<{
                size: "small" | "medium" | "large";
                color: string;
            }>;
            backgroundColor: import("vue").ComputedRef<string>;
            backgroundMaskColor: import("vue").ComputedRef<string>;
            backgroundMaskOpacity: import("vue").ComputedRef<number>;
            backgroundColorOpacity: import("vue").ComputedRef<number>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            tag: {
                type: StringConstructor;
                default: string;
            };
            type: {
                type: StringConstructor;
                default: string;
            };
            block: {
                type: BooleanConstructor;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: string;
            };
            textOpacity: {
                type: NumberConstructor;
                default: number;
            };
            backgroundOpacity: {
                type: NumberConstructor;
                default: number;
            };
            borderColor: {
                type: StringConstructor;
                default: string;
            };
            gradient: {
                type: BooleanConstructor;
                default: boolean;
            };
            plain: {
                type: BooleanConstructor;
                default: boolean;
            };
            round: {
                type: BooleanConstructor;
                default: boolean;
            };
            size: {
                type: import("vue").PropType<"small" | "medium" | "large">;
                default: string;
                validator: (v: string) => boolean;
            };
            icon: {
                type: StringConstructor;
                default: string;
            };
            iconRight: {
                type: StringConstructor;
                default: string;
            };
            iconColor: {
                type: StringConstructor;
                default: string;
            };
            to: {
                type: import("vue").PropType<string | Record<string, any>>;
                default: string;
            };
            replace: {
                type: BooleanConstructor;
                default: boolean;
            };
            append: {
                type: BooleanConstructor;
                default: boolean;
            };
            exact: {
                type: BooleanConstructor;
                default: boolean;
            };
            activeClass: {
                type: StringConstructor;
                default: string;
            };
            exactActiveClass: {
                type: StringConstructor;
                default: string;
            };
            href: {
                type: StringConstructor;
                default: string;
            };
            target: {
                type: StringConstructor;
                default: string;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            pressedBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            pressedOpacity: {
                type: NumberConstructor;
                default: number;
            };
            pressedMaskColor: {
                type: StringConstructor;
                default: string;
            };
            hoverBehavior: {
                type: import("vue").PropType<"mask" | "opacity">;
                default: string;
                validator: (value: string) => boolean;
            };
            hoverOpacity: {
                type: NumberConstructor;
                default: number;
            };
            hoverMaskColor: {
                type: StringConstructor;
                default: string;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
        }>>, {
            replace: boolean;
            tag: string;
            color: string;
            type: string;
            preset: string;
            size: "small" | "medium" | "large";
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
            icon: string;
            disabled: boolean;
            backgroundOpacity: number;
            hoverBehavior: "mask" | "opacity";
            hoverOpacity: number;
            pressedBehavior: "mask" | "opacity";
            pressedOpacity: number;
            plain: boolean;
            textOpacity: number;
            target: string;
            href: string;
            append: boolean;
            to: string | Record<string, any>;
            exact: boolean;
            activeClass: string;
            exactActiveClass: string;
            loading: boolean;
            textColor: string;
            borderColor: string;
            gradient: boolean;
            block: boolean;
            round: boolean;
            iconRight: string;
            iconColor: string;
            pressedMaskColor: string;
            hoverMaskColor: string;
        }>;
        VaIcon: import("vue").DefineComponent<{
            name: {
                type: StringConstructor;
                default: string;
            };
            tag: {
                type: StringConstructor;
            };
            component: {
                type: import("vue").PropType<any>;
            };
            color: {
                type: StringConstructor;
            };
            rotation: {
                type: (StringConstructor | NumberConstructor)[];
            };
            spin: {
                type: (StringConstructor | BooleanConstructor)[];
            };
            flip: {
                type: import("vue").PropType<"off" | "horizontal" | "vertical" | "both">;
                default: string;
                validator: (value: string) => boolean;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            size: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
                validator: (size: string | number) => boolean;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
        }, {
            iconConfig: import("vue").ComputedRef<import("../../services/icon").IconProps>;
            computedTag: import("vue").ComputedRef<any>;
            computedAttrs: import("vue").ComputedRef<{
                [x: string]: unknown;
            }>;
            computedClass: import("vue").ComputedRef<(string | undefined)[]>;
            computedStyle: import("vue").ComputedRef<{
                transform: string;
                cursor: string | null;
                color: string | undefined;
                fontSize: string;
                height: string;
                lineHeight: string;
            }>;
            ariaHiddenComputed: import("vue").ComputedRef<boolean>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            name: {
                type: StringConstructor;
                default: string;
            };
            tag: {
                type: StringConstructor;
            };
            component: {
                type: import("vue").PropType<any>;
            };
            color: {
                type: StringConstructor;
            };
            rotation: {
                type: (StringConstructor | NumberConstructor)[];
            };
            spin: {
                type: (StringConstructor | BooleanConstructor)[];
            };
            flip: {
                type: import("vue").PropType<"off" | "horizontal" | "vertical" | "both">;
                default: string;
                validator: (value: string) => boolean;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            size: {
                type: (StringConstructor | NumberConstructor)[];
                default: string;
                validator: (size: string | number) => boolean;
            };
            sizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
            fontSizesConfig: {
                type: import("vue").PropType<Record<string, any>>;
                default: () => import("../../services/global-config").SizeConfig;
            };
        }>>, {
            name: string;
            flip: "off" | "horizontal" | "vertical" | "both";
            preset: string;
            size: string | number;
            sizesConfig: Record<string, any>;
            fontSizesConfig: Record<string, any>;
        }>;
        VaCheckbox: import("vue").DefineComponent<{
            modelValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            checkedIcon: {
                type: StringConstructor;
                default: string;
            };
            indeterminate: {
                type: BooleanConstructor;
                default: boolean;
            };
            indeterminateValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: null;
            };
            indeterminateIcon: {
                type: StringConstructor;
                default: string;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            arrayValue: {
                type: (StringConstructor | NumberConstructor | ObjectConstructor | BooleanConstructor)[];
                default: undefined;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            leftLabel: {
                type: BooleanConstructor;
                default: boolean;
            };
            trueValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            falseValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<((v: any) => any)[]>;
                default: () => any;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }, {
            isActive: import("vue").ComputedRef<boolean>;
            computedClass: import("vue").ComputedRef<{
                'va-checkbox--selected': boolean;
                'va-checkbox--readonly': boolean;
                'va-checkbox--disabled': boolean;
                'va-checkbox--indeterminate': boolean;
                'va-checkbox--error': boolean;
                'va-checkbox--left-label': boolean;
                'va-checkbox--on-keyboard-focus': boolean;
            }>;
            labelStyle: import("vue").ComputedRef<{
                color: string;
                padding: string;
            }>;
            inputStyle: import("vue").ComputedRef<{
                background: string;
                borderColor: string;
            }>;
            computedIconName: import("vue").ComputedRef<string>;
            textColorComputed: import("vue").ComputedRef<string>;
            computedError: import("vue").WritableComputedRef<boolean>;
            computedErrorMessages: import("vue").WritableComputedRef<string[]>;
            keyboardFocusListeners: {
                mousedown: () => void;
                focus: () => void;
                blur: () => void;
            };
            toggleSelection: () => void;
            onBlur: (event: FocusEvent) => void;
            onFocus: (event: FocusEvent) => void;
            inputAttributesComputed: import("vue").ComputedRef<{
                'aria-invalid': boolean;
                'aria-errormessage': string;
                name: string;
                disabled: boolean;
                readonly: boolean;
                tabindex: number;
                ariaLabel: string | undefined;
                ariaDisabled: boolean;
                ariaReadOnly: boolean;
                ariaChecked: boolean;
            }>;
            computedId: import("vue").ComputedRef<string>;
            computedName: import("vue").ComputedRef<string>;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
            modelValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: boolean;
            };
            color: {
                type: StringConstructor;
                default: string;
            };
            checkedIcon: {
                type: StringConstructor;
                default: string;
            };
            indeterminate: {
                type: BooleanConstructor;
                default: boolean;
            };
            indeterminateValue: {
                type: import("vue").PropType<string | number | boolean | unknown[] | Record<any, unknown> | null>;
                default: null;
            };
            indeterminateIcon: {
                type: StringConstructor;
                default: string;
            };
            id: {
                type: StringConstructor;
                default: string;
            };
            name: {
                type: StringConstructor;
                default: string;
            };
            ariaLabel: {
                type: StringConstructor;
                default: undefined;
            };
            preset: {
                type: StringConstructor;
                default: undefined;
            };
            arrayValue: {
                type: (StringConstructor | NumberConstructor | ObjectConstructor | BooleanConstructor)[];
                default: undefined;
            };
            label: {
                type: StringConstructor;
                default: string;
            };
            leftLabel: {
                type: BooleanConstructor;
                default: boolean;
            };
            trueValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            falseValue: {
                type: import("vue").PropType<unknown>;
                default: boolean;
            };
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            readonly: {
                type: BooleanConstructor;
                default: boolean;
            };
            error: {
                type: BooleanConstructor;
                default: undefined;
            };
            errorMessages: {
                type: import("vue").PropType<string | string[]>;
                default: undefined;
            };
            errorCount: {
                type: (StringConstructor | NumberConstructor)[];
                default: number;
            };
            rules: {
                type: import("vue").PropType<((v: any) => any)[]>;
                default: () => any;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            messages: {
                type: import("vue").PropType<string | string[]>;
                default: () => never[];
            };
            immediateValidation: {
                type: BooleanConstructor;
                default: boolean;
            };
            loading: {
                type: BooleanConstructor;
                default: boolean;
            };
            stateful: {
                type: import("vue").PropType<boolean>;
                default: boolean;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
        }, {
            readonly: boolean;
            label: string;
            name: string;
            color: string;
            preset: string;
            modelValue: string | number | boolean | unknown[] | Record<any, unknown> | null;
            disabled: boolean;
            stateful: boolean;
            success: boolean;
            error: boolean;
            id: string;
            ariaLabel: string;
            errorMessages: string | string[];
            errorCount: string | number;
            rules: ((v: any) => any)[];
            messages: string | string[];
            immediateValidation: boolean;
            loading: boolean;
            arrayValue: string | number | boolean | Record<string, any>;
            leftLabel: boolean;
            trueValue: boolean;
            falseValue: boolean;
            indeterminate: boolean;
            indeterminateValue: string | number | boolean | unknown[] | Record<any, unknown> | null;
            checkedIcon: string;
            indeterminateIcon: string;
        }>;
    };
    data(): {
        empty: string;
        text: string;
        phone: string;
        messages: string[];
        errorMessages: string[];
        successMessages: string[];
        autosizeValue: string;
        autosizeValueWithLimits: string;
        maskCreditCardValue: string;
        maskDateValue: string;
        maskTimeValue: string;
        maskNumeralsValue: string;
        maskCustomBlocksValue: string;
        maskReturnFormattedValue: string;
        num: number;
        isClearable: boolean;
        counterOrMaxLengthValue: string;
        maxLength: number;
    };
};
export default _default;
