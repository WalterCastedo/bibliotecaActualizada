import { PropType, TableHTMLAttributes, StyleValue } from 'vue';
import type { DataTableColumnSource, DataTableItem, DataTableRow, DataTableFilterMethod, DataTableSortingOrder, DataTableSortingOptions, DataTableSelectMode, DataTableRowBind, DataTableCellBind } from './types';
declare type emitNames = 'update:modelValue' | 'update:sortBy' | 'update:sortingOrder' | 'filtered' | 'sorted' | 'selectionChange' | 'row:click' | 'row:dblclick' | 'row:contextmenu' | 'scroll:top' | 'scroll:bottom';
declare const _default: import("vue").DefineComponent<{
    columns: {
        type: PropType<DataTableColumnSource[]>;
        default: () => DataTableColumnSource[];
    };
    items: {
        type: PropType<DataTableItem[]>;
        default: () => DataTableItem[];
    };
    itemsTrackBy: {
        type: PropType<string | ((item: DataTableItem) => any)>;
        default: string;
    };
    modelValue: {
        type: PropType<any[]>;
    };
    sortingOrder: {
        type: PropType<DataTableSortingOrder>;
    };
    sortBy: {
        type: StringConstructor;
    };
    sortingOptions: {
        type: PropType<DataTableSortingOptions>;
        default: () => (string | null)[];
        validator: (options: DataTableSortingOptions) => boolean;
    };
    filter: {
        type: StringConstructor;
        default: string;
    };
    filterMethod: {
        type: PropType<DataTableFilterMethod>;
    };
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    animated: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectMode: {
        type: PropType<DataTableSelectMode>;
        default: string;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    perPage: {
        type: NumberConstructor;
    };
    currentPage: {
        type: NumberConstructor;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingColor: {
        type: StringConstructor;
        default: string;
    };
    noDataHtml: {
        type: StringConstructor;
        default: string;
    };
    noDataFilteredHtml: {
        type: StringConstructor;
        default: string;
    };
    hideDefaultHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    footerClone: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    striped: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    rowBind: {
        type: PropType<DataTableRowBind>;
    };
    cellBind: {
        type: PropType<DataTableCellBind>;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    virtualTrackBy: {
        type: PropType<string | number>;
        default: string;
    };
    scrollTopMargin: {
        type: NumberConstructor;
        default: number;
    };
    scrollBottomMargin: {
        type: NumberConstructor;
        default: number;
    };
    table: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    horizontal: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    trackBy: {
        type: PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
        required: true;
        default: string | number | ((item: any[] | Record<string, any>) => string | number);
    };
    bench: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    itemSize: {
        type: PropType<string | number>;
        required: true;
        default: string | number;
    };
    wrapperSize: {
        type: PropType<string | number>;
        required: true;
        default: string | number;
    };
    "onScroll:bottom": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}, {
    scrollContainer: import("vue").Ref<HTMLElement | undefined>;
    topTrigger: import("vue").Ref<HTMLElement | undefined>;
    bottomTrigger: import("vue").Ref<HTMLElement | undefined>;
    columnsComputed: import("vue").ComputedRef<import("./types").DataTableColumnInternal[]>;
    ctrlSelectRow: (row: DataTableRow) => void;
    shiftSelectRows: (row: DataTableRow) => void;
    toggleBulkSelection: () => void;
    isRowSelected: (row: DataTableRow) => boolean;
    severalRowsSelected: import("vue").ComputedRef<boolean>;
    allRowsSelected: import("vue").ComputedRef<boolean>;
    sortBySync: import("vue").WritableComputedRef<string>;
    sortingOrderSync: import("vue").WritableComputedRef<DataTableSortingOrder>;
    toggleSorting: (column: import("./types").DataTableColumnInternal) => void;
    sortingOrderIconName: import("vue").ComputedRef<"va-arrow-down" | "va-arrow-up" | "unfold_more">;
    CSSVariables: import("vue").ComputedRef<{
        hoverColor: string;
        selectedColor: string | undefined;
        tableHeight: string;
        theadBg: string;
        tfootBg: string;
    }>;
    getHeaderCSSVariables: (column: import("./types").DataTableColumnInternal) => {
        [x: string]: string | 0 | undefined;
    };
    getCellCSSVariables: (cell: import("./types").DataTableCell) => {
        [x: string]: import("./types").DataTableAlignOptions | import("./types").DataTableVerticalAlignOptions;
    };
    getFooterCSSVariables: (column: import("./types").DataTableColumnInternal) => {
        [x: string]: string;
    };
    getClass: (classes: unknown) => any;
    getStyle: (styles: unknown) => any;
    showNoDataHtml: import("vue").ComputedRef<boolean>;
    showNoDataFilteredHtml: import("vue").ComputedRef<boolean>;
    onRowClickHandler: (name: emitNames, event: Event, row: DataTableRow) => void;
    computedAttributes: import("vue").ComputedRef<{
        items: DataTableRow[];
        trackBy: string | number;
        disabled: boolean;
        table: boolean;
        bench: number;
        itemSize: string | number;
        wrapperSize: string | number;
        class: (string[] | {
            'va-data-table--sticky': boolean;
            'va-data-table--scroll'?: undefined;
            'va-data-table--virtual-scroller'?: undefined;
        } | {
            'va-data-table--scroll': boolean;
            'va-data-table--sticky'?: undefined;
            'va-data-table--virtual-scroller'?: undefined;
        } | {
            'va-data-table--virtual-scroller': boolean;
            'va-data-table--sticky'?: undefined;
            'va-data-table--scroll'?: undefined;
        })[];
        style: StyleValue[];
    }>;
    computedTableAttributes: import("vue").ComputedRef<TableHTMLAttributes>;
    animationName: import("vue").ComputedRef<string>;
    getColumnAriaSortOrder: (columnName: string) => "none" | "ascending" | "descending";
    getRowBind: (row: DataTableRow) => Record<string, string>;
    getCellBind: (cell: import("./types").DataTableCell, row: DataTableRow) => Record<string, string>;
    doRenderTopTrigger: boolean;
    doRenderBottomTrigger: boolean;
    tp: <Key extends string | undefined>(key: Key) => Key;
    t(key: string, values?: Record<string, string | number | boolean | undefined> | undefined): string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    columns: {
        type: PropType<DataTableColumnSource[]>;
        default: () => DataTableColumnSource[];
    };
    items: {
        type: PropType<DataTableItem[]>;
        default: () => DataTableItem[];
    };
    itemsTrackBy: {
        type: PropType<string | ((item: DataTableItem) => any)>;
        default: string;
    };
    modelValue: {
        type: PropType<any[]>;
    };
    sortingOrder: {
        type: PropType<DataTableSortingOrder>;
    };
    sortBy: {
        type: StringConstructor;
    };
    sortingOptions: {
        type: PropType<DataTableSortingOptions>;
        default: () => (string | null)[];
        validator: (options: DataTableSortingOptions) => boolean;
    };
    filter: {
        type: StringConstructor;
        default: string;
    };
    filterMethod: {
        type: PropType<DataTableFilterMethod>;
    };
    hoverable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    animated: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectable: {
        type: BooleanConstructor;
        default: boolean;
    };
    selectMode: {
        type: PropType<DataTableSelectMode>;
        default: string;
    };
    selectedColor: {
        type: StringConstructor;
        default: string;
    };
    perPage: {
        type: NumberConstructor;
    };
    currentPage: {
        type: NumberConstructor;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingColor: {
        type: StringConstructor;
        default: string;
    };
    noDataHtml: {
        type: StringConstructor;
        default: string;
    };
    noDataFilteredHtml: {
        type: StringConstructor;
        default: string;
    };
    hideDefaultHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    footerClone: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowFooterSorting: {
        type: BooleanConstructor;
        default: boolean;
    };
    striped: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    stickyFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
    };
    rowBind: {
        type: PropType<DataTableRowBind>;
    };
    cellBind: {
        type: PropType<DataTableCellBind>;
    };
    virtualScroller: {
        type: BooleanConstructor;
        default: boolean;
    };
    virtualTrackBy: {
        type: PropType<string | number>;
        default: string;
    };
    scrollTopMargin: {
        type: NumberConstructor;
        default: number;
    };
    scrollBottomMargin: {
        type: NumberConstructor;
        default: number;
    };
    table: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    horizontal: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    disabled: {
        type: PropType<boolean>;
        required: true;
        default: boolean;
    };
    trackBy: {
        type: PropType<string | number | ((item: any[] | Record<string, any>) => string | number)>;
        required: true;
        default: string | number | ((item: any[] | Record<string, any>) => string | number);
    };
    bench: {
        type: PropType<number>;
        required: true;
        default: number;
    };
    itemSize: {
        type: PropType<string | number>;
        required: true;
        default: string | number;
    };
    wrapperSize: {
        type: PropType<string | number>;
        required: true;
        default: string | number;
    };
    "onScroll:bottom": {
        type: PropType<((...args: any[]) => any) | undefined>;
        required: false;
        default: undefined;
    };
    preset: {
        type: StringConstructor;
        default: undefined;
    };
}>> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    table: boolean;
    filter: string;
    horizontal: boolean;
    preset: string;
    disabled: boolean;
    loading: boolean;
    trackBy: string | number | ((item: any[] | Record<string, any>) => string | number);
    items: DataTableItem[];
    "onScroll:bottom": ((...args: any[]) => any) | undefined;
    bench: number;
    itemSize: string | number;
    wrapperSize: string | number;
    columns: DataTableColumnSource[];
    itemsTrackBy: string | ((item: DataTableItem) => any);
    sortingOptions: DataTableSortingOptions;
    hoverable: boolean;
    clickable: boolean;
    animated: boolean;
    selectable: boolean;
    selectMode: DataTableSelectMode;
    selectedColor: string;
    loadingColor: string;
    noDataHtml: string;
    noDataFilteredHtml: string;
    hideDefaultHeader: boolean;
    footerClone: boolean;
    allowFooterSorting: boolean;
    striped: boolean;
    stickyHeader: boolean;
    stickyFooter: boolean;
    virtualScroller: boolean;
    virtualTrackBy: string | number;
    scrollTopMargin: number;
    scrollBottomMargin: number;
}>;
export default _default;
