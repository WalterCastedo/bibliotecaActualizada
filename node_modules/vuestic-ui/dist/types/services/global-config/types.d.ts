import type { ComponentConfig } from '../component-config';
import type { ColorConfig } from '../color';
import type { IconConfig } from '../icon';
import type { BreakpointConfig } from '../breakpoint';
import type { I18nConfig } from '../i18n';
import type { Ref } from 'vue';
export declare type GlobalConfig = {
    colors: ColorConfig;
    icons: IconConfig;
    components: ComponentConfig;
    breakpoint: BreakpointConfig;
    i18n: I18nConfig;
};
declare type DeepPartial<T> = T extends Record<string, any> ? {
    [P in keyof T]?: P extends 'components' ? T[P] : DeepPartial<T[P]>;
} : T;
export declare type PartialGlobalConfig = DeepPartial<GlobalConfig>;
export declare type SizeConfig = {
    defaultSize?: number;
    sizes?: {
        [sizeName: string]: number | string;
    };
};
export declare type GlobalConfigUpdater<T> = (config: T) => T;
export type { ColorConfig, ComponentConfig, IconConfig, BreakpointConfig, };
export declare type ProvidedGlobalConfig = {
    globalConfig: Ref<GlobalConfig>;
    getGlobalConfig: () => GlobalConfig;
    /**
     * Set new global config
     * @see mergeGlobalConfig if you want to update existing config
     */
    setGlobalConfig: (updater: GlobalConfig | GlobalConfigUpdater<GlobalConfig>) => void;
    mergeGlobalConfig: (updater: PartialGlobalConfig | GlobalConfigUpdater<PartialGlobalConfig>) => void;
};
