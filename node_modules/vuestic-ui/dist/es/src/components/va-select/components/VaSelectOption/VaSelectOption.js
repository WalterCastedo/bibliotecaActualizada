import { defineComponent, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createBlock, createCommentVNode, createTextVNode, toDisplayString, withDirectives, createVNode, vShow } from "vue";
import { u as useBem } from "../../../../composables/useBem.js";
import { a as useColorProps, u as useColors } from "../../../../composables/useColors.js";






import { V as VaIcon } from "../../../va-icon/index.js";
import { _ as _export_sfc } from "../../../../../plugin-vue_export-helper.js";
var VaSelectOption_vue_vue_type_style_index_0_lang = /* @__PURE__ */ (() => ":root{--va-select-option-list-option-cursor: pointer;--va-select-option-list-option-display: flex;--va-select-option-list-option-align-items: center;--va-select-option-list-option-padding: .375rem .75rem;--va-select-option-list-option-min-height: 2.25rem;--va-select-option-list-option-word-break: break-word;--va-select-option-list-option-icon-margin-right: .5rem;--va-select-option-list-option-selected-icon-margin-left: auto;--va-select-option-list-option-selected-icon-font-size: .8rem;--va-select-option-list-option-disabled-opacity: .7}.va-select-option{min-height:var(--va-select-option-list-option-min-height);padding:var(--va-select-option-list-option-padding);display:var(--va-select-option-list-option-display);align-items:var(--va-select-option-list-option-align-items);word-break:var(--va-select-option-list-option-word-break);cursor:var(--va-select-option-list-option-cursor)}.va-select-option__icon{margin-right:var(--va-select-option-list-option-icon-margin-right)}.va-select-option__selected-icon{margin-left:var(--va-select-option-list-option-selected-icon-margin-left);font-size:var(--va-select-option-list-option-selected-icon-font-size)}\n")();
const _sfc_main = defineComponent({
  name: "VaSelectOption",
  components: { VaIcon },
  props: {
    ...useColorProps,
    disabled: { type: Boolean, default: false },
    option: { type: [Number, String, Object], default: () => ({}) },
    getText: { type: Function, required: true },
    getTrackBy: { type: Function, required: true },
    currentOption: { type: [String, Number, Object], default: null },
    getSelectedState: { type: Function, required: true }
  },
  setup(props) {
    const { getColor, getHoverColor } = useColors();
    const optionIcon = computed(() => typeof props.option === "object" ? props.option.icon : void 0);
    const optionIconColor = computed(() => getColor(props.color));
    const optionText = computed(() => props.getText(props.option));
    const isSelected = computed(() => props.getSelectedState(props.option));
    const isFocused = computed(() => {
      if (!props.currentOption && props.currentOption !== 0) {
        return false;
      }
      if (typeof props.option === "string") {
        return props.option === props.currentOption;
      }
      if (!props.getTrackBy) {
        return false;
      }
      return props.getTrackBy(props.currentOption) === props.getTrackBy(props.option);
    });
    const optionClass = useBem("va-select-option", () => ({
      selected: isSelected.value
    }));
    const optionStyle = computed(() => ({
      color: isSelected.value ? getColor(props.color) : "inherit",
      backgroundColor: isFocused.value ? getHoverColor(getColor(props.color)) : "transparent",
      cursor: props.disabled ? "default" : void 0,
      opacity: props.disabled ? "var(--va-select-option-list-option-disabled-opacity)" : void 0
    }));
    return {
      getColor,
      isFocused,
      optionIcon,
      isSelected,
      optionText,
      optionStyle,
      optionClass,
      optionIconColor
    };
  }
});
const _hoisted_1 = ["aria-selected"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_icon = resolveComponent("va-icon");
  return openBlock(), createElementBlock("div", {
    role: "option",
    class: normalizeClass(["va-select-option", _ctx.optionClass]),
    style: normalizeStyle(_ctx.optionStyle),
    "aria-selected": _ctx.isSelected
  }, [
    _ctx.optionIcon ? (openBlock(), createBlock(_component_va_icon, {
      key: 0,
      size: "small",
      class: "va-select-option__icon",
      name: _ctx.optionIcon
    }, null, 8, ["name"])) : createCommentVNode("", true),
    createTextVNode(" " + toDisplayString(_ctx.optionText) + " ", 1),
    withDirectives(createVNode(_component_va_icon, {
      class: "va-select-option__selected-icon",
      size: "small",
      name: "va-check",
      color: _ctx.optionIconColor
    }, null, 8, ["color"]), [
      [vShow, _ctx.isSelected]
    ])
  ], 14, _hoisted_1);
}
var _VaSelectOption = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaSelectOption as _ };

import './VaSelectOption.css';
//# sourceMappingURL=VaSelectOption.js.map
