import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";
import { defineComponent, computed, openBlock, createElementBlock, mergeProps, renderSlot, normalizeProps, guardReactiveProps, Fragment, createTextVNode, toDisplayString, createCommentVNode, createElementVNode, normalizeStyle } from "vue";
import { c as clamp_1 } from "../../../vendor.js";
import { u as useColors } from "../../composables/useColors.js";





import { u as useTextColor } from "../../composables/useTextColor.js";
import { u as useTranslation } from "../../composables/useTranslation.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaProgressBar_vue_vue_type_style_index_0_lang = /* @__PURE__ */ (() => ":root{--va-progress-bar-width: 100%;--va-progress-bar-position: relative;--va-progress-bar-overflow: hidden;--va-progress-bar-height: .5rem;--va-progress-bar-border-radius: 9999999px;--va-progress-bar-sm-height: 2px;--va-progress-bar-lg-height: 16px;--va-progress-bar-info-font-weight: 700;--va-progress-bar-info-text-align: center;--va-progress-bar-info-text-transform: uppercase;--va-progress-bar-info-not-empty-margin-bottom: .1rem;--va-progress-bar-buffer-opacity: .3;--va-progress-bar-buffer-transition: width ease 2s;--va-progress-bar-transition: width ease 2s;--va-progress-bar-letter-spacing: .6px;--va-progress-bar-line-height: 1;--va-progress-bar-font-size: .8em;--va-progress-bar-font-weight: 700}.va-progress-bar{width:var(--va-progress-bar-width);position:relative;overflow:hidden;font-family:var(--va-font-family);line-height:var(--va-progress-bar-line-height)}.va-progress-bar__info{font-weight:var(--va-progress-bar-info-font-weight);text-align:var(--va-progress-bar-info-text-align);text-transform:var(--va-progress-bar-info-text-transform)}.va-progress-bar__info:not(:empty){margin-bottom:var(--va-progress-bar-info-not-empty-margin-bottom)}.va-progress-bar__wrapper{position:relative;overflow:hidden;border-radius:var(--va-progress-bar-border-radius)}.va-progress-bar--small .va-progress-bar__wrapper{height:var(--va-progress-bar-sm-height)}.va-progress-bar--medium .va-progress-bar__wrapper{height:var(--va-progress-bar-height)}.va-progress-bar--large .va-progress-bar__wrapper{height:var(--va-progress-bar-lg-height)}.va-progress-bar--square .va-progress-bar__wrapper{--va-progress-bar-border-radius: 0}.va-progress-bar__buffer{position:absolute;top:0;height:inherit;border-radius:inherit;transition:var(--va-progress-bar-buffer-transition);display:flex;align-items:center;justify-content:center;letter-spacing:var(--va-progress-bar-letter-spacing);font-size:var(--va-progress-bar-font-size);font-weight:var(--va-progress-bar-font-weight);background-color:var(--va-progress-bar-background-color)}.va-progress-bar__progress{height:inherit;border-radius:inherit;transition:var(--va-progress-bar-transition);background-color:var(--va-progress-bar-color)}.va-progress-bar__progress--indeterminate-start{background-color:var(--va-progress-bar-color);-webkit-animation:va-progress-bar-indeterminate-start 2s ease-in infinite;animation:va-progress-bar-indeterminate-start 2s ease-in infinite;position:absolute;height:inherit}.va-progress-bar__progress--indeterminate-end{background-color:var(--va-progress-bar-color);-webkit-animation:va-progress-bar-indeterminate-end 2s ease-out 1s infinite;animation:va-progress-bar-indeterminate-end 2s ease-out 1s infinite;position:absolute;height:inherit}@-webkit-keyframes va-progress-bar-indeterminate-start{0%{width:10%;left:-10%}50%{width:100%;left:100%}to{width:100%;left:100%}}@keyframes va-progress-bar-indeterminate-start{0%{width:10%;left:-10%}50%{width:100%;left:100%}to{width:100%;left:100%}}@-webkit-keyframes va-progress-bar-indeterminate-end{0%{width:100%;left:-100%}50%{width:10%;left:100%}to{width:10%;left:100%}}@keyframes va-progress-bar-indeterminate-end{0%{width:100%;left:-100%}50%{width:10%;left:100%}to{width:10%;left:100%}}\n")();
const _sfc_main = defineComponent({
  name: "VaProgressBar",
  props: {
    ...useComponentPresetProp,
    modelValue: { type: Number, default: 0 },
    indeterminate: { type: Boolean, default: false },
    color: { type: String, default: "primary" },
    size: {
      type: [Number, String],
      default: "medium"
    },
    buffer: { type: Number, default: 100 },
    rounded: { type: Boolean, default: true },
    reverse: { type: Boolean, default: false },
    contentInside: { type: Boolean, default: false },
    showPercent: { type: Boolean, default: false }
  },
  setup(props) {
    const { getColor, getHoverColor } = useColors();
    const { textColorComputed } = useTextColor();
    const colorComputed = computed(() => getColor(props.color));
    const isTextSize = computed(() => typeof props.size === "string" && ["small", "medium", "large"].includes(props.size));
    const getCSSHeight = () => {
      if (typeof props.size === "number") {
        return `${props.size}px`;
      }
      if (isTextSize.value) {
        return;
      }
      return props.size;
    };
    const { t } = useTranslation();
    return {
      rootClass: computed(() => ({
        "va-progress-bar--square": !props.rounded,
        [`va-progress-bar--${props.size}`]: isTextSize.value
      })),
      rooStyle: computed(() => ({
        "--va-progress-bar-color": colorComputed.value,
        "--va-progress-bar-background-color": getHoverColor(colorComputed.value)
      })),
      wrapperStyle: computed(() => ({
        height: getCSSHeight()
      })),
      bufferStyle: computed(() => ({
        width: `${props.indeterminate ? 100 : clamp_1(props.buffer, 0, 100)}%`,
        color: textColorComputed.value,
        [props.reverse ? "right" : "left"]: 0
      })),
      progressStyle: computed(() => ({
        width: `${clamp_1(props.modelValue, 0, 100)}%`,
        marginLeft: props.reverse ? "auto" : void 0
      })),
      intermediateStyle: computed(() => ({
        animationDirection: props.reverse ? "reverse" : "normal"
      })),
      ariaAttributesComputed: computed(() => ({
        role: "progressbar",
        ariaLabel: t("progressState"),
        ariaValuenow: !props.indeterminate ? props.modelValue : void 0
      }))
    };
  }
});
const _hoisted_1 = {
  key: 0,
  class: "va-progress-bar__info"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", mergeProps({
    class: ["va-progress-bar", _ctx.rootClass],
    style: _ctx.rooStyle
  }, _ctx.ariaAttributesComputed), [
    !_ctx.$props.contentInside ? (openBlock(), createElementBlock("div", _hoisted_1, [
      renderSlot(_ctx.$slots, "default", normalizeProps(guardReactiveProps({ value: _ctx.$props.modelValue })), () => [
        _ctx.$props.showPercent ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createTextVNode(toDisplayString(_ctx.$props.modelValue) + "% ", 1)
        ], 64)) : createCommentVNode("", true)
      ])
    ])) : createCommentVNode("", true),
    createElementVNode("div", {
      class: "va-progress-bar__wrapper",
      style: normalizeStyle(_ctx.wrapperStyle)
    }, [
      createElementVNode("div", {
        class: "va-progress-bar__buffer",
        style: normalizeStyle(_ctx.bufferStyle)
      }, [
        _ctx.$props.contentInside ? renderSlot(_ctx.$slots, "default", normalizeProps(mergeProps({ key: 0 }, { value: _ctx.$props.modelValue })), () => [
          _ctx.$props.showPercent ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createTextVNode(toDisplayString(_ctx.$props.modelValue) + "% ", 1)
          ], 64)) : createCommentVNode("", true)
        ]) : createCommentVNode("", true)
      ], 4),
      _ctx.indeterminate ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        createElementVNode("div", {
          class: "va-progress-bar__progress--indeterminate-start",
          style: normalizeStyle(_ctx.intermediateStyle)
        }, null, 4),
        createElementVNode("div", {
          class: "va-progress-bar__progress--indeterminate-end",
          style: normalizeStyle(_ctx.intermediateStyle)
        }, null, 4)
      ], 64)) : (openBlock(), createElementBlock("div", {
        key: 1,
        class: "va-progress-bar__progress",
        style: normalizeStyle(_ctx.progressStyle)
      }, null, 4))
    ], 4)
  ], 16);
}
var _VaProgressBar = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaProgressBar as _ };

import './VaProgressBar.css';
//# sourceMappingURL=VaProgressBar.js.map
