import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle, renderSlot, createTextVNode, toDisplayString } from "vue";

import { u as useColors } from "../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";





import { u as useTextColor } from "../../composables/useTextColor.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaBadge_vue_vue_type_style_index_0_lang = /* @__PURE__ */ (() => ":root{--va-badge-py: 0;--va-badge-font-size: .625rem;--va-badge-border: .125rem;--va-badge-size: calc(var(--va-badge-font-size) * var(--va-badge-line-height) + var(--va-badge-border) * 2);--va-badge-overlap: calc(var(--va-badge-size) / 3);--va-badge-display: inline-flex;--va-badge-position: relative;--va-badge-line-height: 1.4;--va-badge-margin: 0;--va-badge-dot-size: .5rem;--va-badge-text-wrapper-transition: .2s cubic-bezier(.4, 0, .6, 1);--va-badge-text-wrapper-display: inline-flex;--va-badge-text-wrapper-border: solid .125rem;--va-badge-text-wrapper-border-radius: .125rem;--va-badge-text-wrapper-font-weight: 700;--va-badge-text-wrapper-line-height: 1.4;--va-badge-text-wrapper-letter-spacing: .0375rem;--va-badge-text-wrapper-justify-content: center;--va-badge-text-wrapper-white-space: nowrap;--va-badge-text-wrapper-width: auto;--va-badge-text-wrapper-height: auto;--va-badge-text-wrapper-min-width: initial;--va-badge-text-wrapper-min-height: initial;--va-badge-text-wrapper-margin: 0;--va-badge-text-transform: uppercase;--va-badge-text-py: 0;--va-badge-text-px: .25rem}.va-badge{display:inline-flex;position:relative;font-family:var(--va-font-family)}.va-badge__text-wrapper{transition:var(--va-badge-text-wrapper-transition, var(--va-transition));display:var(--va-badge-text-wrapper-display);border:var(--va-badge-text-wrapper-border, var(--va-control-border));border-radius:var(--va-badge-text-wrapper-border-radius);font-weight:var(--va-badge-text-wrapper-font-weight);line-height:var(--va-badge-text-wrapper-line-height);letter-spacing:var(--va-badge-text-wrapper-letter-spacing, var(--va-letter-spacing));justify-content:var(--va-badge-text-wrapper-justify-content);white-space:var(--va-badge-text-wrapper-white-space);width:var(--va-badge-text-wrapper-width);height:var(--va-badge-text-wrapper-height);min-width:var(--va-badge-text-wrapper-min-width);min-height:var(--va-badge-text-wrapper-min-height);margin:var(--va-badge-text-wrapper-margin)}.va-badge--visible-empty .va-badge__text-wrapper{min-width:var(--va-badge-size);min-height:var(--va-badge-size)}.va-badge--dot .va-badge__text-wrapper{min-width:var(--va-badge-dot-size);min-height:var(--va-badge-dot-size);border-width:0;border-radius:100%;padding:0}.va-badge--empty .va-badge__text-wrapper{width:0;height:0;min-width:0;min-height:0;border-width:0}.va-badge--multiLine .va-badge__text-wrapper{white-space:normal}.va-badge--floating .va-badge__text-wrapper{position:absolute;z-index:2;top:0;left:100%;transform:translate(0) translateY(-50%)}.va-badge--overlap .va-badge__text-wrapper{margin-left:calc(-1 * var(--va-badge-overlap));margin-right:0;transform:translateY(-25%)}.va-badge--left .va-badge__text-wrapper{left:0;transform:translate(-100%) translateY(-50%)}.va-badge--left.va-badge--overlap .va-badge__text-wrapper{margin-left:var(--va-badge-overlap);transform:translate(-100%) translateY(-25%)}.va-badge--bottom .va-badge__text-wrapper{top:100%;transform:translate(0) translateY(-50%)}.va-badge--left.va-badge--bottom .va-badge__text-wrapper{transform:translate(-100%) translateY(-50%)}.va-badge--bottom.va-badge--overlap .va-badge__text-wrapper{margin-left:calc(-1 * var(--va-badge-overlap));transform:translate(0) translateY(-75%)}.va-badge--bottom.va-badge--left.va-badge--overlap .va-badge__text-wrapper{margin-left:var(--va-badge-overlap);transform:translate(-100%) translateY(-75%)}.va-badge__text{margin:var(--va-badge-margin);text-transform:var(--va-badge-text-transform);overflow:hidden;min-width:calc(var(--va-badge-font-size) * var(--va-badge-line-height));padding:var(--va-badge-text-py) var(--va-badge-text-px);text-align:center;display:inline-flex;justify-content:center;text-overflow:clip;white-space:nowrap;font-size:var(--va-badge-font-size)}.va-badge--multiLine .va-badge__text{overflow:auto;max-height:initial;text-align:initial;text-overflow:initial;white-space:normal}.va-badge--dot .va-badge__text{display:none}.va-badge--floating .va-badge__text{align-items:center;padding:var(--va-badge-py) .15rem}\n")();
const _sfc_main = defineComponent({
  name: "VaBadge",
  props: {
    ...useComponentPresetProp,
    color: { type: String, default: "danger" },
    textColor: { type: String },
    text: { type: [String, Number], default: "" },
    overlap: { type: Boolean, default: false },
    multiLine: { type: Boolean, default: false },
    visibleEmpty: { type: Boolean, default: false },
    dot: { type: Boolean, default: false },
    transparent: { type: Boolean, default: false },
    left: { type: Boolean, default: false },
    bottom: { type: Boolean, default: false }
  },
  setup(props, { slots }) {
    const isEmpty = computed(() => !(props.text || props.visibleEmpty || props.dot || slots.text));
    const isFloating = computed(() => slots.default || props.dot);
    const badgeClass = computed(() => ({
      "va-badge--visible-empty": props.visibleEmpty,
      "va-badge--empty": isEmpty.value,
      "va-badge--dot": props.dot,
      "va-badge--multiLine": props.multiLine,
      "va-badge--floating": isFloating.value,
      "va-badge--left": props.left,
      "va-badge--bottom": props.bottom,
      "va-badge--overlap": props.overlap
    }));
    const { getColor } = useColors();
    const { textColorComputed } = useTextColor();
    const colorComputed = computed(() => getColor(props.color));
    const badgeStyle = computed(() => ({
      color: textColorComputed.value,
      borderColor: colorComputed.value,
      backgroundColor: colorComputed.value,
      opacity: props.transparent ? 0.5 : 1
    }));
    return { badgeClass, badgeStyle };
  }
});
const _hoisted_1 = { class: "va-badge__text" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["va-badge", _ctx.badgeClass]),
    role: "alert"
  }, [
    createElementVNode("span", {
      class: "va-badge__text-wrapper",
      style: normalizeStyle(_ctx.badgeStyle)
    }, [
      createElementVNode("span", _hoisted_1, [
        renderSlot(_ctx.$slots, "text", {}, () => [
          createTextVNode(toDisplayString(_ctx.text), 1)
        ])
      ])
    ], 4),
    renderSlot(_ctx.$slots, "default")
  ], 2);
}
var _VaBadge = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaBadge as _ };

import './VaBadge.css';
//# sourceMappingURL=VaBadge.js.map
