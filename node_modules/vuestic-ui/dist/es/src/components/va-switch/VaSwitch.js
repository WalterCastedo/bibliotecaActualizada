import { defineComponent, shallowRef, computed, resolveComponent, openBlock, createBlock, normalizeClass, normalizeStyle, withCtx, createElementVNode, mergeProps, toHandlers, withKeys, withModifiers, createElementBlock, renderSlot, createTextVNode, toDisplayString, createCommentVNode, normalizeProps, guardReactiveProps } from "vue";
import { p as pick_1 } from "../../../vendor.js";
import { g as generateUniqueId } from "../../utils/uuid.js";
import { u as useBem } from "../../composables/useBem.js";
import { u as useColors } from "../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";




import { u as useKeyboardOnlyFocus } from "../../composables/useKeyboardOnlyFocus.js";

import { u as useSelectableEmits, a as useSelectableProps, b as useSelectable } from "../../composables/useSelectable.js";
import { u as useTextColor } from "../../composables/useTextColor.js";
import { V as VaProgressCircle } from "../va-progress-circle/index.js";

import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
import { V as VaMessageListWrapper } from "../va-input/components/VaMessageListWrapper.js";
var VaSwitch_vue_vue_type_style_index_0_lang = /* @__PURE__ */ (() => ':root{--va-switch-display: inline-block;--va-switch-checker-margin: auto .3rem;--va-switch-checker-transform: translateX(0);--va-switch-checker-height: 1.5rem;--va-switch-checker-width: 1.5rem;--va-switch-checker-active-background-color: #ffffff;--va-switch-checker-background-color: var(--va-secondary);--va-switch-checker-border-radius: 50%;--va-switch-checker-box-shadow: 0 0 0 var(--va-background-border);--va-switch-checker-transition: all .2s ease;--va-switch-checker-wrapper-transform: translateX(0);--va-switch-checker-wrapper-top: 0;--va-switch-checker-wrapper-left: 0;--va-switch-checker-wrapper-bottom: 0;--va-switch-checker-wrapper-right: 0;--va-switch-checker-wrapper-width: 100%;--va-switch-checker-wrapper-height: 100%;--va-switch-checker-wrapper-transition: all .2s ease;--va-switch-checker-wrapper-pointer-events: none;--va-switch-label-left-padding: .3rem;--va-switch-label-right-padding: .3rem;--va-switch-track-border-radius: 1rem;--va-switch-track-height: 100%;--va-switch-track-width: 100%;--va-switch-track-background: var(--va-background-element);--va-switch-track-box-shadow: inset 0 0 0 var(--va-shadow);--va-switch-track-transition: background-color .2s ease;--va-switch-inner-cursor: pointer;--va-switch-inner-height: 2rem;--va-switch-inner-width: auto;--va-switch-inner-min-width: 4rem;--va-switch-inner-border-radius: 1rem;--va-switch-sm-inner-height: 1.5rem;--va-switch-sm-inner-width: auto;--va-switch-sm-inner-min-width: 3rem;--va-switch-lg-inner-height: 2.5rem;--va-switch-lg-inner-width: auto;--va-switch-lg-inner-min-width: 5rem}.va-switch{line-height:0;display:var(--va-switch-display)}.va-switch__container{display:inline-flex;align-items:center;height:100%;width:100%}.va-switch:focus{outline:none}.va-switch__inner{cursor:var(--va-switch-inner-cursor);display:inline-block;position:relative;height:var(--va-switch-inner-height);width:var(--va-switch-inner-width);min-width:var(--va-switch-inner-min-width);border-radius:var(--va-switch-inner-border-radius);overflow:hidden}.va-switch__inner:focus{outline:0;box-shadow:0 0 0 .3rem #3490dc80}.va-switch--small .va-switch__inner{height:var(--va-switch-sm-inner-height);width:var(--va-switch-sm-inner-width);min-width:var(--va-switch-sm-inner-min-width)}.va-switch--small .va-switch__checker-circle{height:1.1rem;width:1.1rem}.va-switch--large .va-switch__inner{height:var(--va-switch-lg-inner-height);width:var(--va-switch-lg-inner-width);min-width:var(--va-switch-lg-inner-min-width)}.va-switch--large .va-switch__checker-circle{height:1.8rem;width:1.8rem}.va-switch--disabled{cursor:default;opacity:.4;pointer-events:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.va-switch--readonly{cursor:default;pointer-events:none}.va-switch--readonly .va-switch__label{cursor:initial;pointer-events:auto}.va-switch--left-label .va-switch__container{flex-direction:row-reverse}.va-switch--left-label .va-switch__label{padding:0 var(--va-switch-label-left-padding) 0 0}.va-switch--indeterminate .va-switch__checker{margin:auto 0;transform:translate(-50%)}.va-switch--indeterminate .va-switch__checker-wrapper{transform:translate(50%)}.va-switch--checked .va-switch__checker{margin:auto -.3rem;transform:translate(-100%)}.va-switch--checked .va-switch__checker-circle{background-color:var(--va-switch-checker-active-background-color)}.va-switch--checked .va-switch__checker-wrapper{transform:translate(100%)}.va-switch--error .va-switch__track{border:.1rem solid}.va-switch__label{cursor:pointer;text-align:left;padding:0 0 0 var(--va-switch-label-right-padding)}.va-switch .va-switch__track{display:flex;overflow:hidden;border-radius:var(--va-switch-track-border-radius);height:var(--va-switch-track-height);width:var(--va-switch-track-width);background:var(--va-switch-track-background);box-shadow:var(--va-switch-track-box-shadow);transition:var(--va-switch-track-transition)}.va-switch--keyboard-focus.va-switch .va-switch__track{outline:2px solid var(--va-focus)!important;border-radius:"inherit"}.va-switch--small.va-switch .va-switch__track{border-radius:.75rem}.va-switch--large.va-switch .va-switch__track{border-radius:1.25rem}.va-switch .va-switch__track-label{color:#fff;margin:auto .5rem auto 2rem;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:100%}.va-switch--checked.va-switch .va-switch__track-label{margin:auto 2rem auto .5rem}.va-switch--small.va-switch .va-switch__track-label{margin:auto .5rem auto 1.55rem}.va-switch--checked.va-switch--small.va-switch .va-switch__track-label{margin:auto 1.55rem auto .5rem}.va-switch--large.va-switch .va-switch__track-label{margin:auto .5rem auto 2.3rem}.va-switch--checked.va-switch--large.va-switch .va-switch__track-label{margin:auto 2.3rem auto .5rem}.va-switch__checker{position:absolute;top:0;bottom:0;margin:var(--va-switch-checker-margin);transform:var(--va-switch-checker-transform);box-shadow:var(--va-switch-checker-box-shadow);transition:var(--va-switch-checker-transition);display:flex;justify-content:center;align-items:center}.va-switch__checker-circle{height:var(--va-switch-checker-height);width:var(--va-switch-checker-width);background-color:var(--va-switch-checker-background-color);border-radius:var(--va-switch-checker-border-radius)}.va-switch__checker-wrapper{position:absolute;margin:auto;transform:var(--va-switch-checker-wrapper-transform);top:var(--va-switch-checker-wrapper-top);left:var(--va-switch-checker-wrapper-left);bottom:var(--va-switch-checker-wrapper-bottom);right:var(--va-switch-checker-wrapper-right);width:var(--va-switch-checker-wrapper-width);height:var(--va-switch-checker-wrapper-height);transition:var(--va-switch-checker-wrapper-transition);pointer-events:var(--va-switch-checker-wrapper-pointer-events)}.va-switch__input{position:absolute;width:1px;height:1px;margin:-1px;border:0;padding:0;white-space:nowrap;-webkit-clip-path:inset(100%);clip-path:inset(100%);clip:rect(0 0 0 0);overflow:hidden}\n')();
const _sfc_main = defineComponent({
  name: "VaSwitch",
  components: { VaProgressCircle, VaMessageListWrapper },
  emits: [
    ...useSelectableEmits,
    "focus",
    "blur",
    "update:modelValue"
  ],
  props: {
    ...useSelectableProps,
    ...useComponentPresetProp,
    id: { type: String, default: "" },
    name: { type: String, default: "" },
    modelValue: {
      type: [Boolean, Array, String, Object],
      default: false
    },
    trueLabel: { type: String, default: null },
    falseLabel: { type: String, default: null },
    trueInnerLabel: { type: String, default: null },
    falseInnerLabel: { type: String, default: null },
    color: { type: String, default: "primary" },
    offColor: { type: String, default: "background-element" },
    size: {
      type: String,
      default: "medium",
      validator: (value) => ["medium", "small", "large"].includes(value)
    }
  },
  setup(props, { emit, slots }) {
    const elements = {
      container: shallowRef(),
      input: shallowRef(),
      label: shallowRef()
    };
    const { getColor } = useColors();
    const { hasKeyboardFocus, keyboardFocusListeners } = useKeyboardOnlyFocus();
    const {
      isChecked,
      computedError,
      isIndeterminate,
      computedErrorMessages,
      validationAriaAttributes,
      ...selectable
    } = useSelectable(props, emit, elements);
    const computedBackground = computed(() => getColor(isChecked.value ? props.color : props.offColor));
    const { textColorComputed } = useTextColor(computedBackground);
    const computedInnerLabel = computed(() => {
      if (props.trueInnerLabel && isChecked.value) {
        return props.trueInnerLabel;
      }
      if (props.falseInnerLabel && !isChecked.value) {
        return props.falseInnerLabel;
      }
      return "";
    });
    const computedLabel = computed(() => {
      if (props.trueLabel && isChecked.value) {
        return props.trueLabel;
      }
      if (props.falseLabel && !isChecked.value) {
        return props.falseLabel;
      }
      return props.label;
    });
    const computedClass = useBem("va-switch", () => ({
      ...pick_1(props, ["readonly", "disabled", "leftLabel"]),
      checked: isChecked.value,
      indeterminate: isIndeterminate.value,
      small: props.size === "small",
      large: props.size === "large",
      error: computedError.value,
      keyboardFocus: hasKeyboardFocus.value
    }));
    const styleComputed = computed(() => ({
      lineHeight: computedErrorMessages.value.length ? 1 : 0
    }));
    const progressCircleSize = computed(() => {
      const size = { small: "15px", medium: "20px", large: "25px" };
      return size[props.size];
    });
    const trackStyle = computed(() => ({
      borderColor: props.error ? getColor("danger") : "",
      backgroundColor: computedBackground.value
    }));
    const labelStyle = computed(() => ({
      color: props.error ? getColor("danger") : ""
    }));
    const trackLabelStyle = computed(() => ({
      color: textColorComputed.value,
      "text-align": isChecked.value ? "left" : "right"
    }));
    const ariaLabelIdComputed = computed(() => `aria-label-id-${generateUniqueId()}`);
    const inputAttributesComputed = computed(() => ({
      id: props.id || void 0,
      name: props.name || void 0,
      disabled: props.disabled,
      readonly: props.readonly,
      ariaDisabled: props.disabled,
      ariaReadOnly: props.readonly,
      ariaChecked: !!props.modelValue,
      "aria-labelledby": computedLabel.value || slots.default ? ariaLabelIdComputed.value : void 0,
      ...validationAriaAttributes.value
    }));
    return {
      ...selectable,
      computedErrorMessages,
      isChecked,
      computedError,
      isIndeterminate,
      keyboardFocusListeners,
      computedInnerLabel,
      computedLabel,
      computedClass,
      styleComputed,
      progressCircleSize,
      trackStyle,
      labelStyle,
      trackLabelStyle,
      ariaLabelIdComputed,
      inputAttributesComputed
    };
  }
});
const _hoisted_1 = { class: "va-switch__checker-wrapper" };
const _hoisted_2 = { class: "va-switch__checker" };
const _hoisted_3 = { class: "va-switch__checker-circle" };
const _hoisted_4 = ["id"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_va_progress_circle = resolveComponent("va-progress-circle");
  const _component_VaMessageListWrapper = resolveComponent("VaMessageListWrapper");
  return openBlock(), createBlock(_component_VaMessageListWrapper, {
    class: normalizeClass(["va-switch", _ctx.computedClass]),
    style: normalizeStyle(_ctx.styleComputed),
    disabled: _ctx.$props.disabled,
    success: _ctx.$props.success,
    messages: _ctx.$props.messages,
    error: _ctx.computedError,
    "error-messages": _ctx.computedErrorMessages,
    "error-count": _ctx.$props.errorCount
  }, {
    default: withCtx(() => [
      createElementVNode("div", {
        ref: "container",
        class: "va-switch__container",
        tabindex: "-1",
        onBlur: _cache[7] || (_cache[7] = (...args) => _ctx.onBlur && _ctx.onBlur(...args))
      }, [
        createElementVNode("div", {
          class: "va-switch__inner",
          onClick: _cache[3] || (_cache[3] = (...args) => _ctx.toggleSelection && _ctx.toggleSelection(...args))
        }, [
          createElementVNode("input", mergeProps({
            ref: "input",
            type: "checkbox",
            class: "va-switch__input",
            role: "switch"
          }, _ctx.inputAttributesComputed, toHandlers(_ctx.keyboardFocusListeners), {
            onFocus: _cache[0] || (_cache[0] = (...args) => _ctx.onFocus && _ctx.onFocus(...args)),
            onBlur: _cache[1] || (_cache[1] = (...args) => _ctx.onBlur && _ctx.onBlur(...args)),
            onKeypress: _cache[2] || (_cache[2] = withKeys(withModifiers((...args) => _ctx.toggleSelection && _ctx.toggleSelection(...args), ["prevent"]), ["enter"]))
          }), null, 16),
          createElementVNode("div", {
            class: "va-switch__track",
            "aria-hidden": "true",
            style: normalizeStyle(_ctx.trackStyle)
          }, [
            _ctx.computedInnerLabel || _ctx.$slots.innerLabel ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: "va-switch__track-label",
              style: normalizeStyle(_ctx.trackLabelStyle)
            }, [
              renderSlot(_ctx.$slots, "innerLabel", {}, () => [
                createTextVNode(toDisplayString(_ctx.computedInnerLabel), 1)
              ])
            ], 4)) : createCommentVNode("", true),
            createElementVNode("div", _hoisted_1, [
              createElementVNode("span", _hoisted_2, [
                renderSlot(_ctx.$slots, "checker", normalizeProps(guardReactiveProps({ value: _ctx.isChecked })), () => [
                  createElementVNode("div", _hoisted_3, [
                    _ctx.$props.loading ? (openBlock(), createBlock(_component_va_progress_circle, {
                      key: 0,
                      indeterminate: "",
                      size: _ctx.progressCircleSize,
                      color: _ctx.trackStyle.backgroundColor
                    }, null, 8, ["size", "color"])) : createCommentVNode("", true)
                  ])
                ])
              ])
            ])
          ], 4)
        ]),
        _ctx.computedLabel || _ctx.$slots.default ? (openBlock(), createElementBlock("div", {
          key: 0,
          ref: "label",
          class: "va-switch__label",
          style: normalizeStyle(_ctx.labelStyle),
          id: _ctx.ariaLabelIdComputed,
          onBlur: _cache[4] || (_cache[4] = (...args) => _ctx.onBlur && _ctx.onBlur(...args)),
          onClick: _cache[5] || (_cache[5] = (...args) => _ctx.toggleSelection && _ctx.toggleSelection(...args)),
          onKeydown: _cache[6] || (_cache[6] = withKeys(withModifiers((...args) => _ctx.toggleSelection && _ctx.toggleSelection(...args), ["stop"]), ["enter"]))
        }, [
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(_ctx.computedLabel), 1)
          ])
        ], 44, _hoisted_4)) : createCommentVNode("", true)
      ], 544)
    ]),
    _: 3
  }, 8, ["class", "style", "disabled", "success", "messages", "error", "error-messages", "error-count"]);
}
var _VaSwitch = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaSwitch as _ };

import './VaSwitch.css';
//# sourceMappingURL=VaSwitch.js.map
