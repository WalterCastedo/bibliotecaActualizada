import { defineComponent, computed, openBlock, createElementBlock, normalizeStyle, renderSlot } from "vue";

import { u as useColors } from "../../composables/useColors.js";
import { u as useComponentPresetProp } from "../../composables/useComponentPreset.js";


import { u as useFixedBarProps, a as useFixedBar } from "../../composables/useFixedBar.js";



import { s as setupScroll } from "../../composables/useScroll.js";
import { _ as _export_sfc } from "../../../plugin-vue_export-helper.js";
var VaAppBar_vue_vue_type_style_index_0_lang = /* @__PURE__ */ (() => ":root{--va-app-bar-position: relative;--va-app-bar-height: auto;--va-app-bar-shadow: 0 0 12px 2px;--va-app-bar-z-index: calc(var(--va-z-index-teleport-overlay) - 100);--va-app-bar-transition: transform .5s ease}.va-app-bar{display:flex;align-items:center;position:var(--va-app-bar-position);transition:all .5s ease;top:0;left:0;width:100%;height:var(--va-app-bar-height);min-height:var(--va-app-bar-height);min-width:100%;font-family:var(--va-font-family);z-index:var(--va-app-bar-z-index)}.va-app-bar--bottom{top:100%;transform:translateY(-100%)}\n")();
const _sfc_main = defineComponent({
  name: "VaAppBar",
  props: {
    ...useFixedBarProps,
    ...useComponentPresetProp,
    gradient: { type: Boolean, default: false },
    target: { type: [Object, String], default: "" },
    shadowOnScroll: { type: Boolean, default: false },
    shadowColor: { type: String, default: "" },
    color: { type: String, default: void 0 }
  },
  setup(props) {
    const { scrollRoot, isScrolledDown } = setupScroll(props.fixed, props.target);
    const { fixedBarStyleComputed } = useFixedBar(props, isScrolledDown);
    const { getColor, getGradientBackground, getBoxShadowColor } = useColors();
    const colorComputed = computed(() => getColor(props.color));
    const showShadowComputed = computed(() => isScrolledDown.value ? !!props.shadowOnScroll : false);
    const shadowColorComputed = computed(() => getColor(props.shadowColor, colorComputed.value));
    const computedShadow = computed(() => {
      const shadow = getBoxShadowColor(props.shadowColor ? shadowColorComputed.value : colorComputed.value);
      return showShadowComputed.value ? `var(--va-app-bar-shadow) ${shadow}` : "";
    });
    const computedStyle = computed(() => ({
      ...fixedBarStyleComputed.value,
      background: props.gradient ? getGradientBackground(colorComputed.value) : colorComputed.value,
      boxShadow: computedShadow.value
    }));
    return { scrollRoot, computedStyle };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("header", {
    ref: "scrollRoot",
    role: "toolbar",
    class: "va-app-bar",
    style: normalizeStyle(_ctx.computedStyle)
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 4);
}
var _VaAppBar = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { _VaAppBar as _ };

import './VaAppBar.css';
//# sourceMappingURL=VaAppBar.js.map
